
longestIncreasingPath([
   [0,1,2,3,4,5,6,7,8,9],
   [19,18,17,16,15,14,13,12,11,10],
   [20,21,22,23,24,25,26,27,28,29],
   [39,38,37,36,35,34,33,32,31,30],
   [40,41,42,43,44,45,46,47,48,49],
   [59,58,57,56,55,54,53,52,51,50],
   [60,61,62,63,64,65,66,67,68,69],
   [79,78,77,76,75,74,73,72,71,70],
   [80,81,82,83,84,85,86,87,88,89],
   [99,98,97,96,95,94,93,92,91,90],
   [100,101,102,103,104,105,106,107,108,109],
   [119,118,117,116,115,114,113,112,111,110],
   [120,121,122,123,124,125,126,127,128,129],
   [139,138,137,136,135,134,133,132,131,130],
   [0,0,0,0,0,0,0,0,0,0]]);

assert longestIncreasingPath(
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
]) == 4;

func longestIncreasingPath(matrix) {
   let positions = [];
   
   for(i in 0 to matrix.length -1){
      for(j in 0 to matrix[i].length -1) {
         let position = Position(i, j);
         positions.add(position);
      }
   }
   // this may not work if there are similar numbers beside each other
   // what might be needed is to merge them in to buckets and search 
   // the buckets....
   Collections.sort(positions, (a, b) -> Integer.compare(matrix[a.row][a.col], matrix[b.row][b.col]));
   
   let previous = positions[0];
   let count = 0;
   let max = 0;
   
   for(i in 1 to positions.length -1){
      let position = positions[i];
      let horizontal = Math.abs(position.row - previous.row);
      let vertical = Math.abs(position.col - previous.col);
      
      if(horizontal + vertical == 1) {
         count++;
         
         if(count > max) {
            max = count;
         }
      } else {
         count = 1;
      }
      previous = position;
   }
   return max;
}

class Position {
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
}