

assert longestIncreasingPath([
<<<<<<< Updated upstream
   [9,9,4],
   [6,6,8],
   [2,1,1]]) == 4;

assert longestIncreasingPath([
=======
>>>>>>> Stashed changes
   [0,1,2,3,4,5,6,7,8,9],
   [19,18,17,16,15,14,13,12,11,10],
   [20,21,22,23,24,25,26,27,28,29],
   [39,38,37,36,35,34,33,32,31,30],
   [40,41,42,43,44,45,46,47,48,49],
   [59,58,57,56,55,54,53,52,51,50],
   [60,61,62,63,64,65,66,67,68,69],
   [79,78,77,76,75,74,73,72,71,70],
   [80,81,82,83,84,85,86,87,88,89],
   [99,98,97,96,95,94,93,92,91,90],
   [100,101,102,103,104,105,106,107,108,109],
   [119,118,117,116,115,114,113,112,111,110],
   [120,121,122,123,124,125,126,127,128,129],
   [139,138,137,136,135,134,133,132,131,130],
   [0,0,0,0,0,0,0,0,0,0]]) == 140;
<<<<<<< Updated upstream
=======

assert longestIncreasingPath([
  [9,9,4],
  [6,6,8],
  [2,1,1]]) == 4;
>>>>>>> Stashed changes

func longestIncreasingPath(matrix) {
   let positions = [];
   let cache = {:};
   let max = 0;
   
   for(let i = 0; i < matrix.length; i++) {
      for(let j = 0; j < matrix[i].length; j++) {
         let value = matrix[i][j];
         let position = Position(i, j, value);
         
         positions.add(position);
      }
   }
<<<<<<< Updated upstream
   Collections.sort(positions, (a, b) -> Integer.compare(b.value, a.value));
   
   for(let position in positions) {
      let count = longestIncreasingPath(matrix, position, cache);
         
      if(count > max) {
         max = count;
=======
   Collections.sort(positions, (a, b) -> Integer.compare(matrix[b.row][b.col], matrix[a.row][a.col]));
   
   for(let i = 0; i < positions.length; i++){
      let position = positions[i];
      let count = longestIncreasingPath(matrix, position, 1, cache);
      
      if(count > max) {
         max = count;
      }
      if(max > positions.length -i) {
         break;
>>>>>>> Stashed changes
      }
   }
   println(max);
   return max;
}


<<<<<<< Updated upstream
func longestIncreasingPath(matrix, position, cache){
   let max = 1;

   for(direction in Direction.ALL) {
      let next = direction.next(matrix, position);
      
      if(next != null) {
         let score = cache[next.key];
      
         if(score == null) {
            score = longestIncreasingPath(matrix, next, cache);  
         } 
         if(score >= max) {
            max = score + 1; // this score is next + 1
=======
func longestIncreasingPath(matrix, position, depth, cache){
   let max = 0;
   
   for(direction in Direction.ALL) {
      let next = direction.next(matrix, position);
      
      if(next != null) {      
         let count = longestIncreasingPath(matrix, next, depth+1, cache);   
         
         if(count > max) {
            max = count;
>>>>>>> Stashed changes
         }
      } 
   }
<<<<<<< Updated upstream
   return cache[position.key] = max;
=======
   return max == 0 ? depth : max;
>>>>>>> Stashed changes
}

class Position {
   const value;
   const row;
   const col;
   const value;
   const key;
   
   new(row, col, value) {
      this.value = value;
      this.row = row;
      this.col = col;
      this.key = "${row}.${col}";      
   }
   
   override toString(){
      return String.valueOf(value);
   }
   
   getKey() {
      return "${row}.${col}";
   }
   
   override toString() {
      return String.valueOf(value);
   }
}

class Direction {
   static const LEFT = Direction(-1, 0);
   static const RIGHT = Direction(1, 0);
   static const UP = Direction(0, -1);
   static const DOWN = Direction(0, 1);
   static const ALL = [LEFT, RIGHT, UP, DOWN];
   
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
   
   next(matrix, position) {
      let nextRow = position.row + row;
      let nextCol = position.col + col;
      
      if(nextRow < 0 || nextRow >= matrix.length) {
         return null;
      }
      if(nextCol < 0 || nextCol >= matrix[nextRow].length){
         return null;
      }
      let next = matrix[nextRow][nextCol];
      let curr = matrix[position.row][position.col];
      
      if(next > curr) {
         return Position(nextRow, nextCol, next);
      }
      return null;
   }
   
   
}