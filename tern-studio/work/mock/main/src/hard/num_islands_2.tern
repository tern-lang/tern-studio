
// assert numIslands(2, 2, [[0,0], [1,1], [0,1]]) == [1,2,1];
// assert numIslands(3, 3, [[0,0], [0,1], [1,2], [2,1]]) == [1,1,2,3];


let source = this.getModule().getContext().getManager().getString("/hard/island_hops.txt");
let array = eval(source);

let result = numIslands(70, 77, array);

println(result);

func numIslands(m, n, positions) {
   let map = indexLocations(m, n);
   let counts = [];
   
   for(let position in positions) {
      let key = "${position[0]}.${position[1]}";
      let location = map[key];
      let beside = Direction.adjacent(location, map);
       
      location.combine(location);
      location.value++;

      for(let other in beside) {
         location.combine(other);
      }
   }
   let islands = makeIslands(map);
   let count = islands.length;

   for(let i in 0 from positions.length -1) {
      let position = positions[i];
      let key = "${position[0]}.${position[1]}";
      let location = map[key];
      
      if(location != null) {
         let island = location.island;
         let locations = island.locations;
         
         locations.remove(location);
         
         if(locations.length == 0) {
            count--;
         }
      }
      counts.add(count);
   }
   Collections.reverse(counts);
   return counts;
}

func makeIslands(map){
   let islands = {};
   let count = 0;
   
   for(let entry in map) {
      let location = entry.value;
      
      if(location.value != 0 && location.island == null) {
         let island = makeIsland(location, count++);
         islands.add(island);
      }
   }
   return islands;
}

func makeIsland(location, count) {
   let queue = LinkedList();
   let island = Island(count);
   
   queue.offer(location);

   while(!queue.isEmpty()){
      let next = queue.poll();
      
      for(other in next.besides){
         if(island.locations.add(other)) {
            other.island = island;
            queue.offer(other);
         }
      }
   }
   return island;
}

func indexLocations(m, n) {
   let locations = {:};
   
   for(let i = 0; i < m; i++) {
      for(let j = 0; j < n; j++){
         let location = Location(i, j);
         locations[location.key] = location;
      }
   }
   return locations;
}

class Island {
   
   let locations: Set<Location>;
   
   new() {
      this.locations = {};
      this.count = count;
   }
}

class Location {

   let besides: Set<Location>;
   let island; 
   let value;   
   let row;
   let col;
   
   new(row, col){
      this.island = Stack<Island>();
      this.besides = {};
      this.row = row;
      this.col = col;
      this.value = 0;
   }
   
   combine(location: Location, count: Integer){
      if(location.value != 0 && value != 0) {
         return besides.add(location) &&
            location.besides.add(this);
      }
   }

   getKey(){
      return "${row}.${col}";
   }
   
   override toString() {
      return "${row}.${col}=${value}";
   }
}

class Direction {
   static const LEFT = Direction(0, -1);
   static const RIGHT = Direction(0, 1);
   static const UP = Direction(-1, 0);
   static const DOWN = Direction(1, 0);
   static const ALL = [LEFT, RIGHT, UP, DOWN];
   
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
   
   next(location, map): Location {
      let nextRow = row + location.row;
      let nextCol = col + location.col;
      let key = "${nextRow}.${nextCol}";
      let next = map[key];
 
      if(next != null && next.value != 0) {
         return next;
      }
      return null;
   }
   
   static adjacent(location, map): List<Location> {
      let beside = [];
      
      for(let direction in ALL) {
         let next = direction.next(location, map);
         
         if(next != null) {   
            beside.add(next);
         }
      }
      return beside;
   }
}