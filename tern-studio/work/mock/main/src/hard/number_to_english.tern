
assert numToWords(123) == "One Hundred Twenty Three";
assert numToWords(12345) == "Twelve Thousand Three Hundred Forty Five";
assert numToWords(1234567891) == "One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One";
assert numToWords(1100) == "One Thousand One Hundred";             

func numToWords(num) {
   let builder = StringBuilder();
   let map = {:};
   let ones = {:};

   ones.put(1000000000, "One Billion");
   ones.put(1000000, "One Million");
   ones.put(1000, "One Thousand");
   ones.put(100, "One Hundred");
   ones.put(1, "One");      
   ones.put(0, "Zero");   

   map.put(1000000000, "Billion");
   map.put(1000000, "Million");
   map.put(1000, "Thousand");   
   map.put(100, "Hundred");
   map.put(90, "Ninety");
   map.put(80, "Eighty");
   map.put(70, "Seventy");
   map.put(60, "Sixty");
   map.put(50, "Fifty");
   map.put(40, "Forty");
   map.put(30, "Thirty");
   map.put(20, "Twenty");
   map.put(19, "Nineteen");
   map.put(18, "Eighteen");
   map.put(17, "Seventeen");
   map.put(16, "Sixteen");
   map.put(15, "Fifteen");
   map.put(14, "Fourteen");
   map.put(13, "Thirteen");
   map.put(12, "Twelve");
   map.put(11, "Eleven");
   map.put(10, "Ten");
   map.put(9, "Nine");
   map.put(8, "Eight");
   map.put(7, "Seven");
   map.put(6, "Six");
   map.put(5, "Five");
   map.put(4, "Four");
   map.put(3, "Three");
   map.put(2, "Two");
   map.put(1, "One");
   
   numToWords(num, builder, map, ones);
   
   println(builder);
   return builder.toString().trim();
}

func numToWords(num, builder, map, ones){
   let word = ones[num];
   
   if(word == null) {
      word = map[num];
   }
   if(word != null){
      builder.append(word);
      builder.append(" ");
   } else {
      for(entry in map) {
         if(entry.key < num) {
            let count = num / entry.key;

            if(count != 1 || builder.length == 0) {
               if(count > 99) {
                  numToWords(count, builder, map, ones);
               }
            }
            numToWords(entry.key, builder, map, ones);
            numToWords(num % entry.key, builder, map, ones);
            break;
         }
      }
   } 
}