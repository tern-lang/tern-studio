

assert numIslands(3,3, [[0,0], [0,1], [1,2], [2,1]]) == [1,1,2,3];

func numIslands(m, n, positions) {
   let grid = blankGrid(m, n);
   let map = {:}; // string -> Island
   let counts = [];
   
   for(let i = 0; i < positions.length; i++) {
      let row = positions[i][0];
      let col = positions[i][1];
      
      updateGrid(row, col, grid, map);
      
      let count = map.size();
      counts.add(count);
   }
   println(counts);
   return counts;
}

func updateGrid(row, col, grid, map) {
   let position = grid[row][col];
   let adjacent = adjacentPositions(position, grid);
   
   for(other in adjacent) {
      position.combine(map, other);
   }
   position.update(map);
}

func adjacentPositions(position, grid) {
   let adjacent = [];
   
   for(let direction in Direction.ALL) {
      let next = direction.next(position.row, position.col, grid);
      
      if(next != null) {
         adjacent.add(next);
      }
   }
   return adjacent;
}


func blankGrid(m, n) {
   let count = 0;
   let grid = [];
   
   for(let i = 0; i < m; i++) {
      let row = [];
      
      for(let j = 0; j < n; j++){
         row[j] = Position(i, j);
      }
      grid[i] = row;
   }
   return grid;
}

class Island {

   const positions;
   const key;
   
   new(key) {
      this.positions = {};
      this.key = key;
   }
   
}

class Position {

   let index;
   let value;
   let row;
   let col;
   
   new(row, col) {
      this.value = 0;      
      this.row = row;
      this.col = col;
   }
   
   combine(map, other) {
      if(other.value != 0) {
         if(index != other.index) {
            let key = index ?? other.index;
            let otherIsland = map.get(other.index);            
            let thisIsland = map.remove(key); // remove island
          
            if(otherIsland != thisIsland) {  
               otherIsland.positions.addAll(thisIsland);
            }
            map.put(key, otherIsland); // combine them
            otherIsland.positions.add(this);      
            index = other.index; // key this island now
         }
      }
   }
   
   update(map) {
      if(value == 0) {
         if(index == null) {
            index = map.size();
            map[index] = Island(index);
         }
      }
      value++;
   }
}

class Direction {
   static const LEFT = Direction(0, -1);
   static const RIGHT = Direction(0, 1);
   static const UP = Direction(-1, 0);
   static const DOWN = Direction(1, 0);
   static const ALL = [LEFT, RIGHT, UP, DOWN];
   
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
   
   next(row, col, grid) {
      let nextRow = row + this.row;
      let nextCol = col + this.col;
      
      if(nextRow < 0 || nextCol < 0){
         return null;
      }
      if(nextRow >= grid.length || nextCol >= grid[nextRow].length) {
         return null;
      }
      let position = grid[nextRow][nextCol];
      
      if(position.value != 0) {
         return position;
      }
      return null;
   }
   
}