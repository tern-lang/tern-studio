


let system = AutoCompleteSystem(["i love you", "island","ironman", "i love leetcode"], [5,3,2,2]);
let results = system.input('i');

println(results);


class AutoCompleteSystem {

   const root: InputNode;
   const builder: StringBuilder;

   new(sentances, times){
      this.builder = StringBuilder();
      this.root = InputNode("", 0);
      
      for(i in 0 to sentances.length -1) {
         root.add(sentances[i], times[i]);
      }
   }
   
   input(c) {
      if(c == '#') {
         builder.setLength(0);
      } else {
         builder.append(c);
         
         let text = builder.toString();
         let iterator = root.iterator();
         let result = [];
         
         for(i in 0 to 2) {
            if(iterator.hasNext()){
               let next = iterator.next();
               result.add(next.prefix);
            }
         }
         return result;
      }
   }
}

class InputNode {

   let nodes: Map<Character, InputNode>;
   let prefix;
   let count;
   
   new(prefix, count) {
      this.prefix = prefix;
      this.count = count;
      this.nodes = {:};
   }
   
   public iterator() {
      let capture = {};
      
      for(entry in nodes) {
         collect(entry.value, capture);
      }
      let list = [];
      
      for(element in capture) {
         list.add(element);
      }
      Collections.sort(list, (a, b) -> Integer.compare(b.count, a.count));
      return list.iterator();
   }
   
   private collect(node: InputNode, done: Set<InputNode>) {
      if(node.count > 0) {
         done.add(node);
      }
      for(entry in node.nodes) {
         collect(entry.value, done);
      }
   }
   
   public get(text) {
      if(prefix.length < text.length) {
         let next = text[prefix.length];
         let node = nodes[next];
         
         if(node != null) {
            return node.get(text);
         }
      }
      return null;
   }
   
   public add(text) {
      add(text, 0);
   }
   
   public add(text, num) {
      if(prefix.length < text.length) {
         let next = text[prefix.length];
         let node = nodes.get(next);

         if(node == null) {
            let newPrefix = text.substring(0, prefix.length + 1);           
            let newNode = InputNode(newPrefix, 0);
            
            newNode.add(text, num);
            nodes.put(next, newNode);
         } else {
            node.add(text, num);
         }
      } else {
         count += num; // we found the node
      }
   }
   
   public override toString() {
      return "${prefix}:${count}";
   }
}