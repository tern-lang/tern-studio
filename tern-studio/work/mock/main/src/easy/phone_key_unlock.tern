

assert numberOfPatterns(1, 1) == 9;
assert numberOfPatterns(1, 3) == 385;

func numberOfPatterns(m, n) {
   let pad = [1,2,3,4,5,6,7,8,9];
   let index = indexNeighbours();
   let cache = {:};
   let keep = {};
   
   for(digit in pad) {
      let results = traverse(digit, index, {digit}, "${digit}", n); 
      
      for(result in results) {
         if(result.length >= m) {
            keep.add(result);
         }
      }
   }
   println(keep.length);
   return keep.length;
}

func traverse(digit, index, touch, pattern, limit) {
   let result = {pattern};
   
   if(pattern.length < limit) {
      let neighbours = index[digit];
      
      for(neighbour in neighbours) {
         if(touch.add(neighbour.digit)) {
            let clean = HashSet(touch);
            let children = traverse(neighbour.digit, index, clean, pattern + neighbour.digit, limit);
            
            result.addAll(children);
         }
      }
   }
   return result;
}

func indexNeighbours(): Map<Integer, Set<Key>> {
   let moves: List<Move> = possibleMoves();
   let index: Map<Integer, Set<Key>> = {:};
   let keys: Map<Integer, Key> = {:};
   
   for(row in 0 to 2) {
      for(col in 0 to 2) {      
         let key = Key(row, col);
         keys[key.digit] = key;
      }
   }
   for(entry in keys){
      let key: Key = entry.value;
      let digit: Integer = entry.key;
      let list: Set<Key> = {};
      
      for(move in moves) {
         let next: Key = move.next(entry.value);
         
         if(next != null && next.digit != digit) {
            let identical = keys[next.digit];
            list.add(identical);
         }
      }
      index.put(digit, list);
   }
   return index;
}

func possibleMoves() {
   let moves = [];
   
   for(i in [1, 0, -1]) {
      for(j in [1, 0, -1]) {
         let move = Move(i, j, false);
         moves.add(move);
      }
   }
   for(i in [2, -2]) {
      for(j in [1, -1]) {
         let move = Move(i, j, true);
         moves.add(move);
      }
   }
   for(i in [1, -1]) {
      for(j in [2, -2]) {
         let move = Move(i, j, true);
         moves.add(move);
      }
   }
   return moves;
}


class Move {

   const jump;
   const row;
   const col;
   
   new(row, col, jump) {
      this.jump = jump;
      this.row = row;
      this.col = col;
   }

   next(key) {
      let newRow = row + key.row;
      let newCol = col + key.col;
      
      if(newRow < 0 || newCol < 0) {
         return null;
      }
      if(newRow >= 3 || newCol >= 3) {
         return null;
      }
      return Key(newRow, newCol);
   }
}



class Key {

   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
   
   digit() {
      return col + 1 + (row * 3);   
   }
   
   override toString() {
      return "key-" +digit();
   }
}