
assert numIslands([
[1,1,1,1,0],
[1,1,0,1,0],
[1,1,0,0,0],
[0,0,0,0,0]]) == 1;

func numIslands(grid) {  
   let count = 0;
   
   for(let i = 0; i < grid.length; i++)  {
      for(let j = 0; j < grid[i].length; j++) {
         let value = grid[i][j];
         
         if(value != 0) {
            deleteIsland(i, j, grid);
            count++;
         }
      }
   }
   return count;
}

func deleteIsland(row, col, grid){
   for(let direction in Direction.ALL) {
      let next = direction.next(row, col, grid);
    
      if(next != null) {
         grid[next.row][next.col] = 0;
         deleteIsland(next.row, next.col, grid);
      }
   }
}

class Position {
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
}

class Direction {
   static const LEFT = Direction(0, -1);
   static const RIGHT = Direction(0, 1);
   static const UP = Direction(-1, 0);
   static const DOWN = Direction(1, 0);
   static const ALL = [LEFT, RIGHT, UP, DOWN];
   
   const row;
   const col;
   
   new(row, col) {
      this.row = row;
      this.col = col;
   }
   
   next(row, col, grid) {
      let nextRow = row + this.row;
      let nextCol = col + this.col;
      
      if(nextRow < 0 || nextCol < 0){
         return null;
      }
      if(nextRow >= grid.length || nextCol >= grid[nextRow].length) {
         return null;
      }
      let value = grid[nextRow][nextCol];
      
      if(value != 0) {
         return Position(nextRow, nextCol);
      }
      return null;
   }
   
}