

groupStrings(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]).stream().forEach(this::println);

func groupStrings(strings) {
   let index = indexDistances();
   let groups = {:};
   
   for(string in strings) {
      let key = calculateUniqueKey(string, index);
      let bag = groups.computeIfAbsent(key, (_) -> []);
      
      bag.add(string);
   }
   let result = [];
   
   for(entry in groups) {
      result.add(entry.value);
   }
   return result;
}

func calculateUniqueKey(string, index) {
   let builder = StringBuilder();
   
   for(i in 1 to string.length - 1){
      let a = string[i-1];
      let b = string[i];
      let key = "${a}->${b}";
      let distance = index[key];
      
      builder.append(distance);
      builder.append("-");
   }
   return builder.toString();
}

func indexDistances() {
   const alphabet = "abcdefghijklmnopqrstuvwxyz";
   const index = {:};
   
   for(i in 0 to alphabet.length-1) {
      for(j in 0 to alphabet.length -1) {
         let a = alphabet[i];
         let b = alphabet[j];
         let distance = distanceBetween(a, b, alphabet);
         let key = "${a}->${b}";
         
         index[key] = distance;
      }
   }
   return index;
}

func distanceBetween(a, b, alphabet) {
   let start = alphabet.indexOf(a);
   let finish = alphabet.indexOf(b);
   let count = 0;
   
   while(start != finish){
      if(start++ >= alphabet.length) {
         start = 0;
      } else {
         count++;
      }
   }
   return count;
}