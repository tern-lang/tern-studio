

groupStrings(["a", "a"]).stream().forEach();
groupStrings(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]).stream().forEach(this::println);
groupStrings(["ab","ba"]).stream().forEach(this::println);


func groupStrings(strings) {
   let nodes = [];
   
   for(string in strings) {
      let node = Node(string);
      
      nodes.add(node);
      node.nodes.add(node);
   }
   let index = distanceIndex();
   
   for(let i = 0; i < nodes.length; i++) {
      for(let j = 0; j < nodes.length; j++) {
         if(nodes[i] != nodes[j]) {
            if(sameDistance(nodes[i].value, nodes[j].value, index)) {
               nodes[i].nodes.add(nodes[i]);
               nodes[j].nodes.add(nodes[i]);
            } else {
               println("NOT same ${nodes[i].value} ${nodes[j].value}");
            }
         }
      }
   }
   let roots = {:};
   let results = [];
      
   for(node in nodes) {
      let key = node.rootKey();
      let list = roots[key];
      
      if(list == null){
         roots.put(key, ArrayList(node.nodes));
      }
   }
   for(entry in roots) {
      results.add(entry.value);
   }
   return results;
}

func sameDistance(a, b, index) {
   if(a.length == b.length) {
      for(let i = 1; i < b.length; i++) {
         let distanceA = index["${a[i-1]}${a[i]}"];
         let distanceB = index["${b[i-1]}${b[i]}"];
         
         if(distanceA != distanceB) {
            return false;
         }
      }
      return true;
   }
   return false;
   
}

func distanceIndex() {
   let index = {:};
   
   for(let i = 0; i < 26; i++) {
      for(let j = 0; j < 26; j++) {
         let value = distanceBetween(i, j);
         let key = distanceKey(i, j);
         
         index.put(key, value);
      }
   }
   return index;
}

func distanceKey(a, b) {
   let alphabet = "abcdefghijklmnopqrstuvwxyz";
   let left = alphabet[a];
   let right = alphabet[b];
   
   return "${left}${right}";
}

func distanceBetween(a, b) {
   let wrap = 25;
   let count = 0;
   
   while(a != b) {
      if(a >= wrap) {
         a = -1;
      }
      count++;
      a++;
   }
   return count;
}



class Node {
   let nodes: TreeSet<Node>;
   let visit;
   let value;
   
   new(value) {
      this.nodes = TreeSet((a, b) -> a.value.compareTo(b.value));
      this.value = value;
      this.visit = false;
   }
   
   rootKey() {
      let iterator = nodes.iterator();
      
      if(iterator.hasNext()) {
         return iterator.next().value;
      }
      return value;
   }
   
   override toString(){
      return value;
   }
   
}