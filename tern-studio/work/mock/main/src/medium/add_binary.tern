
assert addBinary("1010", "1011") == "10101";
assert addBinary("11", "1") == "100";

//
//     1010
//     1011      
// --------
//        1
//       01 --> 1
//      101
//     0101 --> 1
//    10101

func addBinary(a, b) {
   let builder = StringBuilder();
   let sums = {:};
   
   sums.put(3, [1,1]); //  1+1+1 -> 1 -> 1
   sums.put(2, [0,1]);  // 1+1   ->  0 -> 1
   sums.put(1, [1,0]);  // 1+0 = 1 -> 0
   sums.put(0, [0,0]);
   
   let carry = 0;
   let left = parseBinary(a);
   let right = parseBinary(b);
   
   if(left.length < right.length) {
      (left, right) = (right, left);
   }
   let diff = left.length - right.length;
   
   while(!left.isEmpty() && !right.isEmpty()) {
      let key = left.poll() + right.poll() + carry;
      let result = sums[key];
      
      builder.append(result[0]);
      carry = result[1];
   }
   while(!left.isEmpty()) {
      let key = left.poll() + carry;
      let result = sums[key];
      
      builder.append(result[0]);
      carry = result[1];
   }
   if(carry > 0){
      builder.append(carry);
   }
   return builder.reverse().toString();
}

func parseBinary(s) {
   let queue = LinkedList();
   
   for(i in 0 from s.length -1) {
      let digit = s[i];
      
      if(digit == '0') {
         queue.offer(0);
      } else {
         queue.offer(1);
      }
   }
   return queue;
}