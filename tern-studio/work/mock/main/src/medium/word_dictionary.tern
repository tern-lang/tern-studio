

let dictionary = WordDictionary();

dictionary.add("bad");
dictionary.add("dad");
dictionary.add("mad");

assert !dictionary.search("pad");
assert dictionary.search("bad");
assert dictionary.search(".ad");
assert dictionary.search("b..");


class WordDictionary {

   let root = new Node("");

   add(text) {
      root.add(text);
   }
   
   search(text) {
      return root.search(text);
   }


   class Node {
   
      let nodes: Map<Character, Node>;
      let prefix;
      let count;
      
      new(prefix) {
         this.nodes = {:};
         this.prefix = prefix;
         this.count = 0;
      }
      
      search(text) {
         let length = prefix.length;
         
         if(length < text.length) {
            let key = text[length];
            
            if(key == '.') {
               for(entry in nodes) {
                  if(entry.value.search(text)) {
                     return true;
                  }
               }
            } else {
               let node = nodes[key];
               
               if(node != null){
                  return node.search(text);
               }
            }
            return false;
         }
         return count > 0;
      }
      
      add(text) {
         let length = prefix.length;
         
         if(length < text.length) {
            let key = text[length];
            let node = nodes[key];
         
            if(node == null){
               let prefix = text.substring(0, length+1);
               node = nodes[key] = new Node(prefix);
            } 
            node.add(text);            
         } else {
            count++;
         }
      }
   }
}