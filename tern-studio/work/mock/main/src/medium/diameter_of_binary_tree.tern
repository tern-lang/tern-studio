

let tree = compileTestTree();

assert diameterOfBinaryTree(tree) == 3;

func diameterOfBinaryTree(tree) {
   let leftDepth = depthOfTree(tree.left, 0);
   let rightDepth = depthOfTree(tree.right, 0);
   
   return leftDepth + rightDepth;
}

func depthOfTree(tree, depth) {
   if(tree) {
      let leftDepth = depthOfTree(tree.left, depth+1);
      let rightDepth = depthOfTree(tree.right, depth+1);
      
      return Math.max(leftDepth, rightDepth);
   }
   return depth;
}

/*
          1
         / \
        2   3
       / \     
      4   5    
*/
func compileTestTree() {
   let tree = TreeNode(1);
   
   tree.left = TreeNode(2);
   tree.right = TreeNode(3);
   tree.left.left = TreeNode(4);
   tree.left.right = TreeNode(5);

   return tree;
}

class TreeNode{
   let left: TreeNode;
   let right: TreeNode;
   let val;
   
   new(val) {
      this.val = val;
   }
   
   override toString() {
      return "${val}";
   }
}