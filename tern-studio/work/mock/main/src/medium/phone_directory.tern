

let directory = new PhoneDirectory(3);

assert directory.get() == 0;
assert directory.get() == 1;
assert directory.check(2) == true;
assert directory.get() == 2;
assert directory.release(2) == true;
assert directory.check(2) == true;
assert directory.get() == 2;

class PhoneDirectory {

   const free: Queue<Integer>;
   const allocated: Set<Integer>;
   const max;
   
   new(max) {
      this.free = new LinkedList<Integer>();
      this.allocated = new HashSet<Integer>();
      this.max = max;
   }
   

   public get() {
      if(!free.isEmpty()) {
         let value = free.poll();
         allocated.add(value);
         return value;
      } else {
         let next = allocated.size();
         
         if(next < max) {
            allocated.add(next);
            return next;
         }
         return -1;
      }
   }
   
   public check(number) {
      return !allocated.contains(number);
   }
   
   public release(number){
      if(allocated.remove(number)) {
         free.offer(number);
         return true;
      }
      return false;
   }
}