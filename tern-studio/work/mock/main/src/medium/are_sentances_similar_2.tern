
assert areSentencesSimilar(
   ["an","extraordinary","meal"],
   ["one","good","dinner"],
   [["great","good"],["extraordinary","good"],["well","good"],["wonderful","good"],["excellent","good"],["fine","good"],["nice","good"],["any","one"],["some","one"],["unique","one"],["the","one"],["an","one"],["single","one"],["a","one"],["truck","car"],["wagon","car"],["automobile","car"],["auto","car"],["vehicle","car"],["entertain","have"],["drink","have"],["eat","have"],["take","have"],["fruits","meal"],["brunch","meal"],["breakfast","meal"],["food","meal"],["dinner","meal"],["super","meal"],["lunch","meal"],["possess","own"],["keep","own"],["have","own"],["extremely","very"],["actually","very"],["really","very"],["super","very"]]);

assert areSentencesSimilar(
   ["great", "acting", "skills"], 
   ["fine", "drama", "talent"],
   [["great", "fine"], ["acting","drama"], ["skills","talent"]]);

func areSentencesSimilar(words1, words2, pairs) {
   if(words1.length == words2.length) {
      let nodes = {:};
      
      for(pair in pairs) {
         let node1 = nodes.computeIfAbsent(pair[0], (_) -> Node(pair[0]));
         let node2 = nodes.computeIfAbsent(pair[1], (_) -> Node(pair[1]));      
         
         node1.add(node2);
         node2.add(node1);
         node1.add(node1);
         node2.add(node2);
      }
      for(let i = 0; i < words1.length; i++) {
         let word1 = words1[i];
         let word2 = words2[i];
         
         if(word1 != word2) {
            if(!isWordSimilar(nodes, word1, word2)) {
               return false;
            }
         }
      }
      return true;
   }
   return false;
}


func isWordSimilar(nodes, word1, word2) {
   let queue = LinkedList();
   let root = nodes[word1];
   let done = {};
   
   queue.offer(root);
   
   while(!queue.isEmpty()) {
      let next = queue.poll();
      
      for(node in next.nodes) {
         if(node.word == word2) {
            return true;
         }
         if(done.add(node)) {
            queue.offer(node);
         }
      }
   }
   return false;
}

class Node {
   let nodes: Set<Node>;
   let word;
   
   new(word) {
      this.nodes = {};
      this.word = word;
   }
   
   add(node) {
      nodes.add(node);
   }
}