// https://www.youtube.com/watch?v=GazC3A4OQTE

let graph = createGraph();
let path = findPath(graph, 'e');

println(path);

func findPath(graph: Node, dest: String) {
   let queue = PriorityQueue();
   let start = Path().traverse(graph);
   
   queue.offer(start);
   
   while(!queue.isEmpty()) {
      let next = queue.poll();
      
      for(child in next.node().nodes) {
         let path = next.traverse(child.key);
         
         if(path.matches(dest)) {
            return path;
         }
         //println(path);
         queue.offer(path);
      }
   }
   return null;
}

class Node {

   let nodes: Map<Node, Integer> = {:};
   let name;
   
   new(name){
      this.name = name;
   }
   
   add(n: Node, s: Integer) {
      nodes.put(n, s);
   }
   
   override toString() {
      return "${name}";
   }
}

class Path with Comparable {

   let nodes: List<Node> = [];
   let score = 0;
   
   node() {
      if(nodes.length > 0) {
         return nodes.get(nodes.length-1);
      }
      return null;
   }
   
   matches(name){
      if(nodes.length > 0) {
         return nodes.get(nodes.length-1).name == name;
      }
      return false;
   }
   
   traverse(node: Node): Path {
      let next = Path();
      
      if(nodes.length > 0) {
         let last = nodes.get(nodes.length -1);
         
         if(!last.nodes.containsKey(node)) {
            throw new IllegalArgumentException("No path from ${last} to ${node}");
         }
         let cost = last.nodes.get(node);
         
         next.nodes.addAll(nodes);
         next.score = score + cost;
      }
      next.nodes.add(node);
      return next;
   }
   
   override compareTo(p: Path) {
      return Integer.compare(score, p.score);
   }
   
   override toString() {
      return "${nodes}";
   }
}

func createGraph() {
   let s = Node('s');
   let a = Node('a');
   let b = Node('b');
   let c = Node('c');
   let d = Node('d');
   let e = Node('e');
   let f = Node('f');
   let g = Node('g');
   let h = Node('h');
   let i = Node('i');
   let j = Node('j');
   let k = Node('k');
   let l = Node('l');
   
   s.add(a, 7);
   s.add(c, 3);
   s.add(b, 2);
   
   a.add(b, 3);
   a.add(d, 4);
   
   b.add(s, 2);
   b.add(d, 4);
   b.add(a, 3);
   b.add(h, 1);
   
   c.add(l, 2);
   c.add(s, 3);
   
   d.add(b, 4);
   d.add(a, 4);
   d.add(f, 5);
   
   e.add(k, 5);
   e.add(g, 2);
   
   f.add(h, 3);
   f.add(d, 5);
   
   g.add(h, 2);
   g.add(e, 2);
   
   h.add(b, 1);
   h.add(f, 3);
   h.add(g, 2);
   
   i.add(j, 5);
   i.add(k, 4);
   i.add(l, 4);
   i.add(j, 6);
   
   j.add(l, 4);
   j.add(k, 4);
   j.add(i, 6);
   
   k.add(j, 4);
   k.add(i, 4);
   k.add(e, 5);
   
   return s;
}