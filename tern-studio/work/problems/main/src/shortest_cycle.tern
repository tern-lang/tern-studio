// https://www.careercup.com/question?id=5767478026698752

import util.concurrent.LinkedBlockingQueue;

let graph = [
   [1], // 0
   [2,3], // 1
   [4,5,6], // 2
   [0], // 3
   [],
   [],
   [0]
];

let path = shortestCycle(graph, 2);
println(path);

class Path {
   let nodes;
   
   new(start) {
      this.nodes = [start];
   }
}

func shortestCycle(graph, n) {   
   let q = LinkedBlockingQueue();      
   let count = 0;
   let paths = {:};
   
   for(i in 0 to graph.length - 1) {
      paths[i.intValue] = Path(i.intValue);
   }
   q.offer(paths[n]);
   println(graph[n]);
   
   loop {
      let path = q.poll();
      let children = graph[path.nodes[path.nodes.length -1]]; // where do we go from here
      
      for(c in children) {
         let child = paths[c];

         if(path.nodes.contains(c)) {
            path.nodes.add(c);
            return path.nodes; 
         }
         path.nodes.add(c);
         q.offer(child);
      }
      
   }
}
