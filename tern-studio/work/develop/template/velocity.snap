
import org.snapscript.develop.http.resource.StackTraceError;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.snapscript.develop.http.resource.FileResolver;

class VelocityConverter {

   const model;

   new(model: TemplateModel) {
      this.model = model;
   }

   convert(value) {
      var transform = transform(value);

      if (transform != null) {
         return transform.transform(value);
      }
      return value;
   }

   transform(value): Transform {
      if (value instanceof Date) {
         return new DateTransform();
      }
      if (value instanceof Throwable) {
         return new ExceptionTransform();
      }
      return null;
   }

   trait Transform {
      transform(value);
   }

   class DateTransform with Transform {

     override transform(date: Date) {
         var format = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");

         if (date != null) {
            return format.format(date);
         }
         return null;
      }
   }

   class ExceptionTransform with Transform {

      override transform(cause: Throwable): StackTraceError{
         var error = new StackTraceError();

         if (cause != null) {
            error.setCause(cause);
            return error;
         }
         return null;
      }
   }
}

class VelocityTemplateEngine with TemplateEngine {

   const engine;
   const finder;

   new(engine: VelocityEngine, resolver: FileResolver, prefix: String, suffix: String) {
      this.finder = new TemplateFinder(resolver, prefix, suffix);
      this.engine = engine;
   }

   override renderTemplate(model: TemplateModel, path: String) {
      var reader = finder.findReader(path);

      if (reader != null) {
         var converter = new VelocityConverter(model);
         var internal = new VelocityContext();         
         var writer = new StringWriter();

         try {
            var attributes = model.getAttributes();
            var keys = attributes.keySet();

            for (var key in keys) {
               var value = attributes.get(key);

               value = converter.convert(value);
               internal.put(key, value);
            }            
            engine.evaluate(internal, writer, path, reader);
         } finally {
            reader.close();
         }
         return writer.toString();
      }
      return null;
   }

   override validTemplate(path: String) {
      var file = finder.findPath(path);

      if (file != null) {
         return true;
      }
      return false;
   }
}

