
trait Template {
   render(filter: TemplateFilter, writer: Writer);
}

trait TemplateEngine {  
   renderTemplate(model: TemplateModel, template: String);
   validTemplate(template: String);
}

trait TemplateFilter {
   process(name: String);
}

class TemplateFinder {

   const resolver;
   const suffix;
   const prefix;

   new(resolver: FileResolver, prefix: String) : 
      this(resolver, prefix, null){}
   
   new(resolver: FileResolver, prefix: String, suffix: String) {
      this.resolver = resolver;
      this.suffix = suffix;
      this.prefix = prefix;
   }
   
   findReader(path: String): Reader {
      var stream = findStream(path);
      
      if(stream != null) {
         return new InputStreamReader(stream, "UTF-8");
      }
      return null;
   } 
   
   findStream(path: String): InputStream {
      var realPath = findPath(path);

      if (realPath != null) {
         return resolver.resolveStream(realPath);
      }
      return null;
   }  

   findPath(path: String): String {
      var searchPath = searchPath(path);

      for(var realPath in searchPath) {
         var source = resolver.resolveStream(realPath);
         
         if(source != null) {
            return realPath;
         }
      }
      return null;
   }

   searchPath(path: String): [] {
      if (suffix != null) {
         if (!path.endsWith(suffix)) {
            path = path + suffix;
         }
      }
      if (prefix != null) {
         var original = path;
         
         if (path.startsWith("/")) {
            path = path.substring(1);
         }         
         if (!path.startsWith(prefix)) {
            path = prefix + path;
         }
         return [path, original];
      }
      return [path];
   }
}

class TemplateModel {
   
   const attributes;
   
   new(): this({:}) {}
   
   new(attributes: {:}) {
      this.attributes = attributes;
   }
   
   setAttribute(name: String, value) {
      attributes.put(name, value);
   }
   
   getAttributes(): {:} {
      return attributes;
   }
   
   getAttribute(name: String) {
      return attributes.get(name);
   }
}

class TemplateResult {
   
   const model;
   const template;
   
   new(template: String): 
      this(template, {:}) {}
   
   new(template: String, values: {:}) {
      this.model = new TemplateModel(values);
      this.template = template;
   }
   
   getTemplate(): String {
      return template;
   }
   
   getModel(): TemplateModel {
      return model;
   }
}