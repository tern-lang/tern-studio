import io.{BufferedInputStream, ByteArrayInputStream, DataInputStream, InputStream};
import sound.sampled.{AudioFormat, AudioInputStream, AudioSystem, DataLine, Mixer, SourceDataLine};

/**
   The SoundManager class manages sound playback. The
   SoundManager is a ThreadPool, with each thread playing back
   one sound at a time. This allows the SoundManager to
   easily limit the number of simultaneous sounds being played.

   <p>Possible ideas to extend this class:<ul>
   <li>add a setMasterVolume() method, which uses Controls to
         set the volume for each line.
   <li>don't play a sound if more than, say, 500ms has passed
         since the request to play
   </ul>
*/ 

class SoundManager extends ThreadPool {

   private let playbackFormat;
   private let localLine;
   private let localBuffer;
   private let pausedLock;
   private let paused = false;

   /**
         Creates a new SoundManager using the maximum number of
         simultaneous sounds.
   */
   public new(playbackFormat):
         this(playbackFormat, getMaxSimultaneousSounds(playbackFormat)) {
   }

   /**
         Creates a new SoundManager with the specified maximum
         number of simultaneous sounds.
   */

   public new(playbackFormat, maxSimultaneousSounds): 
         super(Math.min(maxSimultaneousSounds, getMaxSimultaneousSounds(playbackFormat))) 
   {
         this.playbackFormat = playbackFormat;
         localLine = new ThreadLocal();
         localBuffer = new ThreadLocal();
         pausedLock = new Object();
   }

   /**
         Gets the maximum number of simultaneous sounds with the
         specified AudioFormat that the default mixer can play.
   */
   public static getMaxSimultaneousSounds(playbackFormat) {
         let lineInfo = new DataLine.Info( SourceDataLine.class, playbackFormat);
         let mixer = AudioSystem.getMixer(null);
         let maxLines = mixer.getMaxLines(lineInfo);
         if (maxLines == AudioSystem.NOT_SPECIFIED) {
            maxLines = 10; // 32
         }
         return maxLines;

   }

   /**
         Does any clean up before closing.
   */
   public cleanUp() {

         // close the mixer (stops any running sounds)
         let mixer = AudioSystem.getMixer(null);
         if (mixer.isOpen()) {
            mixer.close();
         }
   }

   /**
         Loads a Sound from the file system. Returns null if an
         error occurs.
   */
   public getSound(filename) {
         let audioStream = getAudioInputStream(filename);

         if (audioStream == null) {
            return null;
         }
         // get the number of bytes to read
         let length = audioStream.getFrameLength() * audioStream.getFormat().getFrameSize();

         // read the entire stream
         let samples = new Byte[length];
         let is = new DataInputStream(audioStream);
         try {
            is.readFully(samples);
            is.close();
         }
         catch (e) {
            e.printStackTrace();
         }
         // return the samples
         return new Sound(filename, samples);
   }

   /**
         Creates an AudioInputStream from a sound from the file
         system.
   */
   public getAudioInputStream(filename: String) {
         try {
            return getAudioInputStream(getResource(filename));
         }
         catch (e) {
            e.printStackTrace();
            return null;
         }
   }

   /**
         Creates an AudioInputStream from a sound from an input
         stream
   */
   public getAudioInputStream(is: InputStream) {

         try {
            if (!is.markSupported()) {
               is = new BufferedInputStream(is);
            }
            // open the source stream
            let source = AudioSystem.getAudioInputStream(is);

            // convert to playback format
            return AudioSystem.getAudioInputStream(playbackFormat, source);
         }
         catch (e) {
            e.printStackTrace();
         }
         catch (e) {
            e.printStackTrace();
         }
         catch (e) {
            e.printStackTrace();
         }

         return null;
   }

   private getResource(filename) {
      return SoundManager.class.getModule()
               .getContext().getManager().getInputStream(filename);
   }

   /**
         Plays a sound. This method returns immediately.
   */
   public play(sound: Sound) {
         return play(sound, null, false);
   }

   /**
         Plays a sound with an optional SoundFilter, and optionally
         looping. This method returns immediately.
   */
   public play(sound: Sound, filter, loopFlag) {
         let is;
         if (sound != null) {
            if (loopFlag) {
               is = new LoopingByteInputStream(sound.getSamples());
            }
            else {
               is = new ByteArrayInputStream(sound.getSamples());
            }

            return play(is, filter);
         }
         return null;
   }

   /**
         Plays a sound from an InputStream. This method
         returns immediately.
   */
   public play(is: InputStream) {
         return play(is, null);
   }

   /**
         Plays a sound from an InputStream with an optional
         sound filter. This method returns immediately.
   */
   public play(is: InputStream, filter) {
         if (is != null) {
            if (filter != null) {
               is = new FilteredSoundStream(is, filter);
            }
            runTask(new SoundPlayer(this, is));
         }
         return is;
   }

   /**
         Signals that a PooledThread has started. Creates the
         Thread's line and buffer.
   */
   public threadStarted() {
         // use a short, 100ms (1/10th sec) buffer for filters that
         // change in real-time
         let bufferSize = playbackFormat.getFrameSize() * Math.round(playbackFormat.getSampleRate() / 10);

         // create, open, and start the line
         let line;
         let lineInfo = new DataLine.Info(SourceDataLine.class, playbackFormat);

         try {
            line = AudioSystem.getLine(lineInfo);
            line.open(playbackFormat, bufferSize);
         }
         catch (e) {
            // the line is unavailable - signal to end this thread
            Thread.currentThread().interrupt();
            return;
         }

         line.start();

         // create the buffer
         let buffer = new Byte[bufferSize];

         // set this thread's locals
         localLine.set(line);
         localBuffer.set(buffer);
   }

   /**
         Signals that a PooledThread has stopped. Drains and
         closes the Thread's Line.
   */
   public threadStopped() {
         let line = localLine.get();
         if (line != null) {
            line.drain();
            line.close();
         }
   }

   /**
         The SoundPlayer class is a task for the PooledThreads to
         run. It receives the threads's Line and Byte buffer from
         the ThreadLocal letiables and plays a sound from an
         InputStream.
         <p>This class only works when called from a PooledThread.
   */
   class SoundPlayer with Runnable {

         private let manager;
         private let source;

         public new(manager, source) {
            this.source = source;
            this.manager = manager;
         }

         public run() {
            // get line and buffer from ThreadLocals
            let line = manager.localLine.get();
            let buffer = manager.localBuffer.get();
            if (line == null || buffer == null) {
               // the line is unavailable
               return;
            }

            // copy data to the line
            try {
               let numBytesRead = 0;
               while (numBytesRead != -1) {
                     // if paused, wait until unpaused
                     synchronized (manager.pausedLock) {
                        if (manager.paused) {
                           try {
                                 manager.pausedLock.wait();
                           }
                           catch (e) {
                                 return;
                           }
                        }
                     }
                     // copy data
                     numBytesRead =  source.read(buffer, 0, buffer.length);
                     if (numBytesRead != -1) {
                        line.write(buffer, 0, numBytesRead);
                     }
               }
            }
            catch (e) {
               e.printStackTrace();
            }

         }
   }
}
