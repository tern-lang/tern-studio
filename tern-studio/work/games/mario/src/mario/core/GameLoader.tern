import awt.Image;
import awt.Toolkit;
import awt.image.BufferedImage;
import io.File;
import io.IOException;
import util.ArrayList;
import util.Scanner;

import imageio.ImageIO;

import mario.core.sound.specific.MarioSoundManager22050Hz;
import mario.core.tile.GameTile;
import mario.core.tile.TileMap;
import mario.objects.creatures.{ Coin, Goomba, Platform, RedKoopa, RedShell };
import mario.objects.tiles.{ QuestionBlock, RotatingBlock, SlopedTile};
import mario.util.SpriteMap;
import mario.util.ImageManipulator;


class GameLoader {
   
   private let plain;
   private let plainTiles;
   
   private let sloped_image;
   private let grass_edge;
   private let grass_center;
   
   public new() {
       
      plain = new ArrayList();
      plainTiles = new SpriteMap("/mario/tiles/Plain_Tiles.png", 6, 17).getSprites();
      
      for (let bImage in plainTiles) {
         plain.add(bImage);
      }
      
      sloped_image = loadImage("/mario/items/Sloped_Tile.png");
      grass_edge = loadImage("/mario/items/Grass_Edge.png");
      grass_center = loadImage("/mario/items/Grass_Center.png");
   }
   
   public loadImage(filename) {
      return ImageManipulator.loadImage(filename);
   }
   
   public loadResource(filename) {
      return GameLoader.class.getModule().getContext().getManager().getInputStream(filename);
   }
   
   // BufferedImage -> Image
   public static toImage(bufferedImage) {
       return Toolkit.getDefaultToolkit().createImage(bufferedImage.getSource());
   }

   // loads a tile map, given a map to load..
    // use this to load the background and foreground. Note: the status of the tiles (ie collide etc)
    // is irrelevant. Why? I don't check collision on maps other than the main map. 
    public loadOtherMaps(filename)  {
      // lines is a list of strings, each element is a row of the map
      let lines = new ArrayList();
      let width = 0;
      let height = 0;
      
      // read in each line of the map into lines
      let reader = new Scanner(loadResource(filename));
      while(reader.hasNextLine()) {
         let line = reader.nextLine();
         if(!line.startsWith("#")) {
            lines.add(line);
            width = Math.max(width, line.length());
         }
      }
      height = lines.size(); // number of elements in lines is the height
      
      let newMap = new TileMap(width, height);
      for (let y=0; y < height; y++) {
         let line = lines.get(y);
         for (let x=0; x < line.length(); x++) {
            let ch = line.charAt(x);
            
            if (ch == 'n') {
               newMap.setTile(x, y, plain.get(92));
            } else if (ch == 'm') {
               newMap.setTile(x, y, plain.get(93));
            } else if (ch == 'v') {
               newMap.setTile(x, y, plain.get(90));
            } else if (ch == 'b') {
               newMap.setTile(x, y, plain.get(91));
            } else if (ch == 'q') { // rock left
               newMap.setTile(x, y, plain.get(48));
            } else if (ch == 'w') { // rock right
               newMap.setTile(x, y, plain.get(49));
            } 
         }
      }
      return newMap;   
   }
       
    // Use this to load the main map
   public loadMap(filename, soundManager)  {
      // lines is a list of strings, each element is a row of the map
      let lines = new ArrayList();
      let width = 0;
      let height = 0;
      
      // read in each line of the map into lines
      let reader = new Scanner(loadResource(filename));
      while(reader.hasNextLine()) {
         let line = reader.nextLine();
         if(!line.startsWith("#")) {
            lines.add(line);
            width = Math.max(width, line.length());
         }
      }
      height = lines.size(); // number of elements in lines is the height
      
      let newMap = new TileMap(width, height);
      for (let y=0; y < height; y++) {
         let line = lines.get(y);
         for (let x=0; x < line.length(); x++) {
            let ch = line.charAt(x);

            let pixelX = GameRenderer.tilesToPixels(x);
            let pixelY = GameRenderer.tilesToPixels(y);
            // enumerate the possible tiles...
            if (ch == 'G') {
               newMap.creatures().add(new Goomba(pixelX, pixelY, soundManager));
            } else if (ch == 'K') {
               newMap.creatures().add(new RedKoopa(pixelX, pixelY, soundManager));
            } else if (ch == 'V') {
               let t = new GameTile(pixelX, pixelY, plain.get(56));
               newMap.setTile(x, y, t);
            } else if (ch == 'R') {
               let r = new RotatingBlock(pixelX, pixelY);
               newMap.setTile(x, y, r);
               newMap.animatedTiles().add(r);
            } else if (ch == '3') {
               let t = new GameTile(pixelX, pixelY, plain.get(4));
               newMap.setTile(x, y, t);
            } else if (ch == '4') {
               let t = new GameTile(pixelX, pixelY, plain.get(10));
               newMap.setTile(x, y, t);
            } else if (ch == '2') {
               let t = new GameTile(pixelX, pixelY, plain.get(86));
               newMap.setTile(x, y, t);
            } else if (ch == 'Q') {
               let q = new QuestionBlock(pixelX, pixelY, newMap, soundManager, true, false);
               newMap.setTile(x, y, q);
               newMap.animatedTiles().add(q);
            } else if (ch == 'W') {
               let q = new QuestionBlock(pixelX, pixelY, newMap, soundManager, false, true);
               newMap.setTile(x, y, q);
               newMap.animatedTiles().add(q);
            } else if (ch == 'S') {
               newMap.creatures().add(new RedShell(pixelX, pixelY, newMap, soundManager, true));
            } else if(ch == 'C') {
               newMap.creatures().add(new Coin(pixelX, pixelY));
            } else if(ch == 'P') {
               let p = new Platform(pixelX, pixelY);
               newMap.creatures().add(p);
            } else if(ch == '9') {
               let t = new SlopedTile(pixelX, pixelY, sloped_image, true);
               newMap.setTile(x, y, t);
               newMap.slopedTiles().add(t);
            } else if(ch == '8') {
               let t = new GameTile(pixelX, pixelY, grass_edge);
               newMap.setTile(x, y, t);
            } else if(ch == '7') {
               let t = new GameTile(pixelX, pixelY, grass_center);
               newMap.setTile(x, y, t);
            }
         }
      }
      return newMap;   
   }

}

