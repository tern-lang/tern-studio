import awt.Point;
import awt.event.KeyEvent;
import awt.image.BufferedImage;
import util.ArrayList;
import util.LinkedList;
import util.List;

import sound.sampled.AudioFormat;

import mario.core.GameRenderer;
import mario.core.animation.Animation;
import mario.core.animation.CollidableObject;
import mario.core.sound.specific.MarioSoundManager10512Hz;
import mario.core.sound.specific.MarioSoundManager22050Hz;
import mario.core.tile.GameTile;
import mario.core.tile.TileMap;
import mario.objects.base.Collision;
import mario.objects.base.Creature;
import mario.objects.creatures.{ Coin, Goomba, Mushroom, Platform, RedKoopa, RedShell, Score};
import mario.util.ImageManipulator;





/**
 * Mario is the main object in the game and is the center of the screen and attention at all
 * time. As a result, he is also the most complicated object in terms of animation, collision detection,
 * user input etc. 
 */

class Mario extends CollidableObject{
   
   /* Static Constant Fields.
    * Gravity:   Effects the amount of pull objects feel toward the ground. pixels/ms
    * Friction:  Effects the amount of sliding an object displays before coming to a stop.
    * S_X:       Starting X position of Mario.
    * S_Y:       Starting Y position of Mario.
    * S_DY:      Starting Dy of Mario.
    * S_JH:      Effects the height of Mario's first jump.
    * Anim_Time time between each of Mario's Animations. 
    * 
    * Terminal_Walking_Dx:  Max speed when Mario is walking.
    * Terminal_R3unning_Dx:  Max speed when Mario is running.
    * Terminal_Fall_Dy:     Max speed Mario can fall at.
    * Walking_Dx_Inc:       The increase in speed per update when walking until terminal runnning is reached.
    * Running_Dx_Inc:       The increase in speed per update when running until terminal walking is reached.
    * Start_Run_Anim_Thres speed where mario switches to the running animation.
    */

   public static const GRAVITY = 0.0008f;
   public static const FRICTION = 0.0004f;                   
   private static const STARTING_X = 25;
   private static const STARTING_Y = 140;
   private static const STARTING_DY = 0.03f;
   private static const INITIAL_JUMP_HEIGHT = -0.34f; 
   private static const JUMP_MULTIPLIER = 0.46f;
   private static const TERMINAL_WALKING_DX = 0.10f;
   private static const WALKING_DX_INC = 0.01f;
   private static const TERMINAL_RUNNING_DX = 0.21f;
   private static const START_RUN_ANIM_THRESHOLD = 0.2f;
   private static const RUNNING_DX_INC = 0.001f;
   private static const TERMINAL_FALL_DY = 0.22f;
   private static const STARTING_LIFE = 1;
   private static const ANIM_TIME = 125;
   
   /* INITIAL_JUMP_HEIGHT + dx*JUMP_MULTIPLIER */
   private var jumpHeight; 
   
   /* Boolean variables used to identify which keys are pressed. */
   private var isDownHeld = false;
   private var isRightHeld = false;
   private var isLeftHeld = false;
   private var isShiftHeld = false;
   private var isSpaceHeld = false;
   /* Boolean variables used to identify where Mario is with respect to Platforms. */
   private var isRightOfPlatform = false; 
   private var isLeftOfPlatform = false;
   private var isBelowPlatform = false;
   private var isAbovePlatform = false;
   /* Boolean variables used to identify where Mario is with respect to Slopes. */
   private var isUpSlope= false;
   private var isDownSlope = false;
   private var onSlopedTile = false;
   /* Boolean variables used to identify the state of Mario. */
   private var isJumping = false;
   private var frictionLock = false; 
   private var isInvisible = false;
   
   /* Animation variables. */
   private var walkLeft; 
   private var runLeft;  
   private var stillLeft; 
   private var jumpLeft; 
   private var crouchLeft; 
   private var changeLeft; 
   private var currLeftAnim; 
   private var walkRight; 
   private var runRight; 
   private var stillRight; 
   private var jumpRight; 
   private var crouchRight; 
   private var changeRight; 
   private var currRightAnim; 
   
   private var health = 0;
   private var grace = 0;
   private var platform;
   private var soundManager2;
   
   public new(soundManager): super(STARTING_X, STARTING_Y, soundManager) {
      
      setIsJumping(true);
      dy = STARTING_DY;
      jumpHeight = INITIAL_JUMP_HEIGHT;
      health = STARTING_LIFE;
      soundManager2 = new MarioSoundManager10512Hz(new AudioFormat(10512, 8, 1, true, true));
      
      var l = [ ImageManipulator.loadImage("/mario/mario/Mario_Big_Left_Still.png"), ImageManipulator.loadImage("/mario/mario/Mario_Big_Left_1.png"),
            ImageManipulator.loadImage("/mario/mario/Mario_Big_Left_2.png"), ImageManipulator.loadImage("/mario/mario/Mario_Big_Left_Run_1.png"),
            ImageManipulator.loadImage("/mario/mario/Mario_Big_Left_Run_2.png"), ImageManipulator.loadImage("/mario/mario/Mario_Big_Crouch_Left.png"),
            ImageManipulator.loadImage("/mario/mario/Mario_Big_Jump_Left.png"), ImageManipulator.loadImage("/mario/mario/Mario_Big_Change_Direction_Left.png") ];
      
      var r = [ null, null, null, null, null, null, null, null ];
      for(var i = 0; i < l.length; i++) {
         r[i] = ImageManipulator.horizontalFlip(l[i]); // Flip every image in l.
      }
            
      // Create left animations.
       stillLeft = new Animation(ANIM_TIME).addFrame(l[0]);
      walkLeft = new Animation(ANIM_TIME).addFrame(l[1]).addFrame(l[2]);
      runLeft = new Animation(ANIM_TIME - 30).addFrame(l[3]).addFrame(l[4]);
      crouchLeft = new Animation(ANIM_TIME).addFrame(l[5]);
      jumpLeft = new Animation(ANIM_TIME).addFrame(l[6]);
      changeLeft = new Animation(ANIM_TIME).addFrame(l[7]);
      
      // Create right animations.
      stillRight = new Animation(ANIM_TIME).addFrame(r[0]);
      walkRight = new Animation(ANIM_TIME).addFrame(r[1]).addFrame(r[2]);
      runRight = new Animation(ANIM_TIME - 30).addFrame(r[3]).addFrame(r[4]);
      crouchRight = new Animation(ANIM_TIME).addFrame(r[5]);
      jumpRight = new Animation(ANIM_TIME).addFrame(r[6]);
      changeRight = new Animation(ANIM_TIME).addFrame(r[7]);
      
      setAnimation(stillRight);
      currLeftAnim = walkLeft;
      currRightAnim = walkRight;
   }
   
   public getHealth() {
      return health;
   }
   
   public isInvisible() {
      return isInvisible;
   }
   
   public isOnSlopedTile() { return onSlopedTile; }

   public setIsJumping(isJumping) { this.isJumping = isJumping; }

   public isJumping() { return isJumping; }
   
   private slowSpeed(slowFactor) { setdX(getdX()/slowFactor);   }
   
   private accelerateFall() { setdY(-getdY()/4); }
   
   public isAbovePlatform() { return isAbovePlatform; }
   
   /**
    * Debugging method used to print the status of mario with regards to platforms.
    */
   private platformStatus() {
      
      if(isAbovePlatform) { System.out.println("Above a platform"); }
      if(isBelowPlatform) { System.out.println("Below a platform"); }
      if(isLeftOfPlatform) { System.out.println("Left of a platform"); }
      if(isRightOfPlatform) { System.out.println("Right of a platform"); }
   }
   
   /**
    * Fixes Y movement on tiles and platforms where animation height changes by setting the mario's y
    * value to the difference between animation heights. 
    */
   public setAnimation(newAnim) {
      if(currentAnimation() != null) {
         var currAnim = currentAnimation();
         var oldHeight = currAnim.getHeight();
         var newHeight = newAnim.getHeight();
         if(newHeight > oldHeight) {
            setY(getY() - (newHeight - oldHeight));   
         } else if(oldHeight > newHeight) {
            setY(getY() + oldHeight - newHeight);
         }
      }
      super.setAnimation(newAnim);
   }
   
   /**
    * Given the Float parameter oldX, oldY, newX, and newY this method returns the first 
    * Platform in the TileMap map in which the sprite with the given parameters collides with
    * in the X direction, if any. 
    * 
    * Note to self: the exact conditions for a collision are a little fuzzy....document this...
    * 
    * @modifies isLeftOfPlatform && isRightOfPlatform
    * @return the Platform the sprite with the given parameters is colliding with in the X
    * direction.
    */
   private getPlatformCollisionX(map, oldX, oldY, newX, newY) {
      
      for(var platform in map.platforms()) {
          var width = getWidth();
         var height = getHeight();
          var pX = platform.getX();
          var pY = platform.getY();
          var oldpX = platform.getOldX();
          var pWidth = platform.getWidth();
          var pHeight = platform.getHeight();
          
          if(oldX + width <= oldpX && // This is needed to make transparant platforms work
             !platform.canJumpThrough() &&
             newX + width >= pX && newX + width <= pX + pWidth &&
             pY + pHeight > oldY && pY < oldY + height
             ) {
             this.isLeftOfPlatform = true;
             this.isRightOfPlatform = false;
             return platform;
          } else if (
             oldX >= oldpX + pWidth && // This is needed to make transparant platforms work
             !platform.canJumpThrough() &&
             newX <= pX + pWidth && newX >= pX &&
             pY + pHeight > oldY && pY < oldY + height
             ) {
             this.isRightOfPlatform = true;
             this.isLeftOfPlatform = false;
             return platform;
          }
       }
       this.isRightOfPlatform = false;
       this.isLeftOfPlatform = false;
       return null;
   }
   
   /**
    * Given the Float parameter oldX, oldY, newX, and newY this method returns the first 
    * Platform in the TileMap map in which the sprite with the given parameters collides with
    * in the Y direction, if any. 
    * 
    * Note to self: the exact conditions for a collision are a little fuzzy....document this...
    * Vertically moving platforms aren't compatible with tiles, so don't use them in conjunction.
    * 
    * @modifies isLeftOfPlatform && isRightOfPlatform
    * @return the Platform the sprite with the given parameters is colliding with in the X
    * direction.
    */
   private getPlatformCollisionY(map, oldX, oldY, newX, newY) {
      for(var platform in map.platforms()) {
          var width = getWidth();
          var height = getHeight();
          var pX = platform.getX();
          var pY = platform.getY();
          var oldpY = platform.getOldY();
          var pWidth = platform.getWidth();
          var pHeight = platform.getHeight(); 
          
          // some debug code:
          // System.out.println((oldY + height) + " >= " + (pY));
          // System.out.println(oldY + height);
          // System.out.println((newY + height) + " <= " + (pY));
          // System.out.println((newY + height) + " <= " + (pY + pHeight));
          
          if(//oldY + height <= pY && // This line makes vertical platforms buggy.
             newY + height >= pY &&
             newY + height <= pY + pHeight &&
             oldX + width >= pX &&
             oldX <= pX + pWidth &&
             oldY + height <= oldpY) { 
             this.isAbovePlatform = true;
             this.isBelowPlatform = false;
             return platform;
          } else if(!platform.canJumpThrough()) {
             if (oldY >= oldpY + pHeight && 
                newY <= pY + pHeight &&
                newY >= pY &&
                 oldX + width >= pX &&
                 oldX <= pX + pWidth) {
                    this.isBelowPlatform = true;
                    this.isAbovePlatform = false;
                    return platform;
                 }
          }
       }
       this.isBelowPlatform = false;
       this.isAbovePlatform = false;
       return null;
   }
   
   public update(map, time) {
      
      jumpHeight = INITIAL_JUMP_HEIGHT - Math.abs(dx)*JUMP_MULTIPLIER; 
      
      if (!frictionLock && isLeftHeld && !isShiftHeld) {
         //toggleMovement(1);
         if (dx < -TERMINAL_WALKING_DX) {
            dx = dx + WALKING_DX_INC;
         } else if (dx > -TERMINAL_WALKING_DX) {
            dx = dx - WALKING_DX_INC;
         }
      } else if (!frictionLock && isRightHeld && !isShiftHeld) {
         //toggleMovement(1);
         if (dx > TERMINAL_WALKING_DX) {
            dx = dx - WALKING_DX_INC;
         } else if(dx < TERMINAL_WALKING_DX) {
            dx = dx + WALKING_DX_INC;
         }
      } else if (isLeftHeld && isShiftHeld && !frictionLock) {
         if (dx > -TERMINAL_WALKING_DX) {
            dx = dx - WALKING_DX_INC;
         } else if (dx > -TERMINAL_RUNNING_DX) {
            if (dx < -START_RUN_ANIM_THRESHOLD) {
               toggleMovement(2);
            }
            dx -= RUNNING_DX_INC;
         }
      } else if (isRightHeld && isShiftHeld && !frictionLock) {
         if (dx < TERMINAL_WALKING_DX) {
            dx = dx + WALKING_DX_INC;
         }
         if (dx < TERMINAL_RUNNING_DX) {
            if (dx > START_RUN_ANIM_THRESHOLD) {
               toggleMovement(2);
            }
            dx += RUNNING_DX_INC;
         }
      } else {
         toggleMovement(1);
         if (dx != 0) {
            frictionLock = true;
            if (dx > -0.05f && dx < 0.05f) {
               dx = 0;
               frictionLock = false;
            } else if (dx > 0.005f) {
               dx = dx - FRICTION * time;
            } else if (dx < -0.005f) {
               dx = dx + FRICTION * time;
            }
         }
      }
   
      var lastFour = grace%8 == 7 || grace%8 == 6 || grace%8 == 5 || grace%8 == 4;
      isInvisible = lastFour ? true : false;
      if(grace != 0) { grace--; }
      
      // Apply gravity.
      if(getdY() < TERMINAL_FALL_DY) { setdY(getdY() + GRAVITY * time); } 
      
      // Slowly reset offset values caused by slopes.
      if(getOffsetX() != 0) { setOffsetX(getOffsetX() - 1);} 

      // Calculate the new X position.
      var oldX = getX();
      var newXCalc = oldX + getdX()*time;
      if(platform != null) { newXCalc += platform.getdX() * time; } 
      // Calculate the new Y position.
      var oldY = getY();
      var newYCalc = oldY + getdY()*time;
      //if(platform != null) { newYCalc = platform.getY() - getHeight(); }
      
      // Calculate all the tile collisions.
      var xTile = GameRenderer.getTileCollisionAll(map, this, getX(), getY(), newXCalc, getY());
      var yTile = GameRenderer.getTileCollisionAll(map, this, getX(), getY(), getX(), newYCalc); 
      var numOfXTiles = xTile.size();
      var numOfYTiles = yTile.size();

      var platformX = getPlatformCollisionX(map, oldX, oldY, newXCalc, newYCalc);
      var platformY = getPlatformCollisionY(map, oldX, oldY, newXCalc, newYCalc);
      
      //this.platformStatus();
      
      if(isAbovePlatform) {
         platform = platformY;
      } else {
         platform = null;
      }
      
      // Manage collision in the X direction.
      if(oldX < 0) { // Collision with left side of map.
         setX(GameRenderer.tilesToPixels(0));
         slowSpeed(20);
      } else if(oldX > GameRenderer.tilesToPixels(map.getWidth()) - 21) { // Collision with right side of map.
         setX(GameRenderer.tilesToPixels(map.getWidth()) - 21);
         slowSpeed(20);
      } else {
         if(numOfXTiles == 0) { // No tile collision in the X direction
            setX(newXCalc);
         } else if(numOfXTiles >= 1) { // Tile collision in the X direction. For now, only worry
                                // about the first tile being collided with.
            
            var xtp = xTile.get(0); // xTilePoint
            var c = Creature.tileCollisionX(map.getTile(xtp.x, xtp.y), this);
            toggleMovement(1);
            frictionLock = false;
            if(c == Collision.EAST) { // Left of a tile.
               setX(GameRenderer.tilesToPixels(xtp.x) - getWidth());
            } else if(c == Collision.WEST) { // Right of a tile.
               setX(GameRenderer.tilesToPixels(xtp.x + 1));
            }
            if(!isAbovePlatform) { setdX(0); } // Stop movement only if mario isn't on a Platform
                                       // Why do this? If I don't mario gets frozen to tiles
                                       // he X collides with while on a platform.
         }
         // Platform collision in X direction.
         if (platformX != null) { 
            slowSpeed(2);
            if(isLeftOfPlatform) {
               setX(platformX.getX() - getWidth() - 1);
            } else if(isRightOfPlatform) {
               setX(platformX.getX() + platformX.getWidth() + 1);
            }
         } 
      }
      
      super.update(time); // Update mario's animation.
      
      // Manage collision in the Y direction. 
      var upperCollision = false; // will check if mario is above a tile
      if(oldY > GameRenderer.tilesToPixels(map.getHeight()) - getHeight()) { // Off the bottom of the map.
         System.out.println("Mario has died.");
      } else { // No Y collision, allow Y position to update uninterrupted.
         if(numOfYTiles == 0) {
            setY(newYCalc);
            setIsJumping(true);
            jump();
         } else if(numOfYTiles >= 1) { // Y collision detected with a tile 
            var ytp = yTile.get(0); // yTilePoint
            var c = Creature.tileCollisionY(map.getTile(ytp.x, ytp.y), this);
            fixJumping();
            if(c == Collision.NORTH) { // Downward collision with tile.
               upperCollision = true;
               setIsJumping(false);
               setY(GameRenderer.tilesToPixels(ytp.y) - getHeight()); 
            } else if (c == Collision.SOUTH) { // Upward collision with tile.
               for(var p in yTile) {
                  var tile = map.getTile(p.x, p.y);
                  if(tile != null) { tile.doAction(); }
               }
               setY(GameRenderer.tilesToPixels(ytp.y + 1));
               soundManager.playBump();
               accelerateFall(); 
            }
         }
         // Platform collision in Y direction.
         if (platformY != null && !upperCollision) { 
            fixJumping();
            if(isAbovePlatform) { // Downward collision with platform.
               setIsJumping(false);
               setY(platformY.getY() - getHeight());
            } else if (isBelowPlatform) { // Upward collision with platform.
               soundManager.playBump();
               setY(platformY.getY() + platformY.getHeight() + 1);
               accelerateFall(); 
            }
         }
      }
   }

   // called from within marioUpdate() when mario hits a block while moving up.
   public marioToTileToBaddieCollide(tile) {
      var toRemove = new LinkedList();
      for(var c in tile.collidingCreatures()) {
         if(c instanceof Goomba || c instanceof RedKoopa || c instanceof RedShell) {
            c.flip();
            toRemove.add(c);
            soundManager.playKick();
         }  
      }
      for(var c in toRemove) { tile.collidingCreatures().remove(c); }
   }   
   
   // Determines what happens when mario collides with a creature.
   public playerCollision(map, creature) {
      
      // only check collision of creatures with this that are not sleeping, are on the screen, and are collidable
      if(!creature.isPlatform() && creature.isCollidable()) { 
         var collision = isCollision(this, creature);
         if(collision && creature !instanceof Score) {
         
            if(creature instanceof Coin) {
               creature.kill();
               soundManager.playCoin();
               map.creaturesToAdd().add(new Score(Math.round(creature.getX()), Math.round(creature.getY()+13)));
               
            } else if(creature instanceof Mushroom) {
               soundManager2.playCelebrate();
               creature.kill();
               if(health == 3) {
               soundManager.playBonusPoints();
               map.creaturesToAdd().add(new Score(Math.round(creature.getX()), Math.round(creature.getY()+13)));
               } else {
                  soundManager.playHealthUp();
                  health++;
               }   
            } else if(creature instanceof Goomba && isJumping() && getdY() > 0) {
               creature.jumpedOn(); // kill goomba
               this.creatureHop();
               soundManager.playKick();
               
            } else if(creature instanceof RedKoopa && isJumping() && getdY() > 0) {
               creature.jumpedOn();
               creatureHop();
               soundManager.playKick();
               map.creaturesToAdd().add(new RedShell(Math.round(creature.getX()), 
                     Math.round(creature.getY()+13), map, soundManager, true));
            } else if(creature instanceof RedShell) {
               
               if(this.isJumping() && this.getdY() > 0) {
                  creature.jumpedOn(this.getdX() > 0, this.getdX());
                  creatureHop();
                  soundManager.playKick();   
                  
               } else if(!isJumping() && !creature.isMoving()) {
                  var right = this.getdX() > 0;
                  creature.jumpedOn(right, this.getdX());
                  soundManager.playKick();
                  // offset to ainstant death, needed for sure
                  if(right) {
                     setX(this.getX() - 3);
                  } else {
                     setX(this.getX() + 3);
                  }
               } else if(!isJumping()){
                  getsDamaged();
               }
            } else {
               getsDamaged();
            }
         }
      }
   }
   
   public getsDamaged() {
      if(grace == 0) {
         health--;
         if(health <= 0) {
            if(health == 0) {
               soundManager2.playHurt();
               soundManager.playHealthDown();
            }
            System.out.println("Mario Dies");
         } else {
            soundManager2.playHurt();
            soundManager.playHealthDown();
            grace = 80;
         }
      }
   }

   public creatureHop() {
      isJumping = true;
      setY(y -5); // fix offset
      if(!isShiftHeld) {
         setdY(jumpHeight/2f); // jump
      } else {
         setdY(jumpHeight/1.4f);
      }
   }
   
   public toggleMovement(type) {

      if(type == 1) {
         currLeftAnim = walkLeft;
         currRightAnim = walkRight;
      }
      if(type == 2) {
         currLeftAnim = runLeft;
         currRightAnim = runRight;
      }
      if(type == 3) {
         currLeftAnim = stillLeft;
         currRightAnim = stillRight;
      }
   }

   public fixJumping() {
      if(!isRightHeld && !isLeftHeld) {
         if(currentAnimation() == jumpLeft) {
            setAnimation(stillLeft);
         }
         if(currentAnimation() == jumpRight) {
            setAnimation(stillRight);
         }
      } else {
         if(!this.frictionLock) {
            if(isRightHeld) {
               setAnimation(currRightAnim);
            } else if (isLeftHeld) {
               setAnimation(currLeftAnim);
            }
         } else {
            //System.out.println("Do I ever get here");
            if(isRightHeld) {
               setAnimation(changeLeft);
            } else if (isLeftHeld) {
               setAnimation(changeRight);
            }
         }
      }
   }
   
   public jump() {
      setIsJumping(true);
       if(currentAnimation() == currLeftAnim || currentAnimation() == stillLeft || currentAnimation() == changeRight) {
          setAnimation(jumpLeft);
       }
       if(currentAnimation() == currRightAnim || currentAnimation() == stillRight || currentAnimation() == changeLeft) {
          setAnimation(jumpRight);
       }
   }

    public keyPressed(e) {
        var key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
          isLeftHeld = true;
          if(!isDownHeld) {
             setAnimation(currLeftAnim);
          }
        }

        if(key == KeyEvent.VK_RIGHT) {
          isRightHeld = true;
          if(!isDownHeld) {
             setAnimation(currRightAnim);
          }
        }
        
        if(key == KeyEvent.VK_SHIFT) {
           this.isShiftHeld = true;
        }
      
        
        if(key == KeyEvent.VK_DOWN) {
           isDownHeld = true;
           if(currentAnimation() == currLeftAnim || currentAnimation() == stillLeft || currentAnimation() == crouchLeft) {
              setAnimation(crouchLeft);
           }
           if(currentAnimation() == currRightAnim || currentAnimation() == stillRight || currentAnimation() == crouchRight) {
              setAnimation(crouchRight);
           }
        }
        
        if(key == KeyEvent.VK_SPACE) {   
           if(!isJumping && !isSpaceHeld) {
              isSpaceHeld = true;
              soundManager.playJump();
              isJumping = true;
              dy = jumpHeight;
           }
        }

    }
    
    public keyReleased(e) {
        var key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
           isLeftHeld = false;
           if(!isJumping) {
              setAnimation(stillLeft);
           }
           
        }

        if(key == KeyEvent.VK_RIGHT) {
           isRightHeld = false;
           if(!isJumping) {
              setAnimation(stillRight);
           }
        }
        
        if(key == KeyEvent.VK_SHIFT) {
           this.isShiftHeld = false;
        }
        
        // responsible for jumps of different heights
        if(key == KeyEvent.VK_SPACE) {
           isSpaceHeld = false;
           dy = this.getdY()/2.5f;
        }

        if(key == KeyEvent.VK_DOWN) {
           isDownHeld = false;
           if (currentAnimation() == crouchLeft || currentAnimation() == currLeftAnim || currentAnimation() == changeLeft) {
              setAnimation(stillLeft);
           } 
           if (currentAnimation() == crouchRight || currentAnimation() == currRightAnim || currentAnimation() == changeRight) {
              setAnimation(stillRight);
           }
        }
    }
}

