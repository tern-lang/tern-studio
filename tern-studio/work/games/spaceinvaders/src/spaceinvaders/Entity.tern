
import awt.Rectangle;

/**
 * An entity represents any element that appears in the game. The
 * entity is responsible for resolving collisions and movement
 * based on a set of properties defined either by subclass or externally.
 * 
 * Note that doubles are used for positions. This may seem strange
 * given that pixels locations are integers. However, using double means
 * that an entity can move a partial pixel. It doesn't of course mean that
 * they will be display half way through a pixel but allows us not lose
 * accuracy as we move.
 */
class Entity {
   /** The current x location of this entity */ 
   var x = 0.0;
   /** The current y location of this entity */
   var y = 0.0;
   /** The sprite that represents this entity */
   var sprite = null;
   /** The current speed of this entity horizontally (pixels/sec) */
   var dx = 0.0;
   /** The current speed of this entity vertically (pixels/sec) */
   var dy = 0.0;
   /** The rectangle used for this entity during collisions  resolution */
   var me = new Rectangle();
   /** The rectangle used for other entities during collision resolution */
   var him = new Rectangle();
   
   /**
    * Construct a entity based on a sprite image and a location.
    * 
    * @param ref The reference to the image to be displayed for this entity
     * @param x The initial x location of this entity
    * @param y The initial y location of this entity
    */
   new(ref, x, y) {
      this.sprite = SpriteStore.getSprite(ref);
      this.x = x;
      this.y = y;
   }
   
   /**
    * Request that this entity move itself based on a certain ammount
    * of time passing.
    * 
    * @param delta The ammount of time that has passed in milliseconds
    */
   move(delta) {
      // update the location of the entity based on move speeds
      x += (delta * dx) / 1000;
      y += (delta * dy) / 1000;
   }
   
   /**
    * Set the horizontal speed of this entity
    * 
    * @param dx The horizontal speed of this entity (pixels/sec)
    */
   setHorizontalMovement(dx) {
      this.dx = dx;
   }

   /**
    * Set the vertical speed of this entity
    * 
    * @param dx The vertical speed of this entity (pixels/sec)
    */
    setVerticalMovement(dy) {
      this.dy = dy;
   }
   
   /**
    * Get the horizontal speed of this entity
    * 
    * @return The horizontal speed of this entity (pixels/sec)
    */
   getHorizontalMovement() {
      return dx;
   }

   /**
    * Get the vertical speed of this entity
    * 
    * @return The vertical speed of this entity (pixels/sec)
    */
   getVerticalMovement() {
      return dy;
   }
   
   /**
    * Draw this entity to the graphics context provided
    * 
    * @param g The graphics context on which to draw
    */
   draw(g) {
      sprite.value.draw(g, x, y);
   }
   
   /**
    * Do the logic associated with this entity. This method
    * will be called periodically based on game events
    */
   doLogic() {
   }
   
   /**
    * Get the x location of this entity
    * 
    * @return The x location of this entity
    */
   getX() {
      return x;
   }

   /**
    * Get the y location of this entity
    * 
    * @return The y location of this entity
    */
   getY() {
      return y;
   }
   
   /**
    * Check if this entity collised with another.
    * 
    * @param other The other entity to check collision against
    * @return True if the entities collide with each other
    */
   collidesWith(other) {
      me.setBounds(x,y,sprite.value.getWidth(),sprite.value.getHeight());
      him.setBounds(other.x,other.y,other.sprite.value.getWidth(),other.sprite.value.getHeight());

      return me.intersects(him);
   }
   
   /**
    * Notification that this entity collided with another.
    * 
    * @param other The entity with which this entity collided.
    */
   collidedWith(other){}
}
