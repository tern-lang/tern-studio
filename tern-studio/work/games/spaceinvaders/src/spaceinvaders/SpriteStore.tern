
import awt.GraphicsEnvironment;
import awt.Transparency;
import imageio.ImageIO;

/**
 * A resource manager for sprites in the game. Its often quite important
 * how and where you get your game resources from. In most cases
 * it makes sense to have a central resource loader that goes away, gets
 * your resources and caches them for future use.
 */
module SpriteStore {
   
   /** The cached sprite map, from reference to sprite instance */
   var sprites = {:};

   /**
    * Retrieve a sprite from the store
    * 
    * @param ref The reference to the image to use for the sprite
    * @return A sprite instance containing an accelerate image of the request reference
    */
   async getSprite(ref): Promise<Sprite> {
      // if we've already got the sprite in the cache
      // then just return the existing version
      if (sprites.get(ref) != null) {
         return sprites.get(ref);
      }
      
      // otherwise, go away and grab the sprite from the resource
      // loader
      let sourceImage = null;
      
      try {
         // The Module.getResource() ensures we get the sprite
         // from the appropriate place, this helps with deploying the game
         // from a remote server. You could equally do a file look
         // up here.
         let stream = SpriteStore.getResource(ref);
         
         if (stream == null) {
            fail("Can't find ref: "+ref);
         }
         
         // use ImageIO to read the image in
         sourceImage = await ImageIO.read(stream);
      } catch (e) {
         fail("Failed to load: "+ref);
      }
      
      // create an accelerated image of the right size to store our sprite in
      let gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
      let image = gc.createCompatibleImage(sourceImage.getWidth(),sourceImage.getHeight(),Transparency.BITMASK);
      
      // draw our source image into the accelerated image
      await image.getGraphics().drawImage(sourceImage,0,0,null);
      
      // create a sprite, add it the cache then return it
      let sprite = new Sprite(image);
      sprites.put(ref,sprite);
      
      return sprite;
   }
   
   /**
    * Utility method to handle resource loading failure
    * 
    * @param message The message to display on failure
    */
   fail(message) {
      // we're pretty dramatic here, if a resource isn't available
      // we dump the message and exit the game
      System.err.println(message);
      System.exit(0);
   }
}
