import test.TestCase;

/*
   default void forEachRemaining(Consumer<? super E> action) {
      Objects.requireNonNull(action);
      while (hasNext())
         action.accept(next());
   }
*/
class Iter with Iterator{
   var list;
   var pos;
   new(list){
      this.list = list;
      this.pos = 0;
   }
   override hasNext(){
      //println("hasNext()");
      if(list.length > pos){
         return true;
      }
      return false;
   }
   override next(){
      //println("next()");
      if(list.length > pos){
         return list[pos++];
      }
      throw "No more elements";
   }
}

class DefaultMethodTest with TestCase {

   testDefaultMethod(){
      const iter1 = new Iter([1,2,3,4,5,6,7]);
      const iter2 = new Iter([1,2,3,4,5,6,7]);
      const iter3 = [1,2,3,4,5,6,7].iterator();
      const collect = [];
      
      iter1.forEachRemaining(item -> println(item));
      iter2.forEachRemaining(item -> collect.add(item));
      iter3.forEachRemaining(item -> println(item));
      
      for(var item in collect){
         println("'${item}'");
      }
      assert collect[0] == 1;
      assert collect[1] == 2;
      assert collect[2] == 3;
      assert collect[3] == 4;
      assert collect[4] == 5;
      assert collect[5] == 6;
      assert collect[6] == 7;   
   }
}
