import test.TestCase;

class Table {

   const map;
   new(){
      this.map ={:};
   }
   create(key, cells){
      var r: Row = new StringRow(key,cells);
      map.put(key,r);
   }
   dump(){
      for(var entry in map){
         entry.value.dump();
      }
   }
   get(key){
      return map.get(key);
   }

   trait Row{
      dump();
      get(index);
   }
   
   class StringRow with Row {
      const key;
      const cells;
      new(key, cells){
         this.key = key;
         this.cells = cells;
      }
      get(index){
         return cells[index];
      }
      dump(){
         for(var cell in cells){
            print("[${cell}]");
         }
         println();
      }
   }
}

class InnerClassTest with TestCase {

   testInnerClass() {
      var table = new Table();
      table.create("a", [1,2,3,4,5]);
      table.create("b", ['a','b','c','d']);
      table.create("c", ['X','Y','Z']);
      table.dump();
      
      assert table.get("a") instanceof Table.Row;
      assert table.get("a") instanceof Table.StringRow;
      assert table.get("b") instanceof Table.Row;
      assert table.get("b") instanceof Table.StringRow;
      assert table.get("c") instanceof Table.Row;
      assert table.get("c") instanceof Table.StringRow;
      
      assert table.get("a").get(0) == 1;
      assert table.get("a").get(1) == 2;
      assert table.get("a").get(2) == 3;
      assert table.get("a").get(3) == 4;
      assert table.get("a").get(4) == 5;
      
   }
}