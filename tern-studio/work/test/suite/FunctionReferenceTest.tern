import util.stream.Collectors;
import test.TestCase;

class Foo {

   var x,y;
   new(x,y){
      this.x=x;
      this.y=y;
   }

   f(a){
      return "func(${a}):${x},${y}";
   }
   
   f(a,b){
      return "func(${a},${b}):${x},${y}";
   }
   
   f(a,b,c){
      return "func(${a},${b},${c}):${x},${y}";
   }
}

module Mod {

   blah(a){
      return "blah(${a})";
   }
   
   blah(a,b){
      return "blah(${a},${b})";
   }
}

module Calc{
   sub(x,y){
      return x-y;
   }
   mul(x,y){
      return x*y;
   }
   mul(x,y,z){
      return x*y*z;
   }
}

class FunctionReferenceTest with TestCase {

   testStreamsWithFunctionReference(){
      var l = ["true", "false", "true", "false", "false"];
      var f = Boolean::parseBoolean;
      
      assert l[0] == 'true';
      assert l[1] == 'false';
      assert l[2] == 'true';
      assert l[3] == 'false';
      assert l[4] == 'false';   
         
      var s = l.stream()
               .map(f)
               .collect(Collectors.toList());
              
      println(s);         
          
      assert s[0] == true;
      assert s[1] == false;
      assert s[2] == true;
      assert s[3] == false;
      assert s[4] == false;  
   }
   
   testMixAndMatchFunctions() {
      var f = [
         (x,y)->x+y,
         (x,y,z)->x+y+z,
         Calc::sub,
         Calc::mul
      ];
      assert 3 == f[0](1,2);
      assert 6 == f[1](1,2,3);
      assert 1 == f[2](3,2);
      assert 4 == f[3](2,2);
      assert 8 == f[3](2,2,2);
   
      var p = System.err::println;
   
      assert p("hello") == null;
   }
   
   
   testFunctionalInterface() {
      var set = new TreeSet(Double::compare);
      var list = [];
      
      set.add(2);
      set.add(1);
      set.add(3);
      
      for(var entry in set){
         list.add(entry);
      }
      println(list);
      
      assert list[0] == 1;
      assert list[1] == 2;
      assert list[2] == 3;
   }
   
   testErrorFunctionReference() {
      var fail = false;
      var str = "hello";
      var foo = new Foo(22,3);
      var func1 = foo::duh;
      var func2 = str::duh;
      
      try {
         func1(11);   
      } catch(e){
         e.printStackTrace();
         fail = true;
      }
      assert fail;
      fail = false;
      
      try {
         func2(11);   
      } catch(e){
         e.printStackTrace();
         fail = true;
      }
      assert fail;
   }
   
   
   testModuleFunctionReference(){
      const blah = Mod::blah;
      
      println(blah(1));
      println(blah(1,3));
      
      assert blah(1) == "blah(1)";
      assert blah(1,3) == "blah(1,3)";
   }
   
   
   testNativeFunctionReference(){
      const str = "hello";
      const substring = str::substring;
      
      println(substring(1));
      println(substring(1,3));
      
      assert substring(1) == "ello";
      assert substring(1,3) == "el";
   }
   
   testFunctionReference(){
      const foo = new Foo(22,3);
      const f = foo::f;
      
      println(f(1));
      println(f(1,2));
      println(f(1,2,3));
      
      assert f(1) == "func(1):22,3";
      assert f(1,2) == "func(1,2):22,3";
      assert f(1,2,3) == "func(1,2,3):22,3";   
   }
   
}
