import test.TestCase;

class Foo {
   const x,y;
   new(x,y){
      this.x=x;
      this.y=y;
   }
   override toString(){
      "Foo(${x},${y})";
   }
}


module DependencyInjection{
   
   create(type, name, args){
      var context = DependencyInjection.getContext();
      var manager = DependencyInjection.getManager();
      var loader = context.getLoader();
      
      manager.addImport(type, name); // import <type> as <name>
      return create(name, args);
   }
   
   create(name, args){
      var expr = "new ${name}(";
   
      for(var i = 0; i < args.length;i++){
         if(i > 0){
            expr+= ",";
         }
         expr += args[i];
      }
      expr += ")";
      return eval(expr); // new <name>(<args>)
   }
}

class DynamicTypeLoadTest with TestCase {

   testDynamicLoad() {
      var t = Foo.class;
      var package = Foo.class.getModule();
      var context = package.getContext();
      var loader = context.getLoader();
      var data = package.getManager().addImport(package.getName() +"." + t.getName(), "O");
      var constructor = eval("O::new");
      var instance = constructor(1,2);
      
      assert instance.x == 1;
      assert instance.y == 2;
      assert constructor(13,32).toString() == "Foo(13,32)";
      assert constructor(13,32).x == 13;
      assert constructor(13,32).y == 32;  
   }
   
   testDynamicLoadExpression() {
      var t = Foo.class;
      var package = Foo.class.getModule();
      var context = package.getContext();
      var loader = context.getLoader();
      var data = package.getManager().addImport(package.getName() +"." + t.getName(), "X");
   
      assert eval("new X(13,32)").toString() == "Foo(13,32)";
      assert eval("new X(13,32)").x == 13;
      assert eval("new X(13,32)").y == 32;  
   }
   
   testDynamicLoadInjection() {
      var args = [12,33];
      var t = Foo.class;
      var package = Foo.class.getModule();
      var name = package.getName() +"." + t.getName();
      
      assert DependencyInjection.create(name, "Y", args).toString() == "Foo(12,33)";
      assert DependencyInjection.create(name, "Y", args).x == 12;
      assert DependencyInjection.create(name, "Y", args).y == 33;
   }
}
