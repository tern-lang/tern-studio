import test.TestCase;

class Base {
   static const BASE='BASE';
   trait Trait{
      static const CONSTANT='BLAH';
      foo(x,y);
   }
}

class Next extends Base {
   
   @SomeAnnotation(a: 1, b: 2)
   class Blah with Trait{
      override foo(x,y){
         return "${Trait.CONSTANT} ${Base.BASE} x=${x} y=${y}";
      }
   }
   
   create() :Trait{
      return new Blah();
   }
}
class X with Base.Trait {
   override foo(x,y){
      return "X=${x} Y=${y}";
   }
}

class InnerClassInheritanceTest with TestCase {

   testInheritInnerClass(){
      var n = new Next();
      var t = n.create();
      var x = new X();
      
      var f1 = t.foo(1,2);
      var f2 = x.foo(31,22);
      
      println(f1);
      println(f2);
        
      assert x instanceof Base.Trait;
      assert t instanceof Base.Trait;
      assert f1 == "BLAH BASE x=1 y=2";
      assert f2 == "X=31 Y=22";
   }
}
