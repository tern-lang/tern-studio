import test.TestCase;

class Base with Runnable {
   static const BLAH = new Base(11);
   var x;
   var a;
   new(x){
      println("Base.new(${x})");
      this.a="a="+x;
      this.x=x;
   }
   run(){}
   dump(){
      println("Base.dump(): x=${x} a=${a}");
      // XXX TypeExtractor should not consider getHandle() it should be getType()
      // XXX the VariableResolver needs to be getType
      return fun(); // here Handle.getHandle() is wrong
   }
   fun() {
      println("Base.fun(): x=${x}");
   }
   static get(){
      return BLAH;
   }
}
class Nuh extends Base {
   static const DEFAULT_SIZE=1;
   static const INSTANCE = new Nuh(44);
   var b;
   new(a): super(DEFAULT_SIZE){
      this.b=a;
      println("Nuh.new(${a})");
   }
   dump(){
      super.dump();
   }
   fun() {
      return "Nuh.fun(): a=${a} b=${b} x=${x}";
   }
   iterate(){
      for(var i in 0..5){
         fun();
      }
      for(var i in 0..5){
         dump();
      }
   }
   static get(){
      return INSTANCE;
   }
}

class SuperScopeTest with TestCase {

   testSuperScope(){
      var g = Nuh.get().fun();
      var x = Nuh.get().dump();
      println("RESULT: "+g);
      println("RESULT: "+x);
      assert g == "Nuh.fun(): a=a=1 b=44 x=1";
      assert x == "Nuh.fun(): a=a=1 b=44 x=1";
   }
}
