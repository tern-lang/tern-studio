import security.SecureRandom;
import test.TestCase;

class Counter with Comparable{
   var x=0;
   const id;
   new(id){
      this.id=id;
   }
   get(): Integer{
      return x;
   }
   override compareTo(other){
      return Integer.compare(x, other.x);
   }
   override toString(){
      return "${x}";
   }
}

class ArrayOfObjectsTest with TestCase {

   testArrayCounter() {
      var arr = new Counter[20];
      for(var i in 0..19){
         arr[i]=new Counter("Counter-${i}");
      }
      for(var i in 0..19){
         for(var j in 0..99){
            arr[i].x+=j;
         }
      }
      for(var c in arr){
         println("${c.id}=${c.x}");
      }
      arr.forEach(c -> {
         assert c.x == 4950;
      });
      assert 20 == arr.length;
   }
   
   testArraySort(){
      var arr = new Counter[10];
      var random = new SecureRandom();
      var set = new TreeSet();
      for(var i in 0..9){
         arr[i] = new Counter("Counter-${i}");
         arr[i].x = random.nextInt();
      }
      for(var i in 0..9){
         println("${arr[i].x}");
      }
      for(var i in 0..9){
         set.add(arr[i]);
      }
      //Arrays.sort(arr[i], (a, b)->a.compareTo(b));
      println(set);
   }
}
