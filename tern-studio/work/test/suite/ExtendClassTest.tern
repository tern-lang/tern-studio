import test.TestCase;

class ExtendClassLoader extends URLClassLoader {

   const sequence = [];
   const list;

   new(list: URL[]) : super(list) {
      this.list = list;
   }
   
   override loadClass(name: String, resolve: Boolean): Class {
      sequence.add("ExtendClassLoader::loadClass");
      println("ExtendClassLoader::loadClass(${name}, ${resolve})");
      (this as ExtendExtendClassLoader).dump();
      return super.loadClass(name, resolve);
   }
}

class ExtendExtendClassLoader extends ExtendClassLoader {

   new(list: URL[]): super(list) {
   }
   
   override loadClass(name: String, resolve: Boolean): Class {
      sequence.add("ExtendExtendClassLoader::loadClass");
      println("ExtendExtendClassLoader::loadClass(${name}, ${resolve})");
      return super.loadClass(name, resolve);
   }
   
   dump() {
      sequence.add("ExtendExtendClassLoader::dump");
      println("ExtendExtendClassLoader::dump");
   }
}

class ExtendOutputStream extends FilterOutputStream {
   new(out):super(out){
      println("${out}");
   }
   getOutputStream() {
      return out;
   }
}


class BufferStream extends OutputStream {

   const buffer: ByteArrayOutputStream;
      
   new() {
      this.buffer = new ByteArrayOutputStream();
   }

   override write(octet: Integer){
      write([octet]);
   }
   
   override write(array: Byte[], off: Integer, size: Integer) {
      buffer.write(array, off, size);     
   }
   
   override flush() { 
      buffer.flush();
   }  

   override close() {
      buffer.close();    
   }
   
   override toString() {
      return buffer.toString();
   }
}

class ExtendClassTest with TestCase {

   testBufferStream() {
      var buffer = new BufferStream();
      
      buffer.write('hello world'.getBytes());
      buffer.write(10);
      buffer.write('next'.getBytes());
      
      var text = buffer.toString();
      
      println(text);
      
      assert text == 'hello world\nnext';
   }

   testClassExtension() {
      var loader = new ExtendExtendClassLoader([]);
      var type = loader.loadClass("java.lang.String");
      
      assert type == String.class.type;
      assert loader.list.length == 0;
      assert loader.sequence[0] == "ExtendExtendClassLoader::loadClass";
      assert loader.sequence[1] == "ExtendClassLoader::loadClass";
      assert loader.sequence[2] == "ExtendExtendClassLoader::dump";
   }
   
   testFieldsInExtendedClass() {
      var buffer = new ByteArrayOutputStream();
      var stream = new ExtendOutputStream(buffer);
      var printer = new PrintStream(stream);
      
      assert buffer == stream.getOutputStream();
      
      printer.print("foo");
      printer.close();
      
      assert "foo" == buffer.toString();
   }
}