import io.File;
import util.Collections;
import util.List;
import util.regex.Pattern;

class TestCaseCollector {

   const RECURSIVE_PATTERN = "_RECURSIVE_PATTERN_";
   const SINGLE_PATTERN = "_SINGLE_PATTERN_";
   
   var directory;
   
   new(directory) {
      this.directory = directory;
   }
   
   scan(pattern): [] {
      var file = new File(directory, pattern);
      
      if(pattern.contains("*")) {
         var index = pattern.indexOf("*");
         var expression = pattern.trim();
         
         if(index != -1) {
            var parent = pattern.substring(0, index);
            var directory = new File(directory, parent);
            
            if(directory.exists()) {
               expression = expression.replace("**", RECURSIVE_PATTERN); // convert \** to \.*
               expression = expression.replace("*", SINGLE_PATTERN); // convert \* to file regex
               
               var path = new File(directory, expression);

               expression = path.getCanonicalPath(); // remove ../ and ./
               
               while(expression.contains("\\\\")) { // ensure \\ does not exist
                  expression = expression.replace("\\\\", "\\");
               }
               while(expression.contains("//")) { // ensure // does not exist
                  expression = expression.replace("//", "/");
               }
               expression = expression.replace("\\", "\\\\"); // escape \
               expression = expression.replace(".", "\\."); // escape .
               expression = expression.replace("(", "\\("); // escape (
               expression = expression.replace(")", "\\)"); // escape )
               expression = expression.replace("-", "\\-"); // escape -
               expression = expression.replace("$", "\\$"); // escape $
               expression = expression.replace(RECURSIVE_PATTERN, ".*");
               expression = expression.replace(SINGLE_PATTERN, "[a-zA-Z0-9_\\$\\-\\(\\)\\.\\s]+");
               
               var regex = Pattern.compile(expression);
               var list = scan(regex, directory);
               var base = directory.toURI();
               var result = [];
               
               for(var entry in list) {
                  var relative = base.relativize(entry.toURI).getPath();
                  result.add(relative);
               }
               Collections.sort(result);
               return result;
            }
         }
      }
      if(file.exists()) {
         var base = directory.toURI();
         var relative = base.relativize(file.toURI).getPath();
         
         return [relative];
      }
      return [];
   }
   
   static relative(file, directory) {
      return directory.toURI().relativize(file.toURI).getPath();
   }
   
   static scan(pattern, directory): [] {
      var files = [];
      
      if(directory.exists()) {
         var list = directory.listFiles();
         var normal = directory.getCanonicalPath();
         var matcher = pattern.matcher(normal);
         
         if(matcher.matches()) {
            files.add(directory);
         } else {
            for(var entry in list) {
               normal = entry.getCanonicalPath();
               matcher = pattern.matcher(normal);
               
               if(matcher.matches()) {
                  if(entry.exists() && entry.isFile()) {
                     files.add(entry);
                  }
               }
               if(entry.isDirectory()) {
                  var matches = scan(pattern, entry);
                  
                  if(!matches.isEmpty()) {
                     files.addAll(matches);
                  }
               }
            }
         }
      }
      return files;
   }
}