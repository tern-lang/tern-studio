import util.stream.Collectors;
import compile.verify.VerifyException;

trait TestCase {
	
   runTests(){
      try {
   	   const methods = findTests();
   	   
   	   for(var method in methods) {
	         setUp();
        	   println("TEST: ${class.name}.${method}");
        	   eval("${method}()");
        	   tearDown();
   	   }
         return methods;
      }catch(e: VerifyException){  
         for(var error in e.errors){
            println(error.description);
            error.cause.printStackTrace();
         }
      }catch(e){
         e.printStackTrace();
         throw e;
      }
      return [];
   }
   
   findTests() {
	   return this.class.getFunctions()
         .stream()
         .filter(method -> acceptTest(method) && !ignoreTest(method))
         .map(method -> method.name)
         .collect(Collectors.toList());
   }
   
   acceptTest(method) {
      return method.name.startsWith("test") || !method.getAnnotations()
         .stream()
         .filter(annotation -> annotation.name.equals("Test"))
         .collect(Collectors.toList())
         .isEmpty(); // implicit return
   }
    
   ignoreTest(method) {
      return !method.getAnnotations()
         .stream()
         .filter(annotation -> annotation.name.equals("Ignore"))
         .collect(Collectors.toList())
         .isEmpty(); // implicit return
   }
   
   setUp(){}
   tearDown(){}
}
