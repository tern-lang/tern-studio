
let a = Line(Point(0, 0), Point(10, 10));
let b = Line(Point(0, 5), Point(5, 0));
let c = a.intersect(b);

println(c);

class Line {
   const a;
   const b;
   
   new(a, b) {
      this.a = a;
      this.b = b;
   }
   
   distance() {
      return Math.sqrt(Math.pow(a.x - b.x, 2) +  
             Math.pow(a.y - b.y, 2) * 1.0); 
   }
   
   slope() {
      let m = b.y-a.y / b.x-a.x;  
      let c = b.y - (m*b.x);
      
      return Slope(m, c);
   }
   
   intersect(line) {
      let s1 = slope();
      let s2 = line.slope();
      let x = (s2.c - s1.c) / (s1.m - s2.m);
      let y = s1.m * x + s1.c;
      
      return Point(x, y);
   }
   
   class Slope {
      const m;
      const c;
      
      new(m, c) {
         this.m = m;
         this.c = c;
      }
   }
}

class Point {
   const x;
   const y;
   
   new(x, y) {
      this.x = x;
      this.y = y;
   }
   
   override toString(){
      return "${x},${y}";
   }
}

class Triangle {
   const a;
   const b;
   const c;
   
   new(a, b, c) {
      this.a = a;
      this.b = b;
      this.c = c;
   }
   
   area(){
      let area = (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2.0f;
      return Math.abs(area);
   }
   
   contains(x, y) {
      let p = Point(x, y);
      return contains(p);
   }
   
   contains(p) {
      return area() >= 
         Triangle(a, b, p).area() +
         Triangle(a, c, p).area() +
         Triangle(b, c, p).area();
   }
}
