
const source = [
   ["horse", "ros"],
   ["abc", "def"],
   ["geeks", "geek"],
   ["peaks", "geeks"],
   ["umbrella", "cabbage"]
];

for(row in source) {
   const result = minDistance(row[0], row[1]);
   println(row + ": " + result);
}

func minDistance(source, dest) {
   let queue = PriorityQueue((a, b) -> Integer.compare(a.score, b.score));
   let score = scoreDistance(source, dest);
   let start = EditNode(source, score, 0);
   let done = {};
   
   done.add(source);
   queue.offer(start);
   
   while(!queue.isEmpty()) {
      let edit = queue.poll();
      let children = calculateEdits(edit.text, dest, edit.count);
      
      for(child in children) {
         if(done.add(child.text)) {
            if(child.text.equals(dest)) {
               return child.count;
            } else {
               queue.offer(child);
            }
         }
      }
   }
   return -1;
}

class EditNode {
   const score;
   const text;
   const count;
   
   new(text,score, count) {
      this.text = text;
      this.count = count;
      this.score = score;
   }
}

func calculateEdits(source, dest, count) {
   let list = [];
   
   for(i in 0 to source.length - 1) {
      for(j in 0 to dest.length -1) {
         if(source[i] != dest[j]) {
            let next = replaceChar(source, i, dest[j]);
            let score = scoreDistance(next, dest);
            let edit = EditNode(next, score, count+1);
            
            list.add(edit);
         }
      }
   }
   if(source.length > dest.length) {
      for(i in 0 to source.length - 1) {
         let next = deleteChar(source, i);
         let score = scoreDistance(next, dest);
         let edit = EditNode(next, score, count+1);
            
         list.add(edit);
      }
   }
   if(source.length < dest.length) {
      for(i in 0 to source.length - 1) {
         for(j in 0 to dest.length -1) {   
            let next = insertChar(source, i, dest[j]);
            let score = scoreDistance(next, dest);
            let edit = EditNode(next, score, count+1);
            
            list.add(edit);
         } 
      }
   }
   return list;
}

func replaceChar(text, i, value) {
   return text.substring(0, i) + value + text.substring(i + 1, text.length);   
}

func deleteChar(text, i) {
   return text.substring(0, i) + text.substring(i + 1, text.length);   
}

func insertChar(text, i, value) {
   return text.substring(0, i) + value + text.substring(i, text.length);  
}

func scoreDistance(source, dest) {
   if(source.length < dest.length) {
      return scoreDistance(dest, source);
   }
   let diff = source.length - dest.length;
   let max = 0;
   
   for(i in 0 to source.length - dest.length) {
      let count = 0;
      
      for(j in 0 to dest.length -1) {
         if(source[i + j] == dest[j]) {
            count++;   
         }
      }
      if(count > max) {
         max = count;
      }
   }
   return -max + diff;
}