// https://leetcode.com/problems/reverse-linked-list-ii/solution/

const list = createList(1,2,3,4,5,6,7,8,9);

reverseList(list).forEach(this::println);

func reverseList(head) {
   let last = reverseList(head.next, head);
   head.next = null;
   return last;
}

func reverseList(node, prev) {
   if(node.next) {
      let last = reverseList(node.next, node);
      
      node.next = prev;
      return last; // this is the last
   }
   node.next = prev;
   return node; // this is the end
}

func createList(vals... ){
   let root = null;
   let next = null;
   
   for(val in vals) {
      if(root == null) {
         root = ListNode(val);
         next = root;
      } else {
         let node = ListNode(val);
         next.next = node;
         next = node;
      }
   }
   return root;
}

class ListNode {
   let next;
   let val;
   
   new(val) {
      this.val = val;
   }
   
   forEach(f: (n: ListNode)) {
      let root = this;
      
      while(root != null){
         f(root);
         root = root.next;
      }
   }
   
   override toString(){
      return "[${val}]";
   }
}