import util.function.Predicate;

const root = buildTree();
const lowest = lowestCommonAncestor(root, 3, 4);

println(lowest);

func lowestCommonAncestor(tree: Node, a, b){
   let predicate = (ancestors) -> ancestors.contains(a) && ancestors.contains(b);
   let queue = PriorityQueue();
   let ancestors = HashSet();
   
   traverse(tree, ancestors, queue, predicate);
   return queue.peek();
}

func traverse(node: Node, ancestors: Set, queue: PriorityQueue, predicate: Predicate) {
   ancestors.add(node.val);
   println(node.val + ": " + ancestors);
   
   if(predicate.test(ancestors)) {
      queue.offer(node.val);
   }
   if(node.left) {
      traverse(node.left, ancestors, queue, predicate);
   }
   if(node.right) {
      traverse(node.right, ancestors, queue, predicate);
   }
   ancestors.remove(node.val);
}

func buildTree() {
   let root = Node(1);
   root.left = Node(2);
   root.right = Node(3);
   root.left.left = Node(4);
   root.left.right = Node(5);
   root.right.left = Node(6);
   root.right.right = Node(7);
   return root;
}

class Node {
   let left: Node;
   let right: Node;
   let val;
   
   new(val){
      this.val = val;
   }
}