
import java.awt.*;
import java.util.Random;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import java.awt.FontMetrics;
import java.lang.Thread;

class BallPanel extends Canvas {

	// Rendering / Buffer objects
	private var strategy: BufferStrategy;
	private var g2: Graphics2D;

	// Ball objects
	private let balls: Ball[] = new Ball[5000];
	private var currentBall: Ball;
	private var ballCount: Integer = 0;

	// Power Arrow
	private var powerArrow: Arrow;
	private var arrowScale: Float = 5.0f;

	// Frames
	private var maxFrameRate: Integer = 66;
	private var currentFrameRate: Integer = 0;


	public new()
	{
		setPreferredSize(new Dimension(800, 600));
		setIgnoreRepaint(true);

		// Wire up Events
		var mouseHandler: MouseHandler = new MouseHandler(this);
		addMouseMotionListener(mouseHandler);
		addMouseListener(mouseHandler);
	}

	// Start Render and Update Threads
	public start()
	{
		mainLoop();
	}

	public mainLoop()
	{
		let previousTime = System.currentTimeMillis();
		let currentTime = previousTime;
		let elapsedTime;
		let totalElapsedTime = 0;
		let frameCount = 0;

		while(true)
		{
			currentTime = System.currentTimeMillis();
			elapsedTime = (currentTime - previousTime); // elapsed time in seconds
			totalElapsedTime += elapsedTime;

			if (totalElapsedTime > 1000)
			{
				currentFrameRate = frameCount;
				frameCount = 0;
				totalElapsedTime = 0;
			}

			updateGame(elapsedTime / 1000f);
			render();

			try
			{
				//Thread.sleep(getFpsDelay(maxFrameRate));
				Thread.sleep(5);
			} catch (e) {
				e.printStackTrace();
			}

			previousTime = currentTime;
			frameCount++;

		}

	}

	private getFpsDelay(desiredFps: Integer): Integer
	{
		return 1000 / desiredFps;
	}


	public clearBalls()
	{
		ballCount = 0;
	}

	public setGravity(pixelsPerSecond: Float)
	{
		Constants.gravity = pixelsPerSecond;
	}

	public generateBalls(numBalls: Integer)
	{
		var rand: Random = new Random();
		for (let i = 0; i < numBalls; i++)
		{
			var tempBall: Ball = new Ball(rand.nextInt(10) + getWidth()/2, rand.nextInt(10) + getHeight()/2, 10, 0.1f);
		//	tempBall.velocity.set((rand.nextFloat() * 4000) - 2000, (rand.nextFloat() * 4000) - 2000);
		   balls[ballCount] = tempBall;
		   ballCount++;
		}
	}

	public scatterBalls()
	{
		var rand: Random = new Random();
		for (let i = 0; i < this.ballCount; i++)
		{
			balls[i].velocity.set((rand.nextFloat() * 3000) - 1500, (rand.nextFloat() * 3000) - 1500);
		}
	}

	public render()
	{
		//System.out.printf("Width: %d Height: %d\n", getWidth(), getHeight());

		if (strategy == null || strategy.contentsLost())
		{
		   let bufferCaps = new BufferCapabilities(new ImageCapabilities(true),
                 new ImageCapabilities(true),
                 null);
                 
			// Create BufferStrategy for rendering/drawing
			createBufferStrategy(2, bufferCaps);
			strategy = getBufferStrategy();
			var g: Graphics = strategy.getDrawGraphics();
			this.g2 = g;
		}


		// Turn on anti-aliasing
		this.g2.setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);



		// Render Background
		this.g2.setColor(Color.BLACK);
		this.g2.fillRect(0, 0, getWidth(), getHeight());

		// Render Game Objects
		for(let i = 0; i < ballCount; i++)
		{
			balls[i].draw(this.g2);
		}

		var tempBall: Ball = currentBall;
		if (tempBall != null) tempBall.draw(this.g2);


		// Render Foreground (text, etc)

  		// Draw Power Arrow and Speed Text along arrow if we are launching a ball
  		var tempArrow: Arrow = powerArrow;
  		if (tempArrow != null)
  		{
  			tempArrow.draw(this.g2);

  			// Power Arrow Magnitude Text
  			this.g2.setColor(Color.WHITE);
  			this.g2.drawString(String.format("%.2f px/s", tempArrow.getLength() * arrowScale, 2), (tempArrow.getX2() + tempArrow.getX1())/2, (tempArrow.getY1() + tempArrow.getY2())/2);
  		}

  		// Display Help Text in center if no balls
  		if (ballCount == 0 && currentBall == null)
  		{
  			var helpString: String = "Click and drag your mouse to launch a ball.";
  			this.g2.setColor(Color.WHITE);
  			this.g2.drawString(helpString,  getWidth()/2 - (this.g2.getFontMetrics().stringWidth(helpString)/2), getHeight()/2);
  		}

  		// Draw our framerate and ball count
  		this.g2.setColor(Color.WHITE);
  		this.g2.drawString("FPS: " + currentFrameRate + " Balls: "  + ballCount, 15, 15);


  		if (!strategy.contentsLost()) strategy.show();

	}

	public updateGame(elapsedSeconds: Float)
	{


		// step the position of movable objects based off their velocity/gravity and elapsedTime
		for (let i = 0; i < ballCount; i++)
		{
			balls[i].velocity.setY(balls[i].velocity.getY() + (Constants.gravity * (elapsedSeconds)));

			balls[i].position.setX(balls[i].position.getX() + (balls[i].velocity.getX() * (elapsedSeconds)));
			balls[i].position.setY(balls[i].position.getY() + (balls[i].velocity.getY() * (elapsedSeconds)));

			// TODO - Where should I be checking for epsilon?
			if (Math.abs(balls[i].velocity.getX()) < Constants.epsilon) balls[i].velocity.setX(0);
			if (Math.abs(balls[i].velocity.getY()) < Constants.epsilon) balls[i].velocity.setY(0);

		}

		checkCollisions();

	}

	// Insertion sort for Sweep and Prune
	public insertionSort(a: Comparable[] )
	{
		 for( var p: Integer = 1; p < ballCount; p++ )
	     {
	         var tmp: Comparable = a[ p ];
	         var j: Integer = p;

	         for( ; j > 0 && tmp < a[ j - 1 ] ; j-- )
	             a[ j ] = a[ j - 1 ];

	         a[ j ] = tmp;
		 }
	}


	public checkCollisions()
	{
		insertionSort(balls);


		// Check for collision with walls
		for (let i = 0; i < ballCount; i++)
		{
		//	System.out.println("Ball #" + i + ": " + (balls[i].position.getX() - balls[i].getRadius()));

			if (balls[i].position.getX() - balls[i].getRadius() < 0)
			{
				balls[i].position.setX(balls[i].getRadius()); // Place ball against edge
				balls[i].velocity.setX(-1 * (balls[i].velocity.getX() * Constants.restitution)); // Reverse direction and account for friction
				balls[i].velocity.setY(balls[i].velocity.getY() * Constants.restitution);
			}
			else if (balls[i].position.getX() + balls[i].getRadius() > getWidth()) // Right Wall
			{
				balls[i].position.setX(getWidth() - balls[i].getRadius());		// Place ball against edge
				balls[i].velocity.setX(-1 * (balls[i].velocity.getX() * Constants.restitution)); // Reverse direction and account for friction
				balls[i].velocity.setY((balls[i].velocity.getY() * Constants.restitution));
			}

			if (balls[i].position.getY() - balls[i].getRadius() < 0)				// Top Wall
			{
				balls[i].position.setY(balls[i].getRadius());				// Place ball against edge
				balls[i].velocity.setY(-1 * (balls[i].velocity.getY() * Constants.restitution)); // Reverse direction and account for friction
				balls[i].velocity.setX((balls[i].velocity.getX() * Constants.restitution));
			}
			else if (balls[i].position.getY() + balls[i].getRadius() > getHeight()) // Bottom Wall
			{
				balls[i].position.setY(getHeight() - balls[i].getRadius());		// Place ball against edge
				balls[i].velocity.setY(-1 * (balls[i].velocity.getY() * Constants.restitution));    // Reverse direction and account for friction
				balls[i].velocity.setX((balls[i].velocity.getX() * Constants.restitution));
			}

			// Ball to Ball collision
			for(let j = i + 1; j < ballCount; j++)
			{
				if ((balls[i].position.getX() + balls[i].getRadius()) < (balls[j].position.getX() - balls[j].getRadius()))
						break;

				if((balls[i].position.getY() + balls[i].getRadius()) < (balls[j].position.getY() - balls[j].getRadius()) ||
				   (balls[j].position.getY() + balls[j].getRadius()) < (balls[i].position.getY() - balls[i].getRadius()))
				   		continue;

				balls[i].resolveCollision(balls[j]);

			}
		}

	}

	class MouseHandler extends MouseAdapter with MouseMotionListener
	{
	
	   let panel: BallPanel;
	   
	   new(panel: BallPanel) {
	      this.panel = panel;
	   }
	
		public mousePressed(e: MouseEvent)
	   	{
			//Random randGen = new Random();
			//int randSize = randGen.nextInt(30) + 10;
			panel.currentBall = new Ball(e.getX(), e.getY(), 15, 15);
			panel.powerArrow = new Arrow(e.getX(), e.getY(), e.getX(), e.getY());
	   	}

	   public mouseReleased(e: MouseEvent)
	   {
		   // Change in x/y per second
		   var xVector: Float = (panel.powerArrow.getX2() - panel.powerArrow.getX1()) * 5;
		   var yVector: Float = (panel.powerArrow.getY2() - panel.powerArrow.getY1()) * 5;

		   panel.currentBall.velocity.set(xVector, yVector);
		   panel.balls[panel.ballCount] = panel.currentBall;
		   panel.ballCount++;

		   panel.currentBall = null;
		   panel.powerArrow = null;
	   }

	   public mouseDragged(e: MouseEvent)
	   {
			let x1 = panel.powerArrow.getX1();
			let y1 = panel.powerArrow.getY1();
			let x2 = e.getX();
			let y2 = e.getY();
			let dx = Math.abs(x2 - x1);
			let dy = Math.abs(y2 - y1);

			if ((x2 - x1) < 0)
			{
				panel.powerArrow.setX2(x1 + dx);
			}
			else
			{
				panel.powerArrow.setX2(x1 - dx);
			}

			if ((y2 - y1) < 0)
			{
				panel.powerArrow.setY2(y1 + dy);
			}
			else
			{
				panel.powerArrow.setY2(y1 - dy);
			}
	   }

	   public mouseMoved(e: MouseEvent)
	   {
		   // Nada
	   }
  }



}

