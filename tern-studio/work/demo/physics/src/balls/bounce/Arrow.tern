
import java.awt.*;

class Arrow {

	private var y1: Integer;
	private var x1: Integer;
	private var x2: Integer;
	private var y2: Integer;

	public new(x1: Integer, y1: Integer, x2: Integer, y2: Integer)
	{
		this.setX1(x1);
		this.setY1(y1);
		this.setX2(x2);
		this.setY2(y2);

	}

	public draw(g: Graphics)
	{
		if ((getX1() != getX2()) && (getY1() != getY2()))
		{
		  	let arrowWidth = 10.0f ;
		    var theta: Float = 0.423f ;
		    let xPoints: Integer[] = new Integer[ 3 ] ;
		    let yPoints: Integer[] = new Integer[ 3 ] ;
		    let vecLine: Float[] = new Float[ 2 ] ;
		    let vecLeft: Float[] = new Float[ 2 ] ;
		    let fLength: Float;
		    let th: Float;
		    let ta: Float;
		    let baseX: Float;
		    let baseY: Float;

		    xPoints[ 0 ] = getX2() ;
		    yPoints[ 0 ] = getY2() ;

		    // build the line vector
		    vecLine[ 0 ] = xPoints[ 0 ] - getX1() ;
		    vecLine[ 1 ] = yPoints[ 0 ] - getY1() ;

		    // build the arrow base vector - normal to the line
		    vecLeft[ 0 ] = -vecLine[ 1 ] ;
		    vecLeft[ 1 ] = vecLine[ 0 ] ;

		    // setup length parameters
		    fLength = Math.sqrt( vecLine[0] * vecLine[0] + vecLine[1] * vecLine[1] ) ;
		    th = arrowWidth / ( 2.0f * fLength ) ;
		    ta = arrowWidth / ( 2.0f * ( Math.tan( theta ) / 2.0f ) * fLength ) ;

		    // find the base of the arrow
		    baseX = ( xPoints[ 0 ] - ta * vecLine[0]);
		    baseY = ( yPoints[ 0 ] - ta * vecLine[1]);

		    // build the points on the sides of the arrow
		    xPoints[ 1 ] = Math.abs( baseX + th * vecLeft[0] );
		    yPoints[ 1 ] = Math.abs( baseY + th * vecLeft[1] );
		    xPoints[ 2 ] = Math.abs( baseX - th * vecLeft[0] );
		    yPoints[ 2 ] = Math.abs( baseY - th * vecLeft[1] );

		    g.drawLine( getX1(), getY1(), Math.abs(baseX), Math.abs(baseY) ) ;
    		g.fillPolygon( xPoints, yPoints, 3 ) ;

    		}
	}

	public setY2(y2: Integer) {
		this.y2 = y2;
	}

	public getY2(): Integer {
		return y2;
	}

	public setX2(x2: Integer) {
		this.x2 = x2;
	}

	public getX2(): Integer {
		return x2;
	}

	public setX1(x1: Integer) {
		this.x1 = x1;
	}

	public getX1(): Integer {
		return x1;
	}

	public setY1(y1: Integer) {
		this.y1 = y1;
	}

	public getY1(): Integer {
		return y1;
	}
	
	public getLength(): Float
	{
		
		return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	}

}

