
import awt.BasicStroke;
import awt.BorderLayout;
import awt.Color;
import awt.Container;
import awt.Graphics;
import awt.Graphics2D;
import awt.event.ActionEvent;
import awt.event.ActionListener;
import awt.geom.AffineTransform;
import awt.geom.Area;
import awt.geom.Ellipse2D;
import awt.geom.GeneralPath;
import awt.geom.Line2D;
import awt.geom.Rectangle2D;
import util.Vector;

import swing.JButton;
import swing.JFrame;
import swing.JPanel;
import swing.JSlider;
import swing.event.ChangeEvent;
import swing.event.ChangeListener;

import solarsystem.model.Host;
import solarsystem.model.Satellite;
import solarsystem.model.Planet;
import solarsystem.model.Moon;
import solarsystem.model.Stars;
import solarsystem.model.Sun;

/**
 * Contains the sun, planets and moons of the simulated solar system.
 * 
 * @see JPanel
 */
class SkyPanel extends JPanel { 
    /**
     * The initial size of the panel in pixels
     */
    var xMaxPixels;
    var xMinPixels;
    var yMaxPixels;
    var yMinPixels;
    /**
     * Minimum and maximum planet diameter in pixels.
     */
    var minPlanetDia = 20.0d;
    var maxPlanetDia = 60.0d;
    /**
     * The maximum number of orbits allowed in solar system.
     */
    var numberOfPlanets;
    /**
     * Number of stars in the background.
     */
    var numStars = 30;
    /**
     * The maximum number of orbits (i.e. planets) allowed in the solar
     * system.
     */
    var maxNumberOfOrbits;
    /**
     * A array indicating if orbit indexed is occupied by a planet.
     */
    var orbitOccupied;
    /**
     * An array of planet objects.
     * 
     * @see Planet
     */
    var planet;
    /**
     * Boolean variables indicating whether or not to display energy,
     * velocity, acceleration or position. Variable freeze is set to true to
     * stop the display from updating.
     */
    var displayEnergy = false;
    var displayVel = false;
    var displayAcc = false;
    var displayPos = false;
    var freeze = false;
    /**
     * A vector containing Stars objects.
     * 
     * @see Stars
     */
    var starGroup;
    /**
     * Sun object.
     * 
     * @see Sun
     */
    var sun;
    
    /**
     * SkyPanel constructor. The constructor calculates the maximum number of
     * planets that will be visible given mMaxXPosition, and then determines
     * the maximum number of orbits that are needed. It then creates an array
     * of planets and places each planet at random within the orbits. Finally,
     * it creates a star group which is displayed for the default view of the
     * solar system (more star groups are created as needed when/if the user
     * zooms out for a wider view of the solar system).
     * 
     * @param dt Time increment for numerical integration of differential
     *            equations of motion.
     * @param mMaxXPosition Maximum value of X coordinate allowed (in pixels).
     * @param mMaxYPosition Maximum value of Y coordinate allowed (in pixels).
     * @param mNumberOfPlanets Number of planets in solar system.
     * @param mSun Reference to Sun object of solar system.
     * @see Sun
     */
    new(dt, mMaxXPosition, mMaxYPosition, mNumberOfPlanets, mSun){
        xMinPixels = 0;
        xMaxPixels = mMaxXPosition;
        yMinPixels = 0;
        yMaxPixels = mMaxYPosition;
        numberOfPlanets = mNumberOfPlanets;
        sun = mSun;

        var numVisibleOrbits =((xMaxPixels/
        sun.getAbsPos(Coord.X) -
        sun.getDiameter()/2)/maxPlanetDia);

        maxNumberOfOrbits = numVisibleOrbits > numberOfPlanets ? numVisibleOrbits : numberOfPlanets;

        orbitOccupied = new Boolean[maxNumberOfOrbits];
        for (var i = 0; i < maxNumberOfOrbits; ++i)
            orbitOccupied[i] = false;

        planet = new Planet[numberOfPlanets];

        for (var i = 0; i < numberOfPlanets; ++i) {
            var diameter = minPlanetDia + Math.random()*
            (maxPlanetDia - minPlanetDia);
            planet[i] = new Planet(dt, // Time increment for calculating motion.
                                   diameter, // Diameter of planet
                                   getUnoccupiedOrbit(), // Radius of orbit for planet
                                   getColor(i), // Color of planet
                                   diameter/maxPlanetDia, // Mass of planet
                                   this, // Host panel
                                   sun);
        }

        starGroup = new Vector(1);
        populateStarGroup(1);
    }

    /**
     * Creates a new star group if needed for the given lengthScaleFactor.
     * 
     * @param mLengthScaleFactor The scale factor which determines sizing and distances for
     *                            positioning objects in display. This allows user to zoom in
     *                            or out.
     */
    populateStarGroup(mLengthScaleFactor) {
        //
        // Check to see if we have already made a star group for
        // this zoom factor.
        //
        if (starGroup.size() >= mLengthScaleFactor)
            return;
        //
        // If not, make a new star group.
        //

        var stars = new Stars(numStars/SkyFrame.getScaleFactor(), // number of
                                                                  // stars
        SkyFrame.getScaleFactor()*(xMaxPixels -
        sun.getAbsPos(Coord.X)), // maximum distance from sun
                      (SkyFrame.getScaleFactor() - 1)*(xMaxPixels -
                                                       sun.getAbsPos(Coord.X)), // minimum
                                                                                 // distance
                                                                                 // from
                                                                                 // sun

                      sun);
        starGroup.addElement(stars);
    }

    /**
     * Searches randomly among the allowed orbits until it finds an unoccupied
     * orbit.
     * 
     * @return double The intial radius of the unoccupied orbit.
     */
    getUnoccupiedOrbit() {
        var trialOrbitNum = (Math.random()*maxNumberOfOrbits);

        while (true) {
            if (!orbitOccupied[trialOrbitNum]) {
                orbitOccupied[trialOrbitNum] = true;
                break;
            }
            else
                trialOrbitNum = (Math.random()*maxNumberOfOrbits);
        }

        return 1.5*sun.getDiameter() + trialOrbitNum*maxPlanetDia;
    }

    override update(comp: Graphics) {
      //paint(comp);
    }
    
    /**
     * Repaints the display. This is the time critcal section.
     * 
     * @param comp A Graphics object.
     * @see Graphics
     */
    override paint(comp: Graphics) {
        var comp2D = comp;

        comp2D.setPaint(Color.black);      
        comp2D.fillRect(0, 0, 1000, 1000);
        sun.draw(comp2D);
        //
        // Only draw the star groups that are being displayed (i.e.
        // are within the current scale factor).
        //
        for (var i = 0; i < SkyFrame.getScaleFactor(); ++i)
            starGroup.get(i).draw(comp2D);

        for (var i = 0; i < numberOfPlanets; ++i) {
            if (!freeze)
                planet[i].translate();
            planet[i].draw(comp2D);
            if (displayVel)
                drawVelocityVector(comp2D, i);
            if (displayAcc)
                drawAccelerationVector(comp2D, i);
            if (displayEnergy)
                drawEnergy(comp2D, i);
        }
    }

    /**
     * Prints the kinetic energy of the planet indicated by the parameter i as
     * a percent of the total energy (kinetic + potential) of the planet.
     * 
     * @param comp2D A 2D graphics object.
     * @see Graphics2D
     * @param i Index of planet for which to display the kinetic energy.
     */
    drawEnergy(comp2D, i) {
        comp2D.setColor(Color.white);

        //
        // Print kinetic energy as percent of total energy.
        //

        var percentKE = Integer.toString((100*planet[i].getKE()/
                                            (planet[i].getKE() +
                                             planet[i].getPE())));
        comp2D.drawString("KE% " + percentKE,
                         planet[i].getAbsPos(Coord.X) + 50,
                         planet[i].getAbsPos(Coord.Y) + 70);
        //
        // Print potential energy as percent of total energy.
        //
        var percentPE = Integer.toString((100*planet[i].getPE()/
                                            (planet[i].getKE() +
                                             planet[i].getPE())));
        comp2D.drawString("PE% " + percentPE,
                         planet[i].getAbsPos(Coord.X) + 50,
                         planet[i].getAbsPos(Coord.Y) + 82);
    }

    /**
     * Displays the velocity vector of the planet indexed by the parameter i.
     * 
     * @param comp2D A 2D graphics object.
     * @see Graphics2D
     * @param i Index of planet for which to display the kinetic energy.
     */
    drawVelocityVector(comp2D, i) {
        var xPos = planet[i].getAbsPos(Coord.X);
        var yPos = planet[i].getAbsPos(Coord.Y);
        var xVel = xPos + 25*planet[i].getVel(Coord.X)/ SkyFrame.getScaleFactor();
        var yVel = yPos + 25*planet[i].getVel(Coord.Y)/SkyFrame.getScaleFactor();

        comp2D.setColor(Color.white);
        comp2D.draw(new Line2D.Float(xPos, yPos, xVel, yVel));
        drawArrow(comp2D, xPos, yPos, xVel, yVel);
    }

    /**
     * Displays the acceleration vector for the planet indexed by the
     * parameter i.
     * 
     * @param comp2D A 2D graphics object.
     * @see Graphics2D
     * @param i Index of planet for which to display the kinetic energy.
     */
    drawAccelerationVector(comp2D, i) {
        var xPos = planet[i].getAbsPos(Coord.X);
        var yPos = planet[i].getAbsPos(Coord.Y);
        var xAcc = xPos + 2000*planet[i].getAcc(Coord.X)/ SkyFrame.getScaleFactor();
        var yAcc = yPos + 2000*planet[i].getAcc(Coord.Y)/SkyFrame.getScaleFactor();

        comp2D.setColor(Color.white);
        comp2D.draw(new Line2D.Float(xPos,
                   yPos,
                   xAcc,
                   yAcc));
        drawArrow(comp2D,
                  xPos,
                  yPos,
                  xAcc,
                  yAcc);
    }

    /**
     * Draws an arrow (vector) from (x0, y0) to (x1, y1).
     * 
     * @param comp2D A 2D graphics object.
     * @see Graphics2D
     * @param x0 X coordinate of base of arrow.
     * @param y0 Y coordinate of base of arrow.
     * @param x1 X coordinate of tip of arrow.
     * @param y1 Y coordinate of tip of arrow.
     */
    drawArrow(comp2D, x0, y0, x1, y1) {
        var dx = x1 - x0;
        var dy = y1 - y0;
        var r = Math.sqrt(dx*dx + dy*dy);
        var len = 15/SkyFrame.getScaleFactor();
        var x;
        var y;
        var numPts = 4;

        x = new Integer[numPts];
        y = new Integer[numPts];
        x[0] = x1;
        y[0] = y1;
        x[1] = (x1 - len*dy/(2*r));
        y[1] = (y1 + len*dx/(2*r));
        x[2] = (x1 + len*dx/r);
        y[2] = (y1 + len*dy/r);
        x[3] = (x1 + len*dy/(2*r));
        y[3] = (y1 - len*dx/(2*r));

        var path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, numPts);
        path.moveTo(x[0], y[0]);
        for (var i = 1; i < numPts; ++i)
            path.lineTo(x[i], y[i]);
        path.closePath();
        comp2D.fill(path);
    }
    
    /**
     * The method getColor is used by the sattelites of the solar system to
     * get their color.
     * 
     * @param i Integer that determines the color that is returned.
     * @return Color
     */
    getColor(i) {
        var color;
        var j = i%8;
      
        if(j == 0) {
          color = Color.red;
        } else if(j == 1) {
          color = Color.blue;
        } else if(j == 2) {
          color = Color.green;
        }else if(j == 3) {
          color = Color.pink;
        }else if(j == 4) {
          color = Color.orange;
        }else if(j == 5) {
          color = Color.cyan;
        }else if(j == 6) {
          color = Color.magenta;
        }else if(j == 7) {
          color = Color.lightGray;
        } else {
          color = Color.gray;
        }
        return color;
    }

    /**
     * Set method to set variable displayAcc.
     * 
     * @param value Boolean value, true = display acceleration vector, false = do
     *              not display acceleration vector.
     */
    displayAcc(value) {
        displayAcc = value;
    }

    /**
     * Set method to set variable displayVel.
     * 
     * @param value Boolean value, true = display velocity vector, false = do not
     *               display velocity vector.
     */
    displayVel(value) {
        displayVel = value;
    }

    /**
     * Set method to set variable displayEnergy.
     * 
     * @param value Boolean value, true = display kinetic energy, false = do not
     *               display kinetic energy.
     */
    displayEnergy(value){
        displayEnergy = value;
    }

    /**
     * Set method to set variable displayPos.
     * 
     * @param value Boolean value, true = display trace of spatial position,
     *               false = do not display trace of spatial position.
     */
    displayPos(value) {
        displayPos = value;
    }

    /**
     * Get method to get the value of the variable displayPos.
     * 
     * @return displayPos Boolean value. true = diplay trace of previous
     *         spatial positions of planets. false = do not display trace of
     *         previous spatial positions of planets.
     */
    showPos() {
        return displayPos;
    }

    /**
     * Erases traces of previous spatial positions of planets.
     */
    resetPos() {
        for (var i = 0; i < numberOfPlanets; ++i)
            planet[i].erasePrevPositions();
    }
    /**
     * A set method to set the variable freeze. true = do not translate
     * planets. false = translate planets according to normal physical laws of
     * motion.
     */
    setFreeze(value) {
        freeze = value;
    }

    /**
     * Get method to retrieve the maximum diameter allowed for planets. return
     * double Maximum planet diameter (in pixels).
     */
    getMaxPlanetDiameter() {
        return maxPlanetDia;
    }
}
