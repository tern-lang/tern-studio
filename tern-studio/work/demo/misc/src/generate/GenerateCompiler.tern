import util.concurrent.ScheduledThreadPoolExecutor;
import common.store.ClassPathStore;
import compile.StoreContext;
import compile.StringCompiler;
import core.scope.EmptyModel;

module GenerateCompiler {

   compile(request: GenerateRequest): GenerateResult {
      const store = new ClassPathStore();
      const executor = new ScheduledThreadPoolExecutor(20);
      const context = new StoreContext(store, executor);
      const compiler = new StringCompiler(context);
      const model = new EmptyModel();
      const start = System.currentTimeMillis();
      
      try {
         if(!request.isValid()) {
            return new GenerateResult(
               request,
               "<b style='color: green'>Required fields not present</b>",
               true);
         }
         compiler.compile(request.source).execute(model, true);
                  
         if(!request.success){
            return new GenerateResult(
               request, 
               "<b style='color: red'>Test WAS NOT a failure but failure WAS requested</b>",
               false);
         }
      } catch(e){
         var message = GenerateExceptionFormatter.format(e);
         var color = request.success ? "red" : "green";
         var additional = "";
         
         if(request.success) {
            additional = "<b style='color: red'>The test WAS NOT a success but success WAS requested</b><br>";
         } else {
             if(request.message != message) {
              additional = "Message <b style='color: red'>${message}</b> is NOT equal to <b style='color: red'>${request.message}</b><br>";
            }
         }
         return new GenerateResult(
            request, 
            "<b style='color: ${color}'>" + message  + "</b><br>" + additional,
            !request.success);
      }
      const finish = System.currentTimeMillis();
      const duration = finish - start;
      
      return new GenerateResult(
         request,
         "<b style='color: green'>Successfully compiled in ${duration} milliseconds</b>",
         true);
   }
}