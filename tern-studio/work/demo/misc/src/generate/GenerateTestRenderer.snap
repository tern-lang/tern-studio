import util.stream.Collectors;

module GenerateTestRenderer {

   const SUCCESS_TESTS: Map<String, GenerateTestEntry> = {:};
   const FAILURE_TESTS: Map<String, GenerateTestEntry> = {:};

   createTestEntry(result: GenerateResult): Map<String, GenerateTestEntry>{
      var all: Map<String, GenerateTestEntry> = {:};
      var request = result.request;
      var source = request.source;
      var success = request.success;
      var message = request.message;
      var key = request.key;
         
      if(request.action == "add"){
         if(result.success) {
            addTestEntry(source, message, success);
         } else {
            println("Not adding as compile failure");
         }
      } else if(request.action == "remove"){
         removeTestEntry(key, success);
      }
      all.putAll(SUCCESS_TESTS);
      all.putAll(FAILURE_TESTS);
      return all;
   }

   removeTestEntry(key: String, success: Boolean){ 
      SUCCESS_TESTS.remove(key);
      FAILURE_TESTS.remove(key);
   }
   
   addTestEntry(source: String, message: String, success: Boolean){   
      var name = success ? ("SUCCESS_" + (SUCCESS_TESTS.size() + 1)) : ("FAILURE_" + (FAILURE_TESTS.size() + 1));
      var test = success ? "assertCompileSuccess(${name})" : ("assertCompileError(${name}, \"" + message.replace('"', '\\"') + "\")");
      var entry = new GenerateTestEntry(
         source,
         success,
         name,
         test);
         
      if(success) {
         SUCCESS_TESTS.put(name, entry);
      } else {
         FAILURE_TESTS.put(name, entry);
      }
   }
   
   createCompileTestCase(name: String){
      var text = new File("C:/Work/development/snapscript/snap-develop/snap-studio/work/demo/misc/src/generate/CompileTestCase.txt").readText();
      text = text.replace("%imports%", "
import junit.framework.TestCase;

import org.snapscript.compile.ClassPathCompilerBuilder;
import org.snapscript.compile.Compiler;
import org.snapscript.compile.verify.VerifyError;
import org.snapscript.compile.verify.VerifyException;");
   
      text = text.replace("%name%",  name);
      
      var sources = "";
      
      for(entry in SUCCESS_TESTS){
         sources += "\n   private static final String " + entry.value.name + " =\n"+createSourceFrom(entry.value.source)+";\n";
      }
      for(entry in FAILURE_TESTS){
         sources += "\n   private static final String " + entry.value.name + " =\n"+createSourceFrom(entry.value.source)+";\n";
      }
      var tests = "";
      
            
      for(entry in SUCCESS_TESTS){
         tests += "\n      " + entry.value.test + ";";
      }
      for(entry in FAILURE_TESTS){
         tests += "\n      " + entry.value.test + ";";
      }
      
      text = text.replace("%sources%",  sources);
      text = text.replace("%tests%", "\n   public void test${name}() throws Exception {${tests}
   }");
      return text;
   }
   
   createSourceFrom(text: String){
      var formatted = text.split("\\r?\\n")
         .stream()
         .map(line -> "   \"" + line.replace('"', '\\"') + "\\n\"+")
         .collect(Collectors.joining("\n"));
         
      return formatted.substring(0, formatted.length -1);         
   }
}