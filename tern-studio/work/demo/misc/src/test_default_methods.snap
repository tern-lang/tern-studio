import util.concurrent.atomic.AtomicInteger;

trait Foo extends Iterator {

   override next(){
      return value().getAndIncrement();
   }
   override hasNext(){
      return value().get() < 100;
   }

   abstract value(): AtomicInteger;
   
   func() {
      println("func()");
   }
}

class FooImpl with Foo {

   var i = new AtomicInteger();
   override value(): AtomicInteger{
      return i;
   }
}
var foo = new FooImpl();
while(foo.hasNext()){
   foo.func();
   println(foo.next());
}
