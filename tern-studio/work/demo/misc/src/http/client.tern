
module Client{
   
   enum Method {
      GET(false),
      POST(true),
      PUT(true),
      DELETE(false),
      HEAD(true);
      
      const output;
      new(output){
         this.output =output;
      }
   }
   
   /**
    * Create a builder for a HTTP GET request. This requires
    * only the address of the target.
    *
    * @param address the URL
    */
   public get(address): RequestBuilder {
      return new RequestBuilder(Method.GET, address);
   }
   
   /**
    * Create a builder for a HTTP POST request. This requires
    * this address of the target, a body, and a content type.
    *
    * @param address the URL
    */
   public post(address): RequestBuilder{
      return new RequestBuilder(Method.POST, address);
   }
   
   /**
    * Create a builder for a HTTP PUT request. This requires
    * this address of the target, a body, and a content type.
    *
    * @param address the URL
    */
   public put(address): RequestBuilder{
      return new RequestBuilder(Method.PUT, address);
   }
   
   /**
    * Create a builder for a HTTP DELETE request. This requires
    * only the address of the target.
    *
    * @param address the URL
    */
   public delete(address): RequestBuilder{
      return new RequestBuilder(Method.DELETE, address);
   }
   
   /**
    * Create a builder for a HTTP HEAD request. This requires
    * only the address of the target.
    *
    * @param address the URL
    */   
   public head(address): RequestBuilder{
      return new RequestBuilder(Method.HEAD, address);
   }
      
   class Response {
      const status;
      const header;
      const data;
      
      new(status, data, header){
         this.status = status;
         this.data = data;
         this.header = header;
      }
      getStatus(){
         return status;
      }
      
      getBody(){
         return data;
      }
      
      getHeader(){
         return header;
      }
      
      getText(){
         return new String(data, "UTF-8");
      }
      override toString(){
         return header;
      }
   }
   
   class RequestBuilder {
      var connection;
      var headers;
      var target;
      var type;
      var body;
      var method;
      
      new(method, address){
         this.connection = new Connection(this);
         this.target = new URL(address);
         this.method = method;
         this.headers = {};
      }
      
      withType(type){
         this.type = type;
         return this;
      }
      
      withHeaders(headers){
         this.heades = headers;
         return this;
      }
      
      withBody(body){
         this.body = body;
         return this;
      }
      
      execute(){
         return connection.execute();
      }
   }
   
   class Connection {
      const builder;
      
      new(builder){
         this.builder = builder;
      }
   
      /**
       * This is used to execute the HTTP request and read the
       * response message.
       *
       * @return this returns the client response object
       */
      execute() {
         var target = builder.target;
         var conn = target.openConnection();
         
         conn.setDoOutput(builder.method.output);
         conn.setRequestMethod(builder.method.name);
         
         for(var entry in builder.headers){
            for(var value in entry.value) {
               conn.setRequestProperty(entry.key, value);
            }
         }
         if(builder.method.output){
            var data = body.getBytes("UTF-8");
            var output = conn.getOutputStream();
            
            conn.setRequestProperty("Content-Type", type);
            output.write(data);
            output.close();
         }
         return execute(conn);
      }
      
      execute(conn){
         var status = conn.getResponseCode();
         var message = conn.getResponseMessage();
         var input = conn.getInputStream() ??
               conn.getErrorStream();
         var headers = conn.getHeaderFields();
         
         return read(status, message, headers, input);
      }
      
      /**
       * This is used to read the HTTP response data and provide
       * client response. 
       *
       * @param status the HTTP status code
       * @param message the HTTP status message 
       * @param headers the headers from the response
       * @param source this contains the response body
       *
       * @return this returns a response object
       */
      read(status, message, headers, source) {
         var buffer = new ByteArrayOutputStream();
         var header = new StringBuilder();
         var data = new Byte[1024];
         var count =0;
         
         header.append("HTTP/1.1 ${status} ${message}\r\n");
         
         while((count = source.read(data))!= -1){
            buffer.write(data, 0,count);
         }
         var content = buffer.toByteArray();
         for(var entry in headers){
            if(entry.key != null){
               for(var value in entry.value) {
                  header.append("${entry.key}: ${value}\r\n");
               }
            }
         }
         var text = "${header}\r\n";
         return new Response(status,content,text);
      }
   }
   
}

// var response = Client.get("http://www.google.com")
//    .execute();
 
// println(response);   
   
   
