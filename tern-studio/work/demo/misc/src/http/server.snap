import io.IOException;
import net.InetSocketAddress;
import net.SocketAddress;
import http.type.TypeResolver;
import org.simpleframework.http.Status;
import org.simpleframework.http.Protocol;
import org.simpleframework.http.core.Container;
import org.simpleframework.http.core.ContainerSocketProcessor;
import org.simpleframework.transport.SocketProcessor;
import org.simpleframework.transport.connect.Connection;
import org.simpleframework.transport.connect.SocketConnection;

module Server {

   /**
    * Create a new HTTP server listening on the specified
    * port. Handlers are registered with a regular expression.
    *
    * @param port the port to listen to
    */
   public create(port): RequestDispatcher {
      return new RequestDispatcher(port);
   }

   class RequestDispatcher {
      private const router;
      private const server;
      private const address;
      private const connection;
      
      new(port){
         this.router = new RequestRouter();
         this.server = new ContainerSocketProcessor(router, 10);
         this.connection = new SocketConnection(server);
         this.address = new InetSocketAddress(port);
      }
      
      register(pattern, handler: (req, resp)){
         router.register(pattern, handler);
         return this;
      }
   
      start(){
         connection.connect(address);
         return this;
      }
      
      stop(){
         connection.close();
         return this;
      }
   }
   
   class RequestRouter with Container {
      private const handlers;
      
      new(){
         this.handlers ={:};
      }
      
      register(pattern, handler: (req, resp)){
         handlers.put(pattern, handler);
      }
      
      resolve(path) {
         for(var entry in handlers){
            if(path.matches(entry.key)){
               return entry.value;
            }
         }
         return (req, resp)->{
            var output = resp.getPrintStream();
            
            resp.setStatus(Status.NOT_FOUND);
            resp.setValue(Protocol.CONTENT_TYPE, "text/plain");
            output.println("Resource ${path} not found");
            output.close();
         };
      }
      
      handle(req, resp){
         var path = req.getPath();
         var normal = path.getPath();
         var output = resp.getPrintStream(8192);

         try {
            var type = TypeResolver.resolve(normal);
            var handler = resolve(normal);
            
            resp.setStatus(Status.OK);
            resp.setValue(Protocol.CONTENT_TYPE, type);
            handler(req,resp);
         }catch(cause){
            resp.setStatus(Status.INTERNAL_SERVER_ERROR);
            resp.setValue(Protocol.CONTENT_TYPE, "text/plain");
            resp.reset();
            cause.printStackTrace(output);
            cause.printStackTrace();
            output.close();
         }finally{
            resp.close();
         }
      }
   }
}
// function start(port) {
//    Server.create(port).register("/x.*", (req, resp)->{
//       resp.getPrintStream().println("Hello");
//    }).start();
// }

// 11);
// sleep(10000000);
