import org.simpleframework.http.Status;
import org.simpleframework.http.Request;
import text.SimpleDateFormat;
import http.server.Server;

class FileSystem {
   
   const root;
   new(root){
      this.root = root;
   }

   handle(req, resp){
      var path = req.getPath();
      var normal = path.getPath();
      var stream = resp.getPrintStream();
      var file = new File(root, normal);
    
      println(req);
    
      if(normal.equals("/upload")) {
         if(req.method.equals("POST")) {
            handleUploadFile(req, resp);
         } else {
            handleShowUploadPage(req, resp);
         }
      }
      if(file.isDirectory()){
         handleDirectory(req, resp,file);
      } else {
         handleFile(req, resp, file);
      }
      resp.close();
   }
   
   handleUploadFile(req, resp) {
      let list = req.getParts();
      
      for(part in list) {
         let name = part.getFileName();
         
         if(name) {
            let root = File("c:/Work/temp/upload");
            
            root.mkdirs();
            System.err.println(name);
            System.err.println(root.canonicalPath);
            
            let path = File(root.canonicalPath, name);
            let data = part.getInputStream();
            let output = FileOutputStream(path);
            
            data.copyTo(output);
            output.close();
         }
      }
      let page = "<html>
         <body>
         <h1>File Uploaded</h1>
         <pre>${req}</pre>
         </body>
         </html>";
         
      resp.setStatus(Status.OK);
      resp.setValue("Content-Type", "text/html");         
      resp.getPrintStream().println(page);
      resp.getPrintStream().close();      
   }
   
   handleShowUploadPage(req, resp){
      let page = "<html>
         <body>
         <form action='/upload' method='post' enctype='multipart/form-data'>
         Select image to upload:
         <input type='file' name='fileToUpload' id='fileToUpload'>
         <input type='submit' value='Upload Image' name='submit'>
         </form>
         </body>
         </html>";
         
      resp.setStatus(Status.OK);
      resp.setValue("Content-Type", "text/html");         
      resp.getPrintStream().println(page);
      resp.getPrintStream().close();
   }
   
   handleDirectory(req, resp, file){
      var path = req.getPath();
      var directory = path.getDirectory();
      var segments = path.getSegments();
      var stream = resp.getPrintStream();
      var list = file.listFiles();
      var current = "/";
      
      resp.setStatus(Status.OK);
      resp.setValue("Content-Type", "text/html");
      
      stream.println("<html>
         <head>      
         <title>${file}</title>
         </head>
         <body>
         <h1>Index of ${path.path == '/' ? '/' : file.name}</h1>
         <a href='/'>/</a>&nbsp;&gt;&nbsp;");
      
      for(var segment in segments){
         stream.println("<a href='${current}${segment}/'>${segment}</a>&nbsp;&gt;&nbsp;");
         current += "${segment}/";
      }
      stream.println("<hr>
         <table border='0'>
         <tr>
         <td><b>File</b></td>
         <td><b>Modified</b></td>
         </tr>
         <tr>
         <td><a href='..'>..</a><td>
         <td></td>
         </tr>");
         
      var format = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss');
      
      for(var entry in list){
         var suffix = entry.isDirectory() ? "/" : "";
         var prefix = directory == "/" ? "" : directory;
         var date = format.format(entry.lastModified);
         
         stream.println("<tr>
            <td><a href='${prefix}${entry.name}${suffix}'>${entry.name}${suffix}</a></td>
            <td>${date}</td>
            </tr>");
      }
      stream.println("</table>
         <hr>
         </body>
         </head>");
         
   }
   
   handleFile(req, resp, file){
      var output = resp.getOutputStream();
      var input = new FileInputStream(file);
      var chunk = new Byte[1024];
      var count = 0;
      
      while((count = input.read(chunk)) !=-1){
         output.write(chunk,0,count);
      }
      output.close();
   }
}

var root = new File("c:\\");
var system = new FileSystem(root);

Server.create(8911).register("/.*", system::handle).start();
sleep(100000000);
