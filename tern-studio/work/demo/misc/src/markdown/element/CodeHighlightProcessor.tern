import util.stream.Collectors;

class CodeHighlightProcessor {

   static const SPECIAL = [
      "let", "func", "return", "class", 
      "trait", "enum", "with", "extends", 
      "return", "assert", "until", "unless",
      "if", "else", "instanceof", "as", "debug", 
      "const", "while", "for", "in", "break",
      "continue", "loop", "catch", "finally",
      "try", "throw", "new", "this", "super",
      "static", "public", "private", "abstract",
      "override", "yield", "async", "await",
      "module", "import", "type", "switch",
      "false", "true", "null", "from", "to"];
      
   const special;
   
   new() {
      this.special = SPECIAL.stream()
         .sorted((a, b) -> Integer.compare(b.length, a.length))
         .collect(Collectors.toList());
   }
      
   public process(text: String) {
      let index = 0;
      let builder = StringBuilder();
      
      text = replaceText(text);
      text = replaceComment(text);
      
      let lines = text.split("\\r?\\n");
      
      for(let i = 0; i < lines.length; i++) {
         for(token in SPECIAL) {
            lines[i] = replaceToken(lines[i], token);
         }
         lines[i] = replaceLineComment(lines[i]);
      }
      for(let i = 0; i < lines.length; i++) {
         builder.append(lines[i]);
         builder.append("\n");
      }
      return builder.toString();
   }
   
   private encode(text: String) {
      let builder = StringBuilder();
      let code = text.replace("&lt;", "<").replace("&gt;", ">");
      
      for(i in 0 to code.length - 1){
         let ch = code[i];
         
         if(Character.isLetter(ch) || "<>/".indexOf(ch) != -1) {
            let number = ch as Integer;
            builder.append("&#${number};");
         } else {
            builder.append(ch);
         }
      }
      return builder.toString();
   }
   
   private replaceText(text: String) {
      let index = 0;
      let findFirst = (text, start) -> {
         let min = -1;
         
         for(open in ["'", "`", "\""]) {
            let pos = text.indexOf(open, start);
            
            if(pos > 0 && text[pos-1] == '\\') {
               continue;
            }
            if(pos != -1) {
               if(min == -1) {
                  min = pos;
               } else  if(pos < min) {
                  min = pos;
               }
            }
         }
         return min;
      };
      
      while(index != -1) {
         index = findFirst(text, index);
         
         if(index == -1 || index >= text.length) {
            break;
         }
         const quote = text[index];
         const end = text.indexOf(quote, index + 1);
         
         if(end == -1) {
            break;
         }
         const prefix = text.substring(0, index);
         const suffix = text.substring(end + 1);
         const token = text.substring(index, end + 1);
         const encoded = encode(token);
         const replace = "<span style='color: #C82829'>${encoded}</span>";
         
         text = "${prefix}${replace}${suffix}";
         index += replace.length;
      }
      return text;
   }
   
   private replaceComment(text: String) {
      let index = 0;
      
      while(index != -1) {
         index = text.indexOf("/*");
         
         if(index != -1) {
            const end = text.indexOf("*/", index + 1);
            
            if(end == -1) {
               break;
            }
            const prefix = text.substring(0, index);
            const suffix = text.substring(end + 2);
            const token = text.substring(index, end + 2);
            const encoded = encode(token);
            const replace = "<span style='color: #718C00'>${encoded}</span>";
            
            text = "${prefix}${replace}${suffix}";
            index += replace.length;            
         }
      }
      return text;
   }
   
   private replaceLineComment(text: String) {
      let index = text.indexOf("//");
      
      if(index != -1) {
         const prefix = text.substring(0, index);
         const suffix = text.substring(index, text.length);
         const encoded = encode(suffix);
         
         text = "${prefix}<span style='color: #718C00'>${encoded}</span>";
      }
      return text;
   }
   
   private replaceToken(text: String, token: String) {
      let ignore = text.indexOf("//") == -1 ? text.length : text.indexOf("//");
      let matches = [];
      let index = 0;
         
      while(index != -1) {
         index = text.indexOf(token, index);
      
         if(index > ignore || index + token.length >= text.length) {
            break;
         }
         if(index != -1) {
            const after = text[index + token.length];
            
            if(after == '(' || after == ' ' || after == ';' || after == '.') {
               if(index > 0 && text[index -1]) {
                  const before = text[index -1];
                  
                  if(Character.isLetter(before)) {
                     index += token.length;
                     continue;
                  }
               }
               const prefix = text.substring(0, index);
               const suffix = text.substring(index + token.length);
               const replace = "<span style='color: #8959A8'>${token}</span>";
               
               text = "${prefix}${replace}${suffix}";
               index += replace.length;
            } else {
               index += token.length;
            }
         }
      }
      return text;
   }
}
