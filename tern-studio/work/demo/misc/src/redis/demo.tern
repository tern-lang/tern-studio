import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Jedis;
import security.SecureRandom;

module RedisClient {

   public create() {
      const poolConfig = new JedisPoolConfig();
      poolConfig.setMaxTotal(128);
      poolConfig.setMaxIdle(128);
      poolConfig.setMinIdle(16);
      poolConfig.setTestOnBorrow(true);
      poolConfig.setTestOnReturn(true);
      poolConfig.setTestWhileIdle(true);
      // poolConfig.setMinEvictableIdleTimeMillis(Duration.ofSeconds(60).toMillis());
      // poolConfig.setTimeBetweenEvictionRunsMillis(Duration.ofSeconds(30).toMillis());
      poolConfig.setNumTestsPerEvictionRun(3);
      poolConfig.setBlockWhenExhausted(true);
      return new JedisPool(poolConfig, "localhost");      
   }
}

func main() {
   const pool = RedisClient.create();
   const random = SecureRandom();
   
   for(n in 1 to 1000) {
      const jedis: Jedis = pool.getResource();
      
      try {
         const start = System.currentTimeMillis();
         const rand = random.nextInt(10000);
         
         for(i in 1 to 1000 * n) {
            jedis.set("key-${rand}", "value-${i}");
         }
         for(i in 1 to 1000 * n) {
            jedis.get("key-${rand}");
         }      
         const finish = System.currentTimeMillis();
         println("" + (n * 1000) + ": " +(finish-start));
      } finally {
         jedis.close();
      }
   }
}

main();
