import awt.Color as ImageColor;
import awt.image.BufferedImage;
import imageio.ImageIO;

class Vec {
    var x: Number;
    var y: Number;
    var z: Number;
    new(x: Number, y: Number, z: Number) {
      this.x = x;
      this.y = y;
      this.z = z;
    }
    static times(k: Number, v: Vec) { return new Vec(k * v.x, k * v.y, k * v.z); }
    static minus(v1: Vec, v2: Vec) { return new Vec(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z); }
    static plus(v1: Vec, v2: Vec) { return new Vec(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z); }
    static dot(v1: Vec, v2: Vec) { return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z; }
    static mag(v: Vec) { return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z); }
    static norm(v: Vec) {
        var mag = Vec.mag(v);
        var div = (mag == 0) ? Double.POSITIVE_INFINITY : 1.0 / mag;
        return Vec.times(div, v);
    }
    static cross(v1: Vec, v2: Vec) {
        return new Vec(v1.y * v2.z - v1.z * v2.y,
                          v1.z * v2.x - v1.x * v2.z,
                          v1.x * v2.y - v1.y * v2.x);
    }
}

class Color {
    var r: Number;
    var g: Number;
    var b: Number;
    new(r: Number, g: Number, b: Number) {
      this.r = r;
      this.g = g;
      this.b = b;
    }
    static scale(k: Number, v: Color) { return new Color(k * v.r, k * v.g, k * v.b); }
    static plus(v1: Color, v2: Color) { return new Color(v1.r + v2.r, v1.g + v2.g, v1.b + v2.b); }
    static times(v1: Color, v2: Color) { return new Color(v1.r * v2.r, v1.g * v2.g, v1.b * v2.b); }
    static const white = new Color(1.0, 1.0, 1.0);
    static const grey = new Color(0.5, 0.5, 0.5);
    static const black = new Color(0.0, 0.0, 0.0);
    static const background = new Color(0.0, 0.0, 0.0);
    static const defaultColor = new Color(0.0, 0.0, 0.0);
    static toDrawingColor(c: Color) {
        var legalize = (d) -> d > 1 ? 1 : d;
        return new ImageColor(
            Math.round(legalize(c.r) * 255),
            Math.round(legalize(c.g) * 255),
            Math.round(legalize(c.b) * 255)
        );
    }
}

class Camera {
    var forward: Vec;
    var right: Vec;
    var up: Vec;
    var pos: Vec;
    
    new(pos: Vec, lookAt: Vec) {
        var down = new Vec(0.0, -1.0, 0.0);
        this.pos = pos;
        this.forward = Vec.norm(Vec.minus(lookAt, this.pos));
        this.right = Vec.times(1.5, Vec.norm(Vec.cross(this.forward, down)));
        this.up = Vec.times(1.5, Vec.norm(Vec.cross(this.forward, this.right)));
    }
}

class Ray {
    var start: Vec;
    var dir: Vec;
    new(start: Vec, dir: Vec){
      this.start = start;
      this.dir = dir;
    }
}

class Intersection {
    var thing: Thing;
    var ray: Ray;
    var dist: Number;
    new(thing: Thing, ray: Ray, dist: Number){
      this.thing = thing;
      this.ray = ray;
      this.dist = dist;
    }
}

abstract class Surface {
    var roughness: Number;
    abstract diffuse(pos: Vec){}
    abstract specular(pos: Vec){}
    abstract reflect(pos: Vec){}
}

abstract class Thing {
    var surface: Surface;
    abstract intersect(ray: Ray){}
    abstract normal(pos: Vec){}
}

class Light {
    var pos: Vec;
    var color: Color;
    new(pos: Vec, color: Color){
      this.pos = pos;
      this.color = color;
    }
}

class Scene {
    var things: [];
    var lights: [];
    var camera: Camera;
    new(things, lights, camera: Camera) {
      this.things = things;
      this.lights = lights;
      this.camera = camera;
    }
}

class Sphere extends Thing {
    var radius2: Number;
    var center: Vec;
    new(center: Vec, radius: Number, surface: Surface) {
        this.radius2 = radius * radius;
        this.center = center;
        this.surface = surface;
    }
    
    override normal(pos: Vec) : Vec { return Vec.norm(Vec.minus(pos, this.center)); }
    override intersect(ray: Ray) {
        var eo = Vec.minus(this.center, ray.start);
        var v = Vec.dot(eo, ray.dir);
        var dist = 0;
        if (v >= 0) {
            var disc = this.radius2 - (Vec.dot(eo, eo) - v * v);
            if (disc >= 0) {
                dist = v - Math.sqrt(disc);
            }
        }
        if (dist == 0) {
            return null;
        } else {
            return new Intersection(this, ray, dist);
        }
    }
}

class Plane extends Thing {
    var norm: Vec;
    var offset: Number;
    new(norm: Vec, offset: Number, surface: Surface) {
        this.norm = norm;
        this.offset = offset;
        this.surface = surface;
    }
    override normal(pos: Vec) { return norm; }
    override intersect(ray: Ray) {
      var denom = Vec.dot(norm, ray.dir);
      if (denom > 0) {
          return null;
      } else {
          var dist = (Vec.dot(norm, ray.start) + offset) / (-denom);
          return new Intersection(this, ray, dist);
      }
    }

}

class ShinySurface extends Surface {
   new() {
      this.roughness = 250;
   }
   override diffuse(pos: Vec) { return Color.white; }
   override specular(pos: Vec) { return Color.grey; }
   override reflect(pos: Vec) { return 0.7; }
}

class CheckerboardSurface extends Surface {
   new() {
      this.roughness = 150;
   }
   override diffuse(pos: Vec) {
      if ((Math.floor(pos.z) + Math.floor(pos.x)) % 2 != 0) {
          return Color.white;
      } else {
          return Color.black;
      }
   }
   override specular(pos: Vec) { return Color.white; }
   override reflect(pos: Vec) {
      if ((Math.floor(pos.z) + Math.floor(pos.x)) % 2 != 0) {
         return 0.1;
      } else {
         return 0.7;
      }
   }
}

class RayTracer {
    var maxDepth = 5;

    private intersections(ray: Ray, scene: Scene) {
        var closest = Double.POSITIVE_INFINITY;
        var closestInter: Intersection = null;
        for (var thing in scene.things) {
            var inter = thing.intersect(ray);
            if (inter != null && inter.dist < closest) {
                closestInter = inter;
                closest = inter.dist;
            }
        }
        return closestInter;
    }

    private testRay(ray: Ray, scene: Scene) {
        var isect = this.intersections(ray, scene);
        if (isect != null) {
            return isect.dist;
        } else {
            return null;
        }
    }

    private traceRay(ray: Ray, scene: Scene, depth: Number) {
        var isect = this.intersections(ray, scene);
        if (isect == null) {
            return Color.background;
        } else {
            return this.shade(isect, scene, depth);
        }
    }

    private shade(isect: Intersection, scene: Scene, depth: Number) {
        var d = isect.ray.dir;
        var pos = Vec.plus(Vec.times(isect.dist, d), isect.ray.start);
        var normal = isect.thing.normal(pos);
        var reflectDir = Vec.minus(d, Vec.times(2, Vec.times(Vec.dot(normal, d), normal)));
        var naturalColor = Color.plus(Color.background,
                                      this.getNaturalColor(isect.thing, pos, normal, reflectDir, scene));
        var reflectedColor = (depth >= this.maxDepth) ? Color.grey : this.getReflectionColor(isect.thing, pos, normal, reflectDir, scene, depth);
        return Color.plus(naturalColor, reflectedColor);
    }

    private getReflectionColor(thing: Thing, pos: Vec, normal: Vec, rd: Vec, scene: Scene, depth: Number) {
        return Color.scale(thing.surface.reflect(pos), this.traceRay(new Ray(pos, rd), scene, depth + 1));
    }

    private getNaturalColor(thing: Thing, pos: Vec, norm: Vec, rd: Vec, scene: Scene) {
        var addLight = (col, light) -> {
            var ldis = Vec.minus(light.pos, pos);
            var livec = Vec.norm(ldis);
            var neatIsect = this.testRay(new Ray(pos, livec), scene);
            var isInShadow = (neatIsect == null) ? false : (neatIsect <= Vec.mag(ldis));
            if (isInShadow) {
                return col;
            } else {
                var illum = Vec.dot(livec, norm);
                var lcolor = (illum > 0) ? Color.scale(illum, light.color)
                                          : Color.defaultColor;
                var specular = Vec.dot(livec, Vec.norm(rd));
                var scolor = (specular > 0) ? Color.scale(Math.pow(specular, thing.surface.roughness), light.color)
                                          : Color.defaultColor;
                return Color.plus(col, Color.plus(Color.times(thing.surface.diffuse(pos), lcolor),
                                                  Color.times(thing.surface.specular(pos), scolor)));
            }
        };
        return reduce(scene.lights, addLight, Color.defaultColor);
    }
    
    reduce(lights, addLight, color: Color) { // scene.lights.reduce
      var result = color;
      for(var light in lights){
         result = addLight(result, light);
      }
      return result;
    }

    render(scene, graphics, screenWidth, screenHeight) {
        var getPoint = (x, y, camera) -> {
            var recenterX = (x) ->(x - (screenWidth / 2.0)) / 2.0 / screenWidth;
            var recenterY = (y) -> -1 * (y - (screenHeight / 2.0)) / 2.0 / screenHeight;
            return Vec.norm(Vec.plus(camera.forward, Vec.plus(Vec.times(recenterX(x), camera.right), Vec.times(recenterY(y), camera.up))));
        };
        for (var y = 0; y < screenHeight; y++) {
            for (var x = 0; x < screenWidth; x++) {
                var color = this.traceRay(new Ray(scene.camera.pos, getPoint(x, y, scene.camera)), scene, 0);
                var rgb = Color.toDrawingColor(color);
                
                graphics.setColor(rgb);
                graphics.fillRect(x, y, x + 1, y + 1);
            }
        }
    }
}


function defaultScene(){
    return new Scene(
               [new Plane(new Vec(0.0, 1.0, 0.0), 0.0, new CheckerboardSurface()),
                 new Sphere(new Vec(0.0, 1.0, -0.25), 1.0, new ShinySurface()),
                 new Sphere(new Vec(-1.0, 0.5, 1.5), 0.5, new ShinySurface())],
               [new Light(new Vec(-2.0, 2.5, 0.0), new Color(0.49, 0.07, 0.07)),
                 new Light(new Vec(1.5, 2.5, 1.5), new Color(0.07, 0.07, 0.49)),
                 new Light(new Vec(1.5, 2.5, -1.5), new Color(0.07, 0.49, 0.071)),
                 new Light(new Vec(0.0, 3.5, 0.0), new Color(0.21, 0.21, 0.35))],
               new Camera(new Vec(3.0, 2.0, 4.0), new Vec(-1.0, 0.5, 0.0))
    );
}
// debug time: 50853
// run time: 43702, 44691, 44092
function start(path) {
    var rayTracer = new RayTracer();
    var image = new BufferedImage(256, 256, BufferedImage.TYPE_INT_ARGB);
    var file = new File(path);
    var graphics = image.getGraphics();
    var scene = defaultScene();
    
    rayTracer.render(scene, graphics, 256, 256);
    ImageIO.write(image, "png", file);    
}

var start = System.currentTimeMillis();
start("c:\\Work\\temp\\raytrace.png");
println(System.currentTimeMillis()-start);
