import util.stream.Collectors;
import util.regex.Pattern;

var ROOT = "C:\\Work\\development\\snapscript\\snap-develop\\snap-develop\\work\\android";

var SOURCE = new File("${ROOT}\\mario_original");
var DESTINATION = new File("${ROOT}\\mario");

DESTINATION.mkdirs();

SOURCE.findFiles(file -> file.isDirectory())
   .stream()
   .filter(file -> {
      var matches = file.listFiles()
         .stream()
         .filter(javaFile -> javaFile.name.endsWith(".java"))
         .collect(Collectors.toList());
         
      return !matches.isEmpty();
   })
   .forEach(file -> {
      var sources = file.listFiles()
         .stream()
         .filter(source -> source.name.endsWith(".java"))
         .collect(Collectors.toList());
         
      build(file, file.name, sources);       
   });
   
function build(path, name, sources){
   println("${path}: ${name} -> ${sources}");
   
   for(var source in sources){
      // if(source.getAbsolutePath().indexOf("${ROOT}") == -1){
      //    throw "Invalid source";
      // }
      var result = new File(source.getCanonicalPath().replace("${SOURCE}", "${DESTINATION}").replace(".java", ".snap"));
         
      result.getParentFile().mkdirs();
      System.err.println(result);
      var writer = new FileWriter(result);
      var file = new File(source).readText();
      var data = refactor(file);
      writer.write(data.source);
      writer.write("\r\n");
      writer.flush();
      writer.close();
   }
}

function refactor(source){
   return gatherImports(source);
}

function gatherImports(source){
   var builder = new StringBuilder();
   var lines = source.split("\\r?\\n");
   var imports = {};
   var type = null;
   var done = false;
   for(var line in lines){
      line = replaceTokens(line);
      if(!done){
         var importPattern = Pattern.compile("import\\s*(.*);.*");
         var typePattern = Pattern.compile(".*(class|enum|interface|trait)\\s+(\\w+).*");
         var importMatcher = importPattern.matcher(line);
         var typeMatcher = typePattern.matcher(line);
         // if(importMatcher.matches()){
         //    imports.add(importMatcher.group(1));
         // } 
         if(typeMatcher.matches()){
            type = typeMatcher.group(2);
            builder.append(line);
            builder.append("\r\n");
            done = true;
         }else {
            builder.append(line);
            builder.append("\r\n");
         }
      } else {
         line = line.replace(type+"(", "new(");
         builder.append(line);
         builder.append("\r\n");
      }
   }
   var text = builder.toString();
   return new SourceFile(imports, type, text);
}

function replaceTokens(line){
   //line = line.replace("public ", "");
   //line = line.replace("protected ", "");
   line = line.replace("protected ", "public ");
   line = line.replace("public class ", "class ");
   line = line.replace("public enum ", "enum ");
   line = line.replace("public interface ", "trait ");   
   line = line.replace("void ", "");
   line = line.replace("@Override", "override");
   line = line.replace("throws Exception", "");
   line = line.replace("throws IOException", "");
   line = line.replace("Exception e", "e");
   line = line.replace("final", "const");
   line = line.replace("implements", "with");
   line = line.replace("interface", "trait");
   line = line.replace("private class", "class");
   line = line.replace(" int ", " Integer ");
   line = line.replace(" float ", " Float ");
   line = line.replace(" double ", " Double ");
   line = line.replace(" byte ", " Byte ");
   line = line.replace(" short ", " Short ");
   line = line.replace(" long ", " Long ");
   line = line.replace(" boolean ", " Boolean ");   
   line = line.replace(" int[] ", " Integer[] ");
   line = line.replace(" float[] ", " Float[] ");
   line = line.replace(" double[] ", " Double[] ");
   line = line.replace(" byte[] ", " Byte[] ");
   line = line.replace(" short[] ", " Short[] ");
   line = line.replace(" long[] ", " Long[] ");
   line = line.replace(" boolean[] ", " Boolean[] ");   
   line = line.replace("(int ", "(Integer ");
   line = line.replace("(float ", "(Float ");
   line = line.replace("(double ", "(Double ");
   line = line.replace("(byte ", "(Byte ");
   line = line.replace("(short ", "(Short ");
   line = line.replace("(long ", "(Long ");
   line = line.replace("(boolean ", "(Boolean ");   
   line = line.replace("(int[] ", "(Integer[] ");
   line = line.replace("(float[] ", "(Float[] ");
   line = line.replace("(double[] ", "(Double[] ");
   line = line.replace("(byte[] ", "(Byte[] ");
   line = line.replace("(short[] ", "(Short[] ");
   line = line.replace("(long[] ", "(Long[] "); 
   line = line.replace("(boolean[] ", "(Boolean[] "); 
   line = regexReplace(line, "(<[A-Z][a-zA-Z0-9]+\\s*,\\s*[A-Z][a-zA-Z0-9]+>)", "");       
   line = regexReplace(line, "(<[A-Z][a-zA-Z0-9]+>)", "");      
   line = regexReplace(line, "(,\\s+|\\()([A-Z][a-zA-Z0-9]+)(\\s\\s*)([a-z][a-zA-Z0-9_]*)(,|\\)|\\s*;)", "%1%4:%3%2%5");
   line = regexReplace(line, "(public\\s+)([A-Z][a-zA-Z0-9]+)(\\s\\s*)([a-z][a-zA-Z0-9_]*)(,|\\)|\\s*;)", "%1var %4:%3%2%5");
   line = regexReplace(line, "(private\\s+)([A-Z][a-zA-Z0-9]+)(\\s\\s*)([a-z][a-zA-Z0-9_]*)(,|\\)|\\s*;)", "%1var %4:%3%2%5");
   line = regexReplace(line, "(static\\s+)([A-Z][a-zA-Z0-9]+)(\\s\\s*)([a-z][a-zA-Z0-9_]*)(,|\\)|\\s*;)", "%1var %4:%3%2%5");
   line = regexReplace(line, "(\\s+)([A-Z][a-zA-Z0-9]+)(\\s\\s*)([a-z][a-zA-Z0-9_]*)(\\s*=)", "%1var %4:%3%2%5");
   line = regexReplace(line, "(public\\s+static)(\\s+[A-Z][a-zA-Z0-9]+)(\\s.*)(\\))(\\s*\\{)", "%1%3%4:%2%5");
   line = regexReplace(line, "(public)(\\s+[A-Z][a-zA-Z0-9]+)(\\s.*)(\\))(\\s*\\{)", "%1%3%4:%2%5");
   line = regexReplace(line, "(private\\s+static)(\\s+[A-Z][a-zA-Z0-9]+)(\\s.*)(\\))(\\s*\\{)", "%1%3%4:%2%5");
   line = regexReplace(line, "(private)(\\s+[A-Z][a-zA-Z0-9]+)(\\s.*)(\\))(\\s*\\{)", "%1%3%4:%2%5"); 
   line = regexReplace(line, "(abstract)(\\s+[A-Z][a-zA-Z0-9]+)(\\s.*)(\\))(\\s*\\{)", "%1%3%4:%2%5");    
   return line;
}

function regexReplace(line, pattern, template) {
   var matcher = Pattern.compile("(.*)${pattern}(.*)").matcher(line);
   if(matcher.matches()){
      var count = matcher.groupCount();
      var result = template;
      var first = matcher.group(1);
      var last = matcher.group(count);
      for(var i = 2; i < count; i++){
         var token = matcher.group(i);
         result = result.replace("%${i-1}", token);
         result = result.replace("%{${i-1}}", token);
      }
      return regexReplace("${first}${result}${last}", pattern, template);
   }
   return line;
}

class SourceFile{
   var imports;
   var source;
   var type;
   new(imports, type, source){
      this.imports = imports;
      this.source = source;
      this.type = type;
   }
}

