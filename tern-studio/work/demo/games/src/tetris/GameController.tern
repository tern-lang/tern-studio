import awt.Point;
import awt.Point;
import awt.Point;
import awt.event.KeyEvent;
import awt.event.KeyListener;
import awt.Canvas;
import awt.Color;
import awt.Dimension;
import awt.Font;
import awt.Graphics;
import awt.Graphics2D;
import awt.Point;
import awt.event.WindowAdapter;
import awt.event.WindowEvent;
import awt.image.BufferStrategy;
import swing.JFrame;
import swing.JPanel;
import util.Arrays;
import util.Map;
import util.concurrent.ConcurrentHashMap;
import util.Random;

class GameController with KeyListener {

    const currentStates = new ConcurrentHashMap();

    new() {
        currentStates.put(KeyEvent.VK_LEFT, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_RIGHT, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_UP, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_SPACE, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_F2, Boolean.FALSE);
        currentStates.put(KeyEvent.VK_F1, Boolean.FALSE);
    }

    left() {
        return keyDown(KeyEvent.VK_LEFT);
    }

    right() {
        return keyDown(KeyEvent.VK_RIGHT);
    }

    drop() {
        return keyDown(KeyEvent.VK_SPACE);
    }

    rotate() {
        return keyDown(KeyEvent.VK_UP);
    }

    pauseGame() {
        return keyDown(KeyEvent.VK_F1);
    }

    newGame() {
        return keyDown(KeyEvent.VK_F2);
    }

    keyDown(keyCode) {
        return currentStates.put(keyCode, Boolean.FALSE);
    }

    keyPressed(keyEvent) {
        if (currentStates.containsKey(keyEvent.getKeyCode())) {
            currentStates.put(keyEvent.getKeyCode(), Boolean.TRUE);
        }
    }

    keyReleased(e) {
    }

    
    keyTyped(e) {
    }
}
