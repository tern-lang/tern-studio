import awt.Point;
import awt.image.BufferedImage;

import mario.core.animation.Animation;
import mario.core.sound.specific.MarioSoundManager22050Hz;
import mario.core.tile.GameTile;
import mario.core.tile.TileMap;
import mario.objects.base.Creature;
import mario.util.ImageManipulator;


class RedShell extends Creature {
   
   private var still: Animation;
   private var rotate: Animation;
   private var flip: Animation;
   
   private var map: TileMap;
   private var isMoving: Boolean;
   
   public new(x: Integer, y: Integer, map: TileMap, soundManager: MarioSoundManager22050Hz, isStill: Boolean):
      super(x, y, soundManager) {
      
      this.map = map;
      setIsAlwaysRelevant(true);
       
      var stay: BufferedImage = ImageManipulator.loadImage("/mario/baddies/Red_Shell_1.png");
      var rotate_1: BufferedImage = ImageManipulator.loadImage("/mario/baddies/Red_Shell_2.png");
      var rotate_2: BufferedImage = ImageManipulator.loadImage("/mario/baddies/Red_Shell_3.png");
      var rotate_3: BufferedImage = ImageManipulator.loadImage("/mario/baddies/Red_Shell_4.png");
      var flipped: BufferedImage = ImageManipulator.loadImage("/mario/baddies/Red_Shell_Flip.png");
      
      still = new Animation();
      rotate = new Animation();
      flip = new Animation(-> kill());
      
      still.addFrame(stay, 150);
      rotate.addFrame(rotate_1, 30);
      rotate.addFrame(stay, 30);
      rotate.addFrame(rotate_2, 30);
      rotate.addFrame(rotate_3, 30);
      rotate.addFrame(rotate_1, 30);
      flip.addFrame(flipped, 1200);
      flip.addFrame(flipped, 1200);
      
      wakeUp();
      isMoving = false;
      setAnimation(still);
      dx = 0;
   }
   
   public isMoving(): Boolean {
      return isMoving;
   }
   
   public xCollide(p: Point) {
      super.xCollide(p);
      var tile: GameTile = map.getTile(p.x, p.y);
      if(this.isOnScreen()) {
         soundManager.playBump();
         if(tile != null) {
            tile.doAction();
         }
      }
   }
   
   public flip() {
      setAnimation(flip);
      setIsFlipped(true);
      setIsCollidable(false);
      dy = -0.2f;
      dx = 0;
   }
   
   // if you run or jump on the shell faster, the shell moves faster.
   public jumpedOn(fromRight: Boolean, attackerSpeed: Float) {
      if(isMoving) {
         isMoving = false;
         setAnimation(still);
         dx = 0;
      } else {
         isMoving = true;
         setAnimation(rotate);
         if(fromRight) {
            if(attackerSpeed > 0.2f) {
               dx = 0.24f;
            } else if(attackerSpeed > 0.16) { 
               dx = 0.23f;
            } else {
               dx = 0.16f;
            }
         } else {
            if(attackerSpeed < -0.2f) {
               dx = -0.24f;
            } else if(attackerSpeed < -0.16) {
               dx = -0.23f;
            } else {
               dx = -0.16f;
            }
         }
      }
   }
   
}

