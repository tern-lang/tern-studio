// Object responsible for dealing with and cutting up a BufferedImage into individual pieces
// - Contains a BufferedImage spriteMap which is the image to be cut 
// - Contains an array of BufferedImages, sprites[], which store the cut images

// To use this object, create a SpriteMap with parameters image to be cut,
// the number of columns, and the number of rows. Then call getSprites() on
// the object to retrieve the array of cut images.

import awt.Graphics2D;
import awt.image.BufferedImage;
import io.File;

import imageio.ImageIO;

class SpriteMap {
   
    private var spriteMap: BufferedImage;
    private var sprites: BufferedImage[]; 
    
    public new(filename: String, c: Integer, r: Integer) {
        loadSprites(filename, c, r);
    }
    
    // returns the sprites array
   public getSprites(): BufferedImage[] {
      return sprites;
   }
    
    // loads a BufferedImage into spriteSheet and then cuts the image
    // into individual sprites based on amount of columns and rows
    private loadSprites(filename: String, c: Integer, r: Integer) {
       spriteMap = ImageManipulator.loadImage(filename);
       sprites = splitSprites(c, r);
    }
   
   // Splits a given sprite sheet into it's individual sprites and
   // returns the array containing each sprite from left to right, top to bottom.
   // This is acomplished by drawing a portion of the larger image onto a new BufferedImage
   // by calling the graphics of each new BufferedImage.
   private splitSprites(c: Integer, r: Integer): BufferedImage[] {
      var pWidth: Integer = spriteMap.getWidth() / c; // width of each sprite
      var pHeight: Integer = spriteMap.getHeight() / r; // height of each sprite
      var sprites: BufferedImage[] = new BufferedImage[c*r];
      var n: Integer = 0; // used to count sprites
      
      //int xOff = 0; if needed to adjust cutting precision
      var yOff: Integer = 0;
   
      for(var y=0; y < r; y++) {
         for(var x = 0; x < c; x++) {
            sprites[n] = new BufferedImage(pWidth, pHeight, 2);
                var g: Graphics2D = sprites[n].createGraphics(); // retrieve graphics to draw onto the BufferedImage
                // draws a portion of the spriteMap into sprites by directly drawing on the BufferedImage
                g.drawImage(spriteMap, 0, 0, pWidth, pHeight, pWidth*x, pHeight*y, pWidth*x+pWidth, pHeight*y+pHeight-yOff, null); 
                g.dispose();
                n++; // next sprite
         }
      }
      return sprites;
   } 
}

