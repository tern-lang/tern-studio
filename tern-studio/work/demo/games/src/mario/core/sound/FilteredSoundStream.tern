import io.FilterInputStream;
import io.InputStream;
import io.IOException;


/**
    The FilteredSoundStream class is a FilterInputStream that
    applies a SoundFilter to the underlying input stream.
    @see SoundFilter
*/
class FilteredSoundStream extends FilterInputStream {

    private static const REMAINING_SIZE_UNKNOWN: Integer = -1;

    private var soundFilter: SoundFilter;
    private var remainingSize: Integer;

    /**
        Creates a new FilteredSoundStream object with the
        specified InputStream and SoundFilter.
    */
    public new(input: InputStream,
        soundFilter: SoundFilter): super(input)
    {
        this.soundFilter = soundFilter;
        remainingSize = REMAINING_SIZE_UNKNOWN;
    }


    /**
        Overrides the FilterInputStream method to apply this
        filter whenever bytes are read
    */
    public read(samples: Byte[], offset: Integer, length: Integer): Integer
        
    {
        // read and filter the sound samples in the stream
        var bytesRead: Integer = super.read(samples, offset, length);
        if (bytesRead > 0) {
            soundFilter.filter(samples, offset, bytesRead);
            return bytesRead;
        }

        // if there are no remaining bytes in the sound stream,
        // check if the filter has any remaining bytes ("echoes").
        if (remainingSize == REMAINING_SIZE_UNKNOWN) {
            remainingSize = soundFilter.getRemainingSize();
            // round down to nearest multiple of 4
            // (typical frame size)
            remainingSize = remainingSize / 4 * 4;
        }
        if (remainingSize > 0) {
            length = Math.min(length, remainingSize);

            // clear the buffer
            for (var i=offset; i<offset+length; i++) {
                samples[i] = 0;
            }

            // filter the remaining bytes
            soundFilter.filter(samples, offset, length);
            remainingSize-=length;

            // return
            return length;
        }
        else {
            // end of stream
            return -1;
        }
    }

}

