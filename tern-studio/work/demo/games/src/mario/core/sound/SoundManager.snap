import io.BufferedInputStream;
import io.ByteArrayInputStream;
import io.DataInputStream;
import io.FileInputStream;
import io.IOException;
import io.InputStream;

import sound.sampled.AudioFormat;
import sound.sampled.AudioInputStream;
import sound.sampled.AudioSystem;
import sound.sampled.DataLine;
import sound.sampled.LineUnavailableException;
import sound.sampled.Mixer;
import sound.sampled.SourceDataLine;
import sound.sampled.UnsupportedAudioFileException;

import mario.util.Digest;

/**
    The SoundManager class manages sound playback. The
    SoundManager is a ThreadPool, with each thread playing back
    one sound at a time. This allows the SoundManager to
    easily limit the number of simultaneous sounds being played.
    
    <p>Possible ideas to extend this class:<ul>
    <li>add a setMasterVolume() method, which uses Controls to
        set the volume for each line.
    <li>don't play a sound if more than, say, 500ms has passed
        since the request to play
    </ul>
*/

class SoundManager extends ThreadPool {

    private var playbackFormat: AudioFormat;
    private var localLine: ThreadLocal;
    private var localBuffer: ThreadLocal;
    private var pausedLock: Object;
    private var paused: Boolean = false;

    /**
        Creates a new SoundManager using the maximum number of
        simultaneous sounds.
    */
    public new(playbackFormat: AudioFormat):
        this(playbackFormat, getMaxSimultaneousSounds(playbackFormat)) {
    }

    /**
        Creates a new SoundManager with the specified maximum
        number of simultaneous sounds.
    */
    
    public new(playbackFormat: AudioFormat, maxSimultaneousSounds: Integer): 
        super(Math.min(maxSimultaneousSounds, getMaxSimultaneousSounds(playbackFormat))) 
   {
        this.playbackFormat = playbackFormat;
        localLine = new ThreadLocal();
        localBuffer = new ThreadLocal();
        pausedLock = new Object();
        
        // notify threads in pool it's ok to start
        synchronized (this) {
            notifyAll();
        }
    }

    /**
        Gets the maximum number of simultaneous sounds with the
        specified AudioFormat that the default mixer can play.
    */
    public static getMaxSimultaneousSounds(playbackFormat: AudioFormat): Integer {
        var lineInfo: DataLine.Info = new DataLine.Info( SourceDataLine.class, playbackFormat);
        var mixer: Mixer = AudioSystem.getMixer(null);
        var maxLines: Integer = mixer.getMaxLines(lineInfo);
        if (maxLines == AudioSystem.NOT_SPECIFIED) {
            maxLines = 5;
        }
        return maxLines;

    }

    /**
        Does any clean up before closing.
    */
    public cleanUp() {
        // signal to unpause
        setPaused(false);

        // close the mixer (stops any running sounds)
        var mixer: Mixer = AudioSystem.getMixer(null);
        if (mixer.isOpen()) {
            mixer.close();
        }
    }


    public close() {
        cleanUp();
        super.close();
    }

    public join() {
        cleanUp();
        super.join();
    }

    /**
        Sets the paused state. Sounds may not pause immediately.
    */
    public setPaused(paused: Boolean) {
        if (this.paused != paused) {
            synchronized (pausedLock) {
                this.paused = paused;
                if (!paused) {
                    // restart sounds
                    pausedLock.notifyAll();
                }
            }
        }
    }

    /**
        Returns the paused state.
    */
    public isPaused(): Boolean {
        return paused;
    }

    /**
        Loads a Sound from the file system. Returns null if an
        error occurs.
    */
    public getSound(filename: String): Sound {
        var audioStream: AudioInputStream = getAudioInputStream(filename);
    
        if (audioStream == null) {
            return null;
        }
        // get the number of bytes to read
        var length: Integer = audioStream.getFrameLength() * audioStream.getFormat().getFrameSize();

        // read the entire stream
        var samples: Byte[] = new Byte[length];
        var is: DataInputStream = new DataInputStream(audioStream);
        try {
            is.readFully(samples);
            is.close();
        }
        catch (e: IOException) {
            e.printStackTrace();
        }
        // return the samples
        return new Sound(filename, samples);
    }

    /**
        Creates an AudioInputStream from a sound from the file
        system.
    */
    public getAudioInputStream(filename: String): AudioInputStream {
        try {
            return getAudioInputStream(getResource(filename));
        }
        catch (e: IOException) {
            e.printStackTrace();
            return null;
        }
    }

    /**
        Creates an AudioInputStream from a sound from an input
        stream
    */
    public getAudioInputStream(is: InputStream): AudioInputStream {

        try {
            if (!is.markSupported()) {
                is = new BufferedInputStream(is);
            }
            // open the source stream
            var source: AudioInputStream = AudioSystem.getAudioInputStream(is);

            // convert to playback format
            return AudioSystem.getAudioInputStream(playbackFormat, source);
        }
        catch (e: UnsupportedAudioFileException) {
            e.printStackTrace();
        }
        catch (e: IOException) {
            e.printStackTrace();
        }
        catch (e: IllegalArgumentException) {
            e.printStackTrace();
        }

        return null;
    }
    
    private getResource(filename: String) {
      return SoundManager.class.getModule()
               .getContext().getManager().getInputStream(filename);
    }

    /**
        Plays a sound. This method returns immediately.
    */
    public play(sound: Sound): InputStream {
        return play(sound, null, false);
    }

    /**
        Plays a sound with an optional SoundFilter, and optionally
        looping. This method returns immediately.
    */
    public play(sound: Sound, filter: SoundFilter, loopFlag: Boolean): InputStream {
        var is: InputStream;
        if (sound != null) {
            if (loopFlag) {
                is = new LoopingByteInputStream(sound.getSamples());
            }
            else {
                is = new ByteArrayInputStream(sound.getSamples());
            }

            return play(is, filter);
        }
        return null;
    }

    /**
        Plays a sound from an InputStream. This method
        returns immediately.
    */
    public play(is: InputStream): InputStream {
        return play(is, null);
    }

    /**
        Plays a sound from an InputStream with an optional
        sound filter. This method returns immediately.
    */
    public play(is: InputStream, filter: SoundFilter): InputStream {
        if (is != null) {
            if (filter != null) {
                is = new FilteredSoundStream(is, filter);
            }
            runTask(new SoundPlayer(this, is));
        }
        return is;
    }

    /**
        Signals that a PooledThread has started. Creates the
        Thread's line and buffer.
    */
    public threadStarted() {
        // wait for the SoundManager constructor to finish
        synchronized (this) {
            try {
                wait();
            }
            catch (e: InterruptedException) { }
        }

        // use a short, 100ms (1/10th sec) buffer for filters that
        // change in real-time
        var bufferSize: Integer = playbackFormat.getFrameSize() * Math.round(playbackFormat.getSampleRate() / 10);

        // create, open, and start the line
        var line: SourceDataLine;
        var lineInfo: DataLine.Info = new DataLine.Info(SourceDataLine.class, playbackFormat);

        try {
            line = AudioSystem.getLine(lineInfo);
            line.open(playbackFormat, bufferSize);
        }
        catch (e: LineUnavailableException) {
            // the line is unavailable - signal to end this thread
            Thread.currentThread().interrupt();
            return;
        }

        line.start();

        // create the buffer
        var buffer: Byte[] = new Byte[bufferSize];

        // set this thread's locals
        localLine.set(line);
        localBuffer.set(buffer);
    }

    /**
        Signals that a PooledThread has stopped. Drains and
        closes the Thread's Line.
    */
    public threadStopped() {
        var line: SourceDataLine = localLine.get();
        if (line != null) {
            line.drain();
            line.close();
        }
    }

    /**
        The SoundPlayer class is a task for the PooledThreads to
        run. It receives the threads's Line and Byte buffer from
        the ThreadLocal variables and plays a sound from an
        InputStream.
        <p>This class only works when called from a PooledThread.
    */
    class SoundPlayer with Runnable {

        private var manager: SoundManager;
        private var source: InputStream;

        public new(manager: SoundManager, source: InputStream) {
            this.source = source;
            this.manager = manager;
        }

        public run() {
            // get line and buffer from ThreadLocals
            var line: SourceDataLine = manager.localLine.get();
            var buffer: Byte[] = manager.localBuffer.get();
            if (line == null || buffer == null) {
                // the line is unavailable
                return;
            }

            // copy data to the line
            try {
                var numBytesRead: Integer = 0;
                while (numBytesRead != -1) {
                    // if paused, wait until unpaused
                    synchronized (manager.pausedLock) {
                        if (manager.paused) {
                            try {
                                manager.pausedLock.wait();
                            }
                            catch (e: InterruptedException) {
                                return;
                            }
                        }
                    }
                    // copy data
                    numBytesRead =  source.read(buffer, 0, buffer.length);
                    if (numBytesRead != -1) {
                        line.write(buffer, 0, numBytesRead);
                    }
                }
            }
            catch (e: IOException) {
                e.printStackTrace();
            }

        }
    }
}

