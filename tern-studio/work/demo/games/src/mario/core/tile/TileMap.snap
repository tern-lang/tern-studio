import awt.image.BufferedImage;
import util.ArrayList;
import util.LinkedList;
import util.List;

import mario.objects.base.Creature;
import mario.objects.creatures.Platform;
import mario.objects.mario.Mario;
import mario.objects.tiles.SlopedTile;

/**
 * The TileMap class contains all data for a tile-based map. 
 */

class TileMap {
   
   // fields
   private var tiles: GameTile[][]; 
   private var platforms: List; // List of Platforms on the current screen.
   private var creatures: List; // Starts containing every Creature and decreases as they die.
   private var relevantCreatures: List; // List of relevant Creatures to the current frame.
                                   // This is a subset of creatures.
   private var creaturesToAdd: List; // List of Creatures to be added inbetween frames.
   private var animatedTiles: List;
   private var slopedTiles: List;
   private var player: Mario; 
   private var height: Integer;
   private var width: Integer;

   /**
    * Constructs a new TileMap with the specified width and height (in number of tiles)
    * of the map.
    */
   public new(width: Integer, height: Integer) {
      this.tiles = new GameTile[width][height];
      this.creatures = [];
      this.relevantCreatures = [];
      this.creaturesToAdd = [];
      this.platforms = [];
      this.animatedTiles = [];
      this.slopedTiles = [];
      this.width = width;
      this.height = height;
   }
   
   public getTiles(): GameTile[][] {
      return tiles;
   }
   
   /**
    * @return the width of this TileMap in GameTiles.
    */
   public getWidth(): Integer {
      return width;
   }
   
   /**
    * @return the height of this TileMap in GameTiles.
    */
   public getHeight(): Integer {
      return height;
   }
   
   /**
    * @return the GameTiles at tiles[x][y]. If x or y is out of bounds
    * or if tiles[x][y] == null, null is returned.
    */
   public getTile(x: Integer, y: Integer): GameTile {
      if (x < 0 || x >= width || y < 0 || y >= height) {
         return null;
      } else {
         if(tiles[x][y] != null) {
            return tiles[x][y];
         } else {
            return null;
         }
      }
   }
   
   /**
    * @return the image of the GameTiles at tiles[x][y]. If x or y is out of bounds
    * or if tiles[x][y] == null, null is returned.
    */
   public getImage(x: Integer, y: Integer): BufferedImage {
      if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) {
         return null;
      } else {
         if(tiles[x][y] != null) {
              return tiles[x][y].getImage();
         } else {
            return null;
         }
      }
   }
   
   /**
    * Sets tiles[x][y] equal to parameter tile.
    * This is used to set animated GameTiles.
    */
   public setTile(x: Integer, y: Integer, tile: GameTile) {
      tiles[x][y] = tile;
   }
   
   /**
    * Sets tiles[x][y] equal to a new Tile with no animation and the constant Image img.
    * This is used to set non-animated GameTiles.
    */
   public setTile(x: Integer, y: Integer, img: BufferedImage) {
      tiles[x][y] = new GameTile(x, y, null, img);
   }
   
   /**
    * @return the player sprite.
    */
   public getPlayer(): Mario {
      return player;
   }
   
   /**
    * Sets the player sprite for this map.
    */
   public setPlayer(player: Mario) {
      this.player = player;
   }
   
   
   /**
    * @return a List containing every Platform in this map.
    */
   public platforms(): List {
      return platforms;
   }
   
   /**
    * @return a List containing every Creature in this map.
    */
   public creatures(): List {
      return creatures;
   }
   
   /**
    * @return a List containing Creatures to add to this map after the next game update.
    */
   public creaturesToAdd(): List {
      return creaturesToAdd;
   }
   
   /**
    * @return a List containing animated Tile in this map.
    */
   public animatedTiles(): List {
      return animatedTiles;
   }
   
   /**
    * @return a List containing every SlopedTile in this map.
    */
   public slopedTiles(): List {
      return slopedTiles;
   }
   
   /**
    * @return a List containing every relevant Creature in this map. 
    * 
    * A 'relevant Creature' is a Creature that the current frame cares about. 
    * This is generally creatures on screen or creatures that need to be updated globally. 
    */
   public relevantCreatures(): List {
      return relevantCreatures;
   }
}

