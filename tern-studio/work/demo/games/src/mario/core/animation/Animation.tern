import awt.image.BufferedImage;
import util.ArrayList;

/**
 * An object used to store an animation!
 * 
 * An Animation object consists of many frames, each which occur for a given amount of time.
 * To play the animation, we update the frame by 'adding time'. The time is checked
 * vs the length of each frame. If current time > end time that the frame should
 * occupy, we update to the next frame. When the total duration of the animation is reached,
 * we go back to the first frame. This way we are continually moving through the frames!
 * When an animation is finished, it calls endOfAnimationAction(). This way you can perform
 * certain tasks once an animation is finished. 
 *
 */

class Animation {
   
   // fields
   private var frames: List;
   private var currFrameIndex: Integer = 0; // index of current frame
   private var animTime: Long = 0; // current time in animation
   private var totalDuration: Long = 0; // length of entire animation
   private var defaultAnimLength: Long = 0;
   private var endOfAnimation: Runnable;
   
   /**
    * Constructs a new Animation object with no frames.
    */
   public new() {
      frames = [];
      totalDuration = 0;
      defaultAnimLength = 0;
      start();
   }
   
   /**
    * Constructs a new Animation object with no frames and with the
    * specified default animation length;
    */
   public new(defaultAnimLength: Long) {
      frames = [];
      totalDuration = 0;
      this.defaultAnimLength = defaultAnimLength;
      start();
   }
   
      /**
    * Constructs a new Animation object with a termination task.
    */
   public new(endOfAnimation: Runnable) {
      frames = [];
      totalDuration = 0;
      this.defaultAnimLength = defaultAnimLength;
      this.endOfAnimation = endOfAnimation;
      start();
   }
   
   /**
    * Sets the default animation length (DAL);
    * @return this Animation with the default animation length changed.
    */
   public setDAL(defaultAnimLength: Long): Animation {
      this.defaultAnimLength = defaultAnimLength;
      return this;
   }
   
   /**
    * Add a frame to the animation with the default animation length milliseconds.
    * @modifies defaultAnimLength == duration.
    * @returns this Animation with the added frame.
    */
   public addFrame(image: BufferedImage): Animation {
      totalDuration += defaultAnimLength;
      frames.add({'image': image, 'endTime': totalDuration});
      return this;
   }
   
   /**
    * Add a frame to the animation with a given duration in milliseconds.
    * @modifies defaultAnimLength == duration.
    * @returns this Animation with the added frame.
    */
   public addFrame(image: BufferedImage, duration: Long): Animation {
      totalDuration += duration;
      frames.add({'image': image, 'endTime': totalDuration});
      defaultAnimLength = duration;
      return this;
   }
   
   /**
    * Starts this animation.
    */
   public start() {
      animTime = 0;
      currFrameIndex = 0;
   }
   
   /**
    * @return the height of the current animation in pixels.
    */
   public getHeight(): Integer {
      return getFrame(currFrameIndex).image.getHeight(null);
   }
   
   /**
    * @return the width of the current animation in pixels.
    */
   public getWidth(): Integer {
      return getFrame(currFrameIndex).image.getWidth(null);
   }
   
   /**
    * Updates the animation by a give amount of time.
    * The frames are updated accordingly to the internal timer of this animation.
    */
    public update(elapsedTime: Long) {
       
        if (frames.size() > 1) { // must have at least 2 frames to animate
            animTime += elapsedTime; // animation time increase here

            if (animTime >= totalDuration) { //reset animation
               animTime = 0; 
                currFrameIndex = 0; // back to first frame
                endOfAnimationAction();
                
            }

            if(animTime > getFrame(currFrameIndex).endTime) {
                currFrameIndex++;
            }
        }
    }
    
    /**
     * Override this method to add an action when animation finishes its entire duration.
     */
    public endOfAnimationAction() { 
      if(endOfAnimation != null){
         endOfAnimation.run();
      }
    }

    /**
     * @return an array of the images in this animation.
     * note: this method is never called.
     */
    private getImages() {
       if(frames.size() == 0) {
          return null;
       } else {
          return frames.toArray();
       }
    }
    
    /**
     * @return the Image of the current frame of this animation.
     */
    public getImage(): BufferedImage {
        if (frames.size() == 0) {
            return null;
        }
        else {
            return getFrame(currFrameIndex).image;
        }
    }

    /**
     * @return the AnimFrame of the given frame.
     * This is used in update to get the end time of the current frame.
     */
    private getFrame(i: Integer) {
        return frames[i];
    }

}

