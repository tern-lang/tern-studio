
import org.snapscript.android.game.FrameThread;
import android.graphics.Point;
import android.util.Log;

class Snake {

   /**
      * Number of speed steps.
      * Speed will be increased in equal steps until full speed is not reached.
      */
   static const SPEED_STEPS = 30;

   var cells;
   var previousTail;
   var radius;

   var finalMoveDelay = 0.0;
   var moveDelay = 0.0;
   var moveDelayInc = 0.0;
   var speedNeedsToBeIncremented = false;

   // clock stuff
   var timeSlowed = false;
   var savedDelay = 0.0;
   var clockCounter = 0;

   // shield stuff
   var hasShield = false;

   var direction;
   var life;
   var score;

   var useBitmaps = false;
   var rate = 0;

   new(radius, useBitmaps, rate) {
         this.radius = radius;
         this.rate = rate;

         // clear cells container
         cells = new LinkedList();

         cells.addLast(new Cell(3, 2, radius));
         cells.addLast(new Cell(2, 2, radius));
         cells.addLast(new Cell(1, 2, radius));

         var initialMoveDelay = rate / 5;
         var moveDelay = rate / 4;
         
         finalMoveDelay = initialMoveDelay / 3;
         moveDelayInc = (initialMoveDelay - finalMoveDelay) / SPEED_STEPS;
         speedNeedsToBeIncremented = true; // hack to slow it down

         direction = Direction.RIGHT;
         life = 100;
         score = 0;

         this.useBitmaps = useBitmaps;
   }

   move() {
         // get snake head location
         var head = getHead();

         // add a new cell in front of the head in the current direction
         switch (direction) {
            case Direction.UP:
               cells.addFirst(new Cell(head.x, head.y - 1, radius));
               break;
            case Direction.DOWN:
               cells.addFirst(new Cell(head.x, head.y + 1, radius));
               break;
            case Direction.LEFT:
               cells.addFirst(new Cell(head.x - 1, head.y, radius));
               break;
            case Direction.RIGHT:
               cells.addFirst(new Cell(head.x + 1, head.y, radius));
               break;
         }

         // remove last cell and temporarily save it
         previousTail = cells.removeLast();

         checkIfAteItself();
   }

   checkIfAteItself() {
         var head = getHead();

         for (var cell in cells)
            if (cell != head && (cell.x == head.x && cell.y == head.y))
               if (hasShield()) {
                     setHasShield(false);
                     println("Shield lost");
               } else
                     kill();
   }

   ate(element) {
         var head = getHead();
         return element.x == head.x && element.y == head.y;
   }

   incSize() {
         cells.addLast(new Cell(previousTail));
   }

   getCells() {
         return cells;
   }

   getHead() {
         return cells.getFirst();
   }

   getDirection() {
         return direction;
   }

   setDirection(direction) {
         this.direction = direction;
   }

   isMovingHorizontally() {
         return direction.isHorizontal();
   }

   isMovingVertically() {
         return !isMovingHorizontally();
   }

   getMoveDelay() {
         return Math.round(moveDelay);
   }

   speedNeedsToBeIncremented() {
         return speedNeedsToBeIncremented;
   }

   enableSpeedNeedsToBeIncrementedFlag() {
         speedNeedsToBeIncremented = true;
   }

   increaseSpeed() {
         if (!timeSlowed) {
            moveDelay -= moveDelayInc;

            if (moveDelay < finalMoveDelay)
               moveDelay = finalMoveDelay;

            speedNeedsToBeIncremented = false;
         }
   }

   startClock() {
         if (!timeSlowed)
            savedDelay = moveDelay;
         moveDelay = rate / 5;

         clockCounter = Clock.getEffectDuration();
         timeSlowed = true;

         println("Time slowed down");
   }

   updateClock() {
         if (timeSlowed) {
            clockCounter--;

            if (clockCounter == 0) {
               timeSlowed = false;
               moveDelay = savedDelay;
               println("Time resumed to normal speed");
            }
         }
   }

   getSlowedTimeRemaining() {
         return clockCounter;
   }

   setHasShield(hasShield) {
         this.hasShield = hasShield;
   }

   hasShield() {
         return hasShield;
   }

   isDead() {
         return life == 0;
   }

   kill() {
         life = 0;
   }

   revive() {
         life = 100;
   }

   getScore() {
         return score;
   }

   incScore(score) {
         println("Current score: " + this.score + " + " + score);
         this.score += score;
   }

   isUsingBitmaps() {
         return useBitmaps;
   }
}


