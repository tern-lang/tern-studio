
import org.snapscript.android.game.Frame;
import org.snapscript.android.game.FrameThread;
import org.snapscript.android.game.Panel;
import org.snapscript.android.game.R;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.SurfaceHolder;

class GamePanel with Panel {

   static const RED_APPLE_PERCENTAGE = 20;
   static const YELLOW_APPLE_PERCENTAGE = 5;
   static const CLOCK_PERCENTAGE = 2;
   static const SHIELD_PERCENTAGE = 1;
   static const IMAGE_SIZE = "medium";

   var context;
   var thread;
   var paint;
   var tickCounter = 0;
   var directionsQueue = 0;
   var fieldDimensions;
   var cellsDiameter = 0;
   var cellsRadius = 0;
   var snake;
   var apple;
   var specialElement;
   var highScoreKey = "highScore";
   var highScore = 0;
   var highScoreUpdated = false;

   var borderCell, snakeCell, snakeShieldedCell;
   var greenAppleCell, redAppleCell, yellowAppleCell;
   var clockCell, shieldCell;
   var border;
   var rate;
   
   new(context) {
      // save context (necessary to save high score)
      this.context = context;

      // create paint
      this.paint = new Paint();

      // create directions queue
      this.directionsQueue = new LinkedList();

      // load bitmaps
      loadBitmaps();
   }

   override onChanged(frame, i, i2, i3) {
   }

   override onDestroyed(frame) {
      println("Surface is being destroyed");
   }

   loadBitmaps() {
      borderCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/border_cell.png");
      snakeCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/snake_cell.png");
      snakeShieldedCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/snake_shielded_cell.png");

      greenAppleCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/green_apple_cell.png");
      redAppleCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/red_apple_cell.png");
      yellowAppleCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/yellow_apple_cell.png");

      clockCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/clock_cell.png");
      shieldCell = ImageStore.loadImage("/snake/${IMAGE_SIZE}/shield_cell.png");
   }

   /**
      * Game pause method.
      */
   override onPause(frame) {
     
   }
   
   /**
      * Game initialize method.
      */
   override onStart(frame, rate) {
      // reset tick counter
      tickCounter = 0;

      // reset directions queue
      directionsQueue.clear();

      println("View width: " + frame.getWidth());
      println("View height: " + frame.getHeight());

      // initialize game board and game elements radius
      var fieldWidth = 20;
      cellsDiameter = frame.getWidth() / fieldWidth;
      cellsRadius = cellsDiameter / 2;
      var fieldHeight = frame.getHeight() / cellsDiameter;
      fieldDimensions = new Point(fieldWidth, fieldHeight);

      println("Cell Diameter: " + cellsDiameter);
      println("Field Dimensions: " + fieldWidth + "x" + fieldHeight);

      // create snake
      this.snake = new Snake(cellsRadius, (borderCell != null && snakeCell != null && greenAppleCell != null), rate);
      this.rate = rate;
      
      // create apple
      generateNewApple();

      // reset highScoreUpdated flag
      highScoreUpdated = false;

      // load high score
      var sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
      highScore = sharedPref.getLong(highScoreKey, 0);
   }

   /**
      * Game update method.
      */
   override onUpdate(frame, rate) {
      // increment tick counter
      tickCounter++;

      // update clock counter
      if (tickCounter % rate == 0)
         snake.updateClock();

      var moveDelay = snake.getMoveDelay();
      
      // update snake
      if (moveDelay == 0 || tickCounter % moveDelay == 0) {
         // increase snake speed if needed
         if (snake.speedNeedsToBeIncremented())
            snake.increaseSpeed();

         // set snake direction
         var done = false;
         while (!directionsQueue.isEmpty() && !done) {
            var direction = directionsQueue.poll();

            switch (direction) {
                  case Direction.UP:
                  case Direction.DOWN:
                     if (snake.isMovingHorizontally()) {
                        snake.setDirection(direction);
                        println("Consumed direction " + direction.getString() + " from queue");
                        done = true;
                     }
                     break;
                  case Direction.RIGHT:
                  case Direction.LEFT:
                     if (snake.isMovingVertically()) {
                        snake.setDirection(direction);
                        println("Consumed direction " + direction.getString() + " from queue");
                        done = true;
                     }
                     break;
            }
         }

         // check if snake hit any wall
         checkIfSnakeHitAnyWall();

         // if snake is alive
         if (!snake.isDead()) {
            // move the snake
            snake.move();

            // check if snake ate apple
            checkIfSnakeAteApple();

            // update special element
            updateSpecialElement();
         } else {
            // if high score hasn't been updated
            if (!highScoreUpdated) {
                  println("Updating high score");

                  saveHighScore();
                  highScoreUpdated = true;
            }
         }
      }
   }

   override onClick(frame, x, y) {
      // if snake is dead
      if (snake.isDead()) {
         println("Starting new game");
         onStart(frame, rate);
      } else {
         var direction = directionsQueue.isEmpty() ? snake.getDirection() : directionsQueue.getLast();

         if (direction.isHorizontal()) {
            // if snake is moving horizontally

            // if touch anywhere above of the snake head
            if (y < snake.getHead().y * cellsDiameter) {
                  // move snake up
                  direction = Direction.UP;
                  println("Added direction UP to queue");
            } else {
                  // move snake down
                  direction = Direction.DOWN;
                  println("Added direction DOWN to queue");
            }
         } else {
            // if snake is moving vertically

            // if touch anywhere left of the snake head
            if (x < snake.getHead().x * cellsDiameter) {
                  // move snake left
                  direction = Direction.LEFT;
                  println("Added direction LEFT to queue");
            } else {
                  // move snake right
                  direction = Direction.RIGHT;
                  println("Added direction RIGHT to queue");
            }
         }

         // add direction to queue of directions to be applied to the snake
         directionsQueue.add(direction);
      }
   }

   override onBottomToTopSwipe(frame) {
      if (snake.getDirection().isHorizontal())
         snake.setDirection(Direction.UP);
   }

   override onTopToBottomSwipe(frame) {
      if (snake.getDirection().isHorizontal())
         snake.setDirection(Direction.DOWN);
   }

   override onLeftToRightSwipe(frame) {
      if (snake.getDirection().isVertical())
         snake.setDirection(Direction.RIGHT);
   }

   override onRightToLeftSwipe(frame) {
      if (snake.getDirection().isVertical())
         snake.setDirection(Direction.LEFT);
   }

   generateNewApple() {
      var random = new Random();
      var num = random.nextInt(100) + 1;

      if (num <= RED_APPLE_PERCENTAGE)
         apple = new RedApple(fieldDimensions, snake, cellsRadius);
      else if (RED_APPLE_PERCENTAGE < num && num <= RED_APPLE_PERCENTAGE + YELLOW_APPLE_PERCENTAGE)
         apple = new YellowApple(fieldDimensions, snake, cellsRadius);
      else
         apple = new GreenApple(fieldDimensions, snake, cellsRadius);
   }

   updateSpecialElement() {
      // if no special element exists
      if (specialElement == null) {
         var random = new Random();
         var num = random.nextInt(100) + 1;

         if (num <= CLOCK_PERCENTAGE)
            specialElement = new Clock(fieldDimensions, snake, cellsRadius);
         else if (CLOCK_PERCENTAGE < num && num <= CLOCK_PERCENTAGE + SHIELD_PERCENTAGE)
            specialElement = new Shield(fieldDimensions, snake, cellsRadius);
      } else if (snake.ate(specialElement)) {
         switch (specialElement.getType()) {
            case GameElementType.CLOCK:
                  snake.startClock();
                  println("Snake got the clock");
                  break;
            case GameElementType.SHIELD:
                  snake.setHasShield(true);
                  println("Snake got the shield");
                  break;
         }

         // destroy element
         specialElement = null;
      } else {
         // inc duration counter
         specialElement.incCounter();

         // destroy element if it has expired
         if (specialElement.hasExpired())
            specialElement = null;
      }
   }

   checkIfSnakeHitAnyWall() {
      // get snake head location
      var head = snake.getHead();

      switch (snake.getDirection()) {
         case Direction.UP:
            if (head.y <= 1)
                  snake.kill();
            break;
         case Direction.DOWN:
            if (head.y >= fieldDimensions.y - 2)
                  snake.kill();
            break;
         case Direction.LEFT:
            if (head.x <= 1)
                  snake.kill();
            break;
         case Direction.RIGHT:
            if (head.x >= fieldDimensions.x - 2)
                  snake.kill();
            break;
      }

      if (snake.isDead() && snake.hasShield()) {
         snake.setHasShield(false);
         snake.revive();

         println("Shield lost");
      }
   }

   checkIfSnakeAteApple() {
      if (snake.ate(apple)) {
         println("Apple has been eaten");

         // increase snake size
         snake.incSize();

         // set speed needs to be incremented flag
         snake.enableSpeedNeedsToBeIncrementedFlag();

         // update score
         snake.incScore(apple.getScore());

         // update high score
         if (snake.getScore() > highScore)
            highScore = snake.getScore();

         // generate new apple
         generateNewApple();
      }
   }

   saveHighScore() {
      var sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
      var editor = sharedPref.edit();
      editor.putLong(highScoreKey, highScore);
      editor.commit();
   }

   /**
      * Game draw method.
      */
   override onRender(frame, canvas) {
      // draw background
      drawBackground(frame, canvas);

      // draw border
      drawBoardBorder(frame, canvas);
      
      // draw apple
      drawApple(frame, canvas);

      // draw special element
      drawSpecialElement(frame, canvas);

      // draw snake
      drawSnake(frame, canvas);

      // display score
      drawScore(frame, canvas);

      // if snake is dead
      if (snake.isDead())
         drawGameOverMessage(frame, canvas);
   }
   
   drawBoardBorder(frame, canvas) {
      if(border == null) {
         var width = frame.getWidth();
         var height = frame.getHeight();
         var bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888); // this creates a MUTABLE bitmap
         var wrapper = new Canvas(bitmap);
         
         drawBoardLimits(frame, wrapper);
         border = bitmap; // cache background
      }
      canvas.drawBitmap(border, 0, 0, paint); // draw cache image
   }

   drawBackground(frame, canvas) {
      var bgColor = snake.isDead() ? Color.rgb(204, 0, 0) : Color.rgb(68, 158, 44);
      paint.setColor(bgColor);

      canvas.drawRect(0, 0, fieldDimensions.x * cellsDiameter, fieldDimensions.y * cellsDiameter, paint);
   }

   drawCell(canvas, bitmap, x, y) {
      var src = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());

      var x1 = x * cellsDiameter;
      var y1 = y * cellsDiameter;
      var dst = new Rect(x1, y1, x1 + cellsDiameter, y1 + cellsDiameter);

      // draw bitmap
      canvas.drawBitmap(bitmap, src, dst, paint);
   }

   drawBoardLimits(frame, canvas) {
      paint.setColor(Color.DKGRAY);
      
      // draw top  and bottom border
      for (var i = 0; i < fieldDimensions.x; i++) {
         drawCell(canvas, borderCell, i, 0);
         drawCell(canvas, borderCell, i, fieldDimensions.y - 1);
      }

      // fill first and last column
      for (var i = 0; i < fieldDimensions.y; i++) {
         drawCell(canvas, borderCell, 0, i);
         drawCell(canvas, borderCell, fieldDimensions.x - 1, i);
      }
   }

   drawApple(frame, canvas) {
      var bitmap;

      switch (apple.getColor()) {
         case Color.GREEN:
            bitmap = greenAppleCell;
            break;
         case Color.RED:
            bitmap = redAppleCell;
            break;
         case Color.YELLOW:
            bitmap = yellowAppleCell;
            break;
         default:
            bitmap = borderCell;
            break;
      }

      drawCell(canvas, bitmap, apple.x, apple.y);
   }

   drawSpecialElement(frame, canvas) {
      if (specialElement != null) {
         if (specialElement.getType() == GameElementType.CLOCK)
            // draw clock
            drawCell(canvas, clockCell, specialElement.x, specialElement.y);
         else if (specialElement.getType() == GameElementType.SHIELD)
            // draw shield
            drawCell(canvas, shieldCell, specialElement.x, specialElement.y);
      }
   }

   drawSnake(frame, canvas) {
      if (snake.isUsingBitmaps()) {
         for (var cell in snake.getCells())
            if (snake.hasShield())
                  drawCell(canvas, snakeShieldedCell, cell.x, cell.y);
            else
                  drawCell(canvas, snakeCell, cell.x, cell.y);
      } else {
         paint.setColor(Color.BLACK);

         for (var cell in snake.getCells()) {
            var x = cellsRadius + cell.x * cellsDiameter;
            var y = cellsRadius + cell.y * cellsDiameter;
            canvas.drawCircle(x, y, cellsRadius, paint);
         }
      }
   }

   drawScore(frame, canvas) {
      var text = [];
      if (snake.getSlowedTimeRemaining() == 0)
         text = ["Best: " + highScore,
                  "Score: " + snake.getScore()];
      else
         text = ["Best: " + highScore,
                  "Score: " + snake.getScore(),
                  "Clock: " + snake.getSlowedTimeRemaining()];

      var textSize = 3 * cellsDiameter / 2;
      var leftPadding = cellsDiameter + textSize / 4;
      var topPadding = cellsDiameter;

      for (var i = 0; i < text.length; i++) {
         paint.setTextSize(textSize);

         if (snake.isDead())
            paint.setColor(Color.YELLOW);
         else
            paint.setColor(Color.rgb(150, 0, 150));

         canvas.drawText(text[i], leftPadding, topPadding + (i + 1) * textSize, paint);
      }
   }

   drawGameOverMessage(frame, canvas) {
      var text = ["Game Over.", "Click to restart."];

      var textSize = 3 * cellsDiameter / 2;
      var leftPadding = cellsDiameter + textSize / 4;
      var topPadding = frame.getHeight() / 2 - text.length * textSize;

      for (var i = 0; i < text.length; i++) {
         paint.setTextSize(textSize);
         paint.setColor(Color.YELLOW);
         canvas.drawText(text[i], leftPadding, topPadding + (i + 1) * textSize, paint);
      }
   }
}



