class ExtendClassLoader extends URLClassLoader {

   const sequence = [];
   const list;

   new(list: URL[]) : super(list) {
      println("ExtendClassLoader::new(${list})");
      this.list = list;
   }
   
   override loadClass(name: String, resolve: Boolean): Class {
      sequence.add("ExtendClassLoader::loadClass");
      println("ExtendClassLoader::loadClass(${name}, ${resolve})");
      dump();
      return super.loadClass(name, resolve);
   }
}

class ExtendExtendClassLoader extends ExtendClassLoader {

   new(list: URL[]): super(list) {
      println("ExtendExtendClassLoader::new(${list})");
   }
   
   override loadClass(name: String, resolve: Boolean): Class {
      sequence.add("ExtendExtendClassLoader::loadClass");
      println("ExtendExtendClassLoader::loadClass(${name}, ${resolve})");
      return super.loadClass(name, resolve);
   }
   
   dump() {
      sequence.add("ExtendExtendClassLoader::dump");
      println("ExtendExtendClassLoader::dump");
   }
}

class ExtendOutputStream extends FilterOutputStream {
   new(out):super(out){
      println("${out}");
   }
   getOutputStream() {
      return out;
   }
}

class ExtendClassTest {

   @Test
   testClassExtension() {
      var loader = new ExtendExtendClassLoader([]);
      var type = loader.loadClass("java.lang.String");
      
      assert type == String.class.type;
      assert loader.list.length == 0;
      assert loader.sequence[0] == "ExtendExtendClassLoader::loadClass";
      assert loader.sequence[1] == "ExtendClassLoader::loadClass";
      assert loader.sequence[2] == "ExtendExtendClassLoader::dump";
   }
   
   @Test
   testFieldsInExtendedClass() {
      var buffer = new ByteArrayOutputStream();
      var stream = new ExtendOutputStream(buffer);
      var printer = new PrintStream(stream);
      
      assert buffer == stream.getOutputStream();
      
      printer.print("foo");
      printer.close();
      
      assert "foo" == buffer.toString();
   }
}
