
import org.snapscript.android.game.Frame;
import org.snapscript.android.game.FrameThread;
import org.snapscript.android.game.Panel;
import org.snapscript.android.game.R;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.Color;

class GamePanel with Panel {

   static const Y_DOWN_ACCELERATE = 0.2f;
   static const Y_JUMP_THRUST = 0.7f;
   
   var context;
   var gameStatus;
   var random;
   var state;
   var scores;
   var bird;
   var score = 0;
   var speedX = 0.0f;
   var scoreIncrease = 0;
   var isRunning = false;
   var dieOnLand = false;
   var dieOutsidePipe = false;
   var curPipeIsOne = false;
   var needUseDownBitmap = false;
   var plusScoreFlag1 = true;
   var plusScoreFlag2 = true;

   var dayBgBitmap;
   var landBitmap;
   var birdDownBitmap;
   var pipeDownBitmap;
   var pipeUpBitmap;
   var getReadyBitmap;
   var tutorialBitmap;
   var titleBitmap;
   var gameOverBitmap;

   var viewWidth = 0.0f;
   var viewHeight = 0.0f;
   var birdX = 0.0f;
   var birdY = 0.0f;
   var birdWidth = 0.0f;
   var birdHeight = 0.0f;
   var birdWidth2 = 0.0f;
   var birdHeight2 = 0.0f;
   var landY = 0.0f;
   var landX = 0.0f;
   var minPipeHeight = 0.0f;
   var maxPipeHeight = 0.0f;
   var pipeGap = 0.0f;
   var pipeX1 = 0.0f;
   var pipeX2 = 0.0f;
   var pipeWidth = 0.0f;
   var upPipeHeight1 = 0.0f;
   var upPipeHeight2 = 0.0f;
   var birdJump = 0.0f;
   var birdDownDis = 0.0f;
   var birdWingAnim = 0;

   new(context) {
      this.state = new ScoreState(context);
      this.random = new Random();
      this.bird = new Bird(context);
      this.scores = new Score(context);
      this.context = context;
      this.gameStatus = GameStatus.WAITING;

      initResources();

      var isSpeedMode = false; // increase the speed
      if (isSpeedMode) {
         speedX = 20;
         scoreIncrease = 2;
      } else {
         speedX = 10;
         scoreIncrease = 1;
      }
   }
   

   override onStart(frame: Frame, rate: Integer) {
      var w = frame.getWidth();
      var h = frame.getHeight();

      viewHeight = h;
      viewWidth = w;

      landY = h / 5 * 4;

      birdWidth = viewWidth / 10;
      birdHeight = birdWidth * 0.7f;
      birdWidth2 = birdHeight * 1.1f;
      birdHeight2 = birdWidth;
      birdY = landY / 2 - birdHeight;
      birdJump = birdHeight * Y_JUMP_THRUST; // bird jump height

      pipeGap = landY / 5;
      minPipeHeight = pipeGap * 0.5f;
      maxPipeHeight = pipeGap * 3.5f;
      pipeWidth = viewWidth / 7;
      pipeX1 = viewWidth;
      pipeX2 = pipeX1 + viewWidth / 2 + pipeWidth / 2;
      upPipeHeight1 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
      upPipeHeight2 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
      isRunning = true;
   }

   override onPause(frame: Frame) {

   }

   override onClick(frame: Frame, x: Integer, y: Integer) {
      if (gameStatus == GameStatus.WAITING) {
         gameStatus = GameStatus.RUNNING;
      } else if (gameStatus == GameStatus.RUNNING) {
         birdDownDis = -birdJump;
      } else {
         reset();
         gameStatus = GameStatus.WAITING;
      }
   }

   override onRightToLeftSwipe(frame: Frame) {

   }

   override onLeftToRightSwipe(frame: Frame) {

   }

   override onTopToBottomSwipe(frame: Frame) {

   }

   override onBottomToTopSwipe(frame: Frame) {

   }

   initResources() {
      dayBgBitmap = ImageStore.loadImage("/flappybird/bg_day.png");
      landBitmap = ImageStore.loadImage("/flappybird/land.png");
      birdDownBitmap = ImageStore.loadImage("/flappybird/bird0_4.png");
      pipeDownBitmap = ImageStore.loadImage("/flappybird/pipe_down.png");
      pipeUpBitmap = ImageStore.loadImage("/flappybird/pipe_up.png");
      getReadyBitmap = ImageStore.loadImage("/flappybird/get_ready.png");
      tutorialBitmap = ImageStore.loadImage("/flappybird/tutorial.png");
      titleBitmap = ImageStore.loadImage("/flappybird/title.png");
      gameOverBitmap = ImageStore.loadImage("/flappybird/game_over.png");
      bird.get(0);
      scores.get(0);
   }

   override onDestroyed(frame: Frame) {
      dayBgBitmap.recycle();
      landBitmap.recycle();
      bird.recycle();
      scores.recycle();
      birdDownBitmap.recycle();
      pipeDownBitmap.recycle();
      pipeUpBitmap.recycle();
      getReadyBitmap.recycle();
      tutorialBitmap.recycle();
      titleBitmap.recycle();
      gameOverBitmap.recycle();
      isRunning = false;
   }

   reset() {
      dieOnLand = false;
      dieOutsidePipe = false;
      curPipeIsOne = false;
      needUseDownBitmap = false;
      birdDownDis = 0;
      score = 0;
      plusScoreFlag1 = true;
      plusScoreFlag2 = true;
      birdY = landY / 2 - birdHeight;
      pipeX1 = viewWidth;
      pipeX2 = pipeX1 + viewWidth / 2 + pipeWidth / 2;
      upPipeHeight1 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
      upPipeHeight2 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
   }

   override onChanged(frame: Frame, format: Integer, width: Integer, height: Integer) {

   }

   isGameOver() {
      if (birdY > landY - birdHeight) {
         birdY = landY - birdHeight;
         dieOnLand = true;
         return true;
      }
      var isCrashPipe = checkPipeCrash(pipeX1, upPipeHeight1);
      if (isCrashPipe) {
         curPipeIsOne = true;
         return true;
      }
      isCrashPipe = checkPipeCrash(pipeX2, upPipeHeight2);
      if (isCrashPipe) {
         curPipeIsOne = false;
         return true;
      }
      return false;
   }

   checkPipeCrash(pipeX,upPipeHeight) {
      if (pipeX > birdX + birdWidth) {
         return false;
      }
      if (pipeX < birdX + birdWidth && pipeX - birdX - birdWidth < -speedX && pipeX > birdX + birdWidth - pipeWidth - birdWidth) {
         if (birdY > upPipeHeight && birdY + birdHeight < upPipeHeight + pipeGap) {
            return false;
         } else {
            if (birdY <= upPipeHeight) {
               birdY = upPipeHeight;
               needUseDownBitmap = true;
            }
            if (birdY >= upPipeHeight + pipeGap - birdHeight) {
               birdY = upPipeHeight + pipeGap - birdHeight;
               needUseDownBitmap = false;
            }
            dieOutsidePipe = false;
            return true;
         }
      } else if (pipeX < birdX + birdWidth && pipeX - birdX - birdWidth >= -speedX) {
         if (birdY > upPipeHeight && birdY + birdHeight < upPipeHeight + pipeGap) {
            return false;
         } else {
            dieOutsidePipe = true;
            needUseDownBitmap = true;
            return true;
         }
      }

      return false;
   }

   onUpdate(frame, rate) {
      if (gameStatus == GameStatus.RUNNING) {
         birdDownDis += (birdHeight * Y_DOWN_ACCELERATE);
         birdY += birdDownDis;
         if (birdY < -birdHeight) {
            birdY = -birdHeight;
         }
         if (isGameOver()) {
            gameStatus = GameStatus.OVER;
         }
      } else if (gameStatus == GameStatus.OVER) {
         if (dieOnLand) {
            return;
         }
         if (dieOutsidePipe) {
            if (birdY + birdHeight2 < landY) {
               birdDownDis += (birdHeight * Y_DOWN_ACCELERATE);
               birdY += birdDownDis;
            }
            if (birdY + birdHeight2 >= landY) {
               birdY = landY - birdHeight2;
            }
         } else {
            var mCurUpPipeHeight;
            if (curPipeIsOne) {
               mCurUpPipeHeight = upPipeHeight1;
            } else {
               mCurUpPipeHeight = upPipeHeight2;
            }
            if (birdY + birdHeight < mCurUpPipeHeight + pipeGap) {
               birdDownDis += (birdHeight * Y_DOWN_ACCELERATE);
               birdY += birdDownDis;
            }
            if (birdY + birdHeight2 > mCurUpPipeHeight + pipeGap) {
               if (needUseDownBitmap) {
                  birdY = mCurUpPipeHeight + pipeGap - birdHeight2;
               } else {
                  birdY = mCurUpPipeHeight + pipeGap - birdHeight;
               }
            }
         }
      }
   }

   onRender(frame, canvas) {
      try {
         if (canvas != null) {
            // draw
            drawBackground(canvas);
            drawBird(canvas);
            if (gameStatus != GameStatus.WAITING) {
               drawPipe(canvas);
            }
            if (gameStatus == GameStatus.WAITING) {
               drawReady(canvas);
            }
            if (gameStatus == GameStatus.OVER) {
               drawGameOver(canvas);
            }
            drawScore(canvas, score);
            drawLand(canvas);
         }
      } catch (e) {
         println("Render exception occurred!");
         e.printStackTrace();
      }
   }

   drawBackground(canvas) {
      var rectF = new RectF(0, 0, viewWidth, viewHeight);
      canvas.drawBitmap(dayBgBitmap, null, rectF, null);
   }

   drawLand(canvas) {
      if (gameStatus != GameStatus.OVER) {
         landX -= speedX;
      }
      if (Math.abs(landX) >= viewWidth) {
         landX = 0;
      }
      var rectF = new RectF(landX, landY, viewWidth + landX, viewHeight);
      canvas.drawBitmap(landBitmap, null, rectF, null);
      rectF.set(viewWidth + landX, landY, viewWidth + landX + viewWidth, viewHeight);
      canvas.drawBitmap(landBitmap, null, rectF, null);
   }

   drawBird(canvas) {
      birdX = viewWidth / 2 - birdWidth;
      var rectF = new RectF(birdX, birdY, birdX + birdWidth, birdY + birdHeight);

      if (gameStatus != GameStatus.OVER) {
         canvas.drawBitmap(bird.get(birdWingAnim % 3), null, rectF, null);
      } else {
         if (needUseDownBitmap) {
            rectF.set(birdX, birdY, birdX + birdWidth2, birdY + birdHeight2);
            canvas.drawBitmap(birdDownBitmap, null, rectF, null);
         } else {
            canvas.drawBitmap(bird.get(1), null, rectF, null);
         }
      }

      birdWingAnim++;
   }

   drawPipe(canvas) {
      if (pipeX1 > -pipeWidth) {
         drawOnePipe(canvas, pipeX1, upPipeHeight1);
      }
      if (pipeX2 > -pipeWidth && pipeX2 < viewWidth) {
         drawOnePipe(canvas, pipeX2, upPipeHeight2);
      }

      if (pipeX1 <= -pipeWidth) {
         pipeX1 = viewWidth;
         plusScoreFlag1 = true;
         upPipeHeight1 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
      }
      if (pipeX2 <= -pipeWidth) {
         pipeX2 = viewWidth;
         plusScoreFlag2 = true;
         upPipeHeight2 = random.nextFloat() * (maxPipeHeight - minPipeHeight) + minPipeHeight;
      }
      var highScore = state.getHighScore();
      
      if (pipeX1 + pipeWidth < birdX && plusScoreFlag1) {
         score += scoreIncrease;
         plusScoreFlag1 = false;
         if (score > highScore) {
            state.setHighScore(score);
         }
      }
      if (pipeX2 + pipeWidth < birdX && plusScoreFlag2) {
         score += scoreIncrease;
         plusScoreFlag2 = false;
         if (score > highScore) {
            state.setHighScore(score);
         }
      }

      if (gameStatus != GameStatus.OVER) {
         pipeX1 -= speedX;
         pipeX2 -= speedX;
      }
   }

   drawOnePipe(canvas,x,height) {
      var rectF = new RectF(x, 0, x + pipeWidth, landY);
      canvas.save();
      canvas.translate(0, -1 * (landY - height));
      canvas.drawBitmap(pipeUpBitmap, null, rectF, null);
      canvas.translate(0, landY - height + height + pipeGap);
      canvas.drawBitmap(pipeDownBitmap, null, rectF, null);
      canvas.restore();
   }

   drawScore(canvas,score) {
      var hundred;
      var decade;
      var unit;
      hundred = score / 100;
      decade = score % 100 / 10;
      unit = score % 10;
      var numWidth = birdWidth / 2;
      var numHeight = numWidth * 2;
      var numGap = numWidth / 20;
      var scoreWidth;
      var top = pipeGap;
      var bottom = pipeGap + numHeight;
      var center = viewWidth / 2;
      if (hundred != 0) {
         scoreWidth = 3 * numWidth + 2 * numGap;
         var rectF = new RectF(center - scoreWidth / 2, top, center - scoreWidth / 2 + numWidth, bottom);
         var hundredBitmap = scores.get(hundred);
         canvas.drawBitmap(hundredBitmap, null, rectF, null);
         rectF.set(center - numWidth / 2, top, center + numWidth / 2, bottom);
         var decadeBitmap = scores.get(decade);
         canvas.drawBitmap(decadeBitmap, null, rectF, null);
         rectF.set(center + numWidth / 2 + numGap, top, center + scoreWidth / 2 + numGap, bottom);
         var unitBitmap = scores.get(unit);
         canvas.drawBitmap(unitBitmap, null, rectF, null);
      }
      if (hundred == 0 && decade != 0) {
         scoreWidth = 2 * numWidth + numGap;
         var rectF = new RectF(center - scoreWidth / 2, top, center - scoreWidth / 2 + numWidth, bottom);
         var decadeBitmap = scores.get(decade);
         canvas.drawBitmap(decadeBitmap, null, rectF, null);
         rectF.set(center + numGap, top, center + numWidth + numGap, bottom);
         var unitBitmap = scores.get(unit);
         canvas.drawBitmap(unitBitmap, null, rectF, null);
      }
      if (hundred == 0 && decade == 0) {
         scoreWidth = numWidth;
         var rectF = new RectF(center - scoreWidth / 2, top, center + scoreWidth / 2, bottom);
         var bitmap = scores.get(unit);
         canvas.drawBitmap(bitmap, null, rectF, null);
      }
   }

   drawReady(canvas) {
      var center = viewWidth / 2;

      var getReadyWidth = pipeWidth * 3;
      var getReadyHeight = pipeGap * 0.7f;
      var getReadyY = birdY + birdHeight * 2;
      var rectF = new RectF(center - getReadyWidth / 2, getReadyY, center + getReadyWidth / 2, getReadyY + getReadyHeight);
      canvas.drawBitmap(getReadyBitmap, null, rectF, null);

      var tutorialWidth = getReadyWidth;
      var tutorialHeight = getReadyHeight * 2;
      var tutorialY = getReadyY + getReadyHeight;
      rectF.set(center - tutorialWidth / 2, tutorialY, center + tutorialWidth / 2, tutorialY + tutorialHeight);
      canvas.drawBitmap(tutorialBitmap, null, rectF, null);

      var titleWidth = getReadyWidth * 1.2f;
      var titleHeight = getReadyHeight * 0.6f;
      var titleY = pipeGap * 0.4f;
      rectF.set(center - titleWidth / 2, titleY, center + titleWidth / 2, titleY + titleHeight);
      canvas.drawBitmap(titleBitmap, null, rectF, null);
   }

   drawGameOver(canvas) {
      var center = viewWidth / 2;

      var panelWidth = viewWidth * 0.65f;
      var panelHeight = panelWidth * 0.45f;
      var panelY = landY / 2;
      // Drawable drawable =
      // mContext.getResources().getDrawable(R.drawable.shape_score_panel);
      // drawable.setBounds((int)(center - panelWidth / 2), (int)panelY,
      // (int)(center + panelWidth / 2), (int)(panelY + panelHeight));
      // drawable.draw(canvas);

      var gameOverWidth = pipeWidth * 3;
      var gameOverHeight = pipeGap * 0.6f;
      var gameOverY = landY / 2;
      var highScore = state.getHighScore();
      var rectF = new RectF(center - gameOverWidth / 2, gameOverY + birdHeight * 0.3f, center + gameOverWidth / 2, gameOverY + birdHeight * 0.3f + gameOverHeight);
      canvas.drawBitmap(gameOverBitmap, null, rectF, null);

      var paint = new Paint();
      paint.setTextAlign(Align.CENTER);
      paint.setTextSize(birdHeight);
      var font = Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL);
      paint.setTypeface(font);
      paint.setColor(Color.parseColor("#FCA048"));
      canvas.drawText("score:" + score + "  best:" + highScore, center, gameOverY + gameOverHeight + birdHeight * 1.2f, paint);
   }
}



