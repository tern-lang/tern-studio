import java.io.IOException;
import java.util.List;

import org.snapscript.game.framework.Game;
import org.snapscript.game.framework.Graphics;
import org.snapscript.game.framework.Screen;
import org.snapscript.game.framework.Input.TouchEvent;
import org.snapscript.game.framework.gfx.AndroidActivity;

import mario.core.GameLoader;
import mario.core.GameRenderer;
import mario.core.MarioGame;
import mario.core.MarioResourceManager;
import mario.core.tile.GameTile;
import mario.core.tile.TileMap;
import mario.objects.base.Creature;
import mario.objects.creatures.Coin;
import mario.objects.mario.Mario;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.util.Log;

class GameScreen extends Screen {
    enum GameState {
        Ready, Running, Paused, GameOver
    }

    var state: GameState = GameState.Ready;

    // Variable Setup
    var livesLeft: Integer = 1;
   private var mario: Mario;
   private var map: TileMap;
   private var backgroundMap: TileMap;
   private var foregroundMap: TileMap;
   private var renderer: GameRenderer;
   public var gameLoader: GameLoader;
   public var period: Integer=20;
   public var paint: Paint;
   public var paint2: Paint;
   public var frameBuffer: Bitmap;
   public var pauseDrawn: Boolean=false;
   public var readyDrawn: Boolean=false;
   /**to simulate key right key left using accelerometer*/
   private var eventID: Integer=0;
   private var gameCanvas: Canvas;
    public new(game: Game): super(game) {
        frameBuffer=game.getBuffer();
        gameCanvas=new Canvas(frameBuffer);
        // Initialize game objects here
        // Defining a paint object
        paint = new Paint();
        paint.setTextSize(12);
        paint.setTextAlign(Align.CENTER);
        //paint.setAntiAlias(true);
        paint.setColor(Color.WHITE);
       // paint.setFilterBitmap(true);
        
        paint2 = new Paint();
         paint2.setTextSize(60);
         paint2.setTextAlign(Align.CENTER);
         paint2.setAntiAlias(true);
         paint2.setColor(Color.WHITE);
        loadGame();
     }

     public loadGame(){
       //soundManager = new MarioSoundManager((Activity) game);
       //ResourceManager.prepareManager((Activity) game);
       mario = new Mario(game.soundManager);
       readyDrawn=false; 
      try {
         gameLoader = new GameLoader(game);
         renderer = new GameRenderer();
         renderer.setBackground(MarioResourceManager.Background);
         map = gameLoader.loadMap("maps/map3.txt", game.soundManager); // use the ResourceManager to load the game map
         backgroundMap = gameLoader.loadOtherMaps("maps/back3.txt");
         foregroundMap = gameLoader.loadOtherMaps("maps/fore3.txt");
         map.setPlayer(mario); // set the games main player to mario
      } catch (e: IOException){
         System.out.println("Invalid Map.");
         Log.e("Errrr", "invalid map");
      }
   }
     
    public override update(deltaTime: Float) {
        var touchEvents: List = game.getInput().getTouchEvents();

        // We have four separate update methods in this example.
        // Depending on the state of the game, we call different update methods.
    
        if (state == GameState.Ready)
            updateReady(touchEvents);
        if (state == GameState.Running)
            updateRunning(touchEvents, deltaTime);
        if (state == GameState.Paused)
            updatePaused(touchEvents);
        if (state == GameState.GameOver)
            updateGameOver(touchEvents);
    }

    private updateReady(touchEvents: List) {
        // This example starts with a "Ready" screen.
        // When the user touches the screen, the game begins. 
        // state now becomes GameState.Running.
        // Now the updateRunning() method will be called!
         if (touchEvents.size() > 0)
            state = GameState.Running;
    }

    private updateRunning(touchEvents: List, deltaTime: Float) {
       //if (state != GameState.Running)return;
       if (mario.getHealth()==0) state = GameState.GameOver;
       // 1. All touch input is handled here:
       var len: Integer = touchEvents.size();
       for (var i = 0; i < len; i++) {
          var event: TouchEvent = touchEvents.get(i);
          
          if (event.type == TouchEvent.TOUCH_DOWN) {
             if (event.y>200)mario.processEvent(2); 
             else
             mario.processEvent(0);
          }
       }
       //   2. Handle accelerometer
       var screenX: Float = game.getInput().getAccelY();
       // use screenX, screenY, as  accelerometer values now!
       var iD: Integer=eventID;
       if (screenX>1){
          iD=1;
          //mario.processEvent(-1);
       }else if (screenX<-1){
          iD=-1;
          //mario.processEvent(1);
       }else{
          iD=3;
          //mario.processEvent(3);
       }
       if (eventID!=iD){
          eventID=iD;
          mario.processEvent(eventID);
       }
             
       // Update all relevant Creatures.
       for(var i = 0; i < map.relevantCreatures().size(); i++) {
          var c: Creature = map.relevantCreatures().get(i);
          if(c !instanceof Coin) {
             c.updateCreature(map, period);
             mario.playerCollision(map, c);
             for(var other in map.relevantCreatures()) {
                c.creatureCollision(other);
             }
          } else {
             c.updateCreature(map, period);
             mario.playerCollision(map, c);
          }
       }
                
       // Debugging information:
       //System.out.println("relevant creatures size: " + map.relevantCreatures().size());
       //System.out.println("creatures size: " + map.creatures().size());
       //System.out.println(map.platforms().size());
       
       for(var tile in map.animatedTiles()) {
             //tile.collidingCreatures().clear();  // clear the colliding sprites on the tile
             tile.update(20);
       }
      

       for(var tile in backgroundMap.animatedTiles()) {
             tile.collidingCreatures().clear();  // clear the colliding sprites on the tile
             tile.update(20);
       }
      
       for(var tile in foregroundMap.animatedTiles()) {
             tile.collidingCreatures().clear();  // clear the colliding sprites on the tile
             tile.update(20);
       }
       
       // Add creatures that need to be created. They are added here to aconcurrent modifcation errors.
       for(var c in map.creaturesToAdd()) {
          map.creatures().add(c);
       }
       
       map.creaturesToAdd().clear(); // This line MUST be called BEFORE mario.update(). Why?
                              // If it is called after, all the creatures that are created
                              // as a result of mario colliding are not added next update because
                              // they are cleared immediately afterwards.

       mario.update(map, period);
       Coin.turn.update(period);
       map.relevantCreatures().clear();
       map.platforms().clear();
                
    }

    private updatePaused(touchEvents: List) {
      var len: Integer = touchEvents.size();
      for (var i = 0; i < len; i++) {
         var event: TouchEvent = touchEvents.get(i);
         if (event.type == TouchEvent.TOUCH_UP) {
            if (inBounds(event, 0, 0, 200, 240)) {

               if (!inBounds(event, 0, 0, 35, 35)) {
                  resume();
               }
            }

            if (inBounds(event, 0, 160, 300, 160)) {
               //nullify();
               goToMenu();
            }
         }
      }
   }

    private updateGameOver(touchEvents: List) {
        var len: Integer = touchEvents.size();
        for (var i = 0; i < len; i++) {
            var event: TouchEvent = touchEvents.get(i);
            if (event.type == TouchEvent.TOUCH_UP) {
                if (event.x > 300 && event.x < 980 && event.y > 100
                        && event.y < 500) {
                    nullify();
                    game.setScreen(new MainMenuScreen(game));
                    return;
                }
            }
        }
    }

    public override paint(deltaTime: Float) {
        // First draw the game elements.
       // Secondly, draw the UI above the game elements.
        if (state == GameState.Ready)
            drawReadyUI();
        if (state == GameState.Running)
            drawRunningUI();
        if (state == GameState.Paused)
            drawPausedUI();
        if (state == GameState.GameOver)
            drawGameOverUI();
    }

    private goToMenu() {
       var mainMenuScreen: MainMenuScreen=new MainMenuScreen(game);
        game.setScreen(mainMenuScreen);
     }
    
    private nullify() {
        // Set all variables to null. You will be recreating them in the
        // constructor.
        paint = null;
        // Call garbage collector to clean up memory.
        System.gc();
    }

    private drawReadyUI() {
       if (readyDrawn) return;
       readyDrawn=true;
       var g: Graphics = game.getGraphics();
       //Canvas canvas=new Canvas(frameBuffer);
        renderer.draw(gameCanvas, map, backgroundMap, foregroundMap, frameBuffer.getWidth(), frameBuffer.getHeight());

        g.drawARGB(120, 0, 0, 0);
        
        g.drawString("USe accelerometer to move mario and tap to jump.",
                200, 100, paint);
    }

 
   private drawRunningUI() {
       // var g: Graphics = game.getGraphics();
      //Canvas gameCanvas=new Canvas(frameBuffer);
        renderer.draw(gameCanvas, map, backgroundMap, foregroundMap, frameBuffer.getWidth(), frameBuffer.getHeight());
    }

    private drawPausedUI() {
        if (pauseDrawn) return;
        pauseDrawn=true;
       var g: Graphics = game.getGraphics();
      // Darken the entire screen so you can display the Paused screen.
        g.drawARGB(120, 0, 0, 0);
        /*
        var w: Integer=frameBuffer.getWidth();
        var h: Integer=frameBuffer.getHeight();
      //g.drawRect(0, 0, w, h, Color.argb(200, 100, 100, 100));
      g.drawString("Resume",w/2-50, h/2-30, paint2);
      g.drawString("Menu", w/2-40, h/2+30, paint2);
      */
    }

    private drawGameOverUI() {
        var g: Graphics = game.getGraphics();
       // g.drawRect(0, 0, 300, 200, Color.BLACK);
        g.drawString("GAME OVER.", 200, 130, paint2);
    }

   
    public override pause() {
       if (state == GameState.Running) {
          state = GameState.Paused;
          var builder: AlertDialog.Builder = new AlertDialog.Builder(game.getContext());
         builder.setTitle("Quit Game");
         builder.setPositiveButton("Quit", (dialog: DialogInterface, whichButton: Integer) -> {
             goToMenu();
         });
         builder.setNegativeButton("Cancel", (dialog: DialogInterface, whichButton: Integer) -> {
               state = GameState.Running;
         });
         builder.setMessage("Return to main menu?");
         builder.setOnCancelListener((dialog: DialogInterface) -> {
             state = GameState.Running;
         });
          var dialog: AlertDialog = builder.create();
          dialog.setCanceledOnTouchOutside(false);
          dialog.show();
       }

    }


   
   public override resume() {
      if (state == GameState.Paused)
         state = GameState.Running;
      pauseDrawn=false;
   }

    public override dispose() {

    }

    public override onBackPressed() {
       pause();
       
       if (state == GameState.Running){
         pause();
       }    else if(state == GameState.GameOver){
          goToMenu();
       }
 
    }
    
    private inBounds(event: TouchEvent, x: Integer, y: Integer, width: Integer,
         height: Integer): Boolean {
       
      if (event.x > x && event.x < x + width - 1 && event.y > y
            && event.y < y + height - 1)
         return true;
      else
         return false;
   }
}

