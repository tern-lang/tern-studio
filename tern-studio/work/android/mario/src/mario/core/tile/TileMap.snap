import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import mario.objects.base.Creature;
import mario.objects.creatures.Platform;
import mario.objects.mario.Mario;
import mario.objects.tiles.SlopedTile;
import mario.particles.ParticleSystem;
import android.graphics.Bitmap;


/**
 * The TileMap class contains all data for a tile-based map. 
 */

class TileMap {
   
   // fields
   private var tiles; 
   private var platforms; // List of Platforms on the current screen.
   private var creatures; // Starts containing every Creature and decreases as they die.
   private var relevantCreatures; // List of relevant Creatures to the current frame.
                                   // This is a subset of creatures.
   private var creaturesToAdd; // List of Creatures to be added inbetween frames.
   private var animatedTiles;
   private var slopedTiles;
   private var player; 
   private var visible =true;
   public var particleSystem;
   /**
    * Constructs a new TileMap with the specified width and height (in number of tiles)
    * of the map.
    */
   public new(width, height) {
      tiles = new GameTile[width][height];
      creatures = new LinkedList();
      relevantCreatures = new ArrayList();
      creaturesToAdd = new ArrayList();
      platforms = new ArrayList();
      animatedTiles = new ArrayList();
      slopedTiles = new ArrayList();
   }
   
   public getTiles() {
      return tiles;
   }
   
   /**
    * @return the width of this TileMap in GameTiles.
    */
   public getWidth() {
      return tiles.length;
   }
   
   /**
    * @return the height of this TileMap in GameTiles.
    */
   public getHeight() {
      return tiles[0].length;
   }
   
   /**
    * @return the GameTiles at tiles[x][y]. If x or y is out of bounds
    * or if tiles[x][y] == null, null is returned.
    */
   public getTile(x, y) {
      if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) {
         return null;
      } else {
         if(tiles[x][y] != null) {
            return tiles[x][y];
         } else {
            return null;
         }
      }
   }
   
   /**
    * @return the image of the GameTiles at tiles[x][y]. If x or y is out of bounds
    * or if tiles[x][y] == null, null is returned.
    */
   public getImage(x, y) {
      if (x < 0 || x >= getWidth() || y < 0 || y >= getHeight()) {
         return null;
      } else {
         if(tiles[x][y] != null) {
              return tiles[x][y].getImage();
         } else {
            return null;
         }
      }
   }
   
   /**
    * Sets tiles[x][y] equal to parameter tile.
    * This is used to set animated GameTiles.
    */
   public setTile(x, y, tile: GameTile) {
      tiles[x][y] = tile;
   }
   
   /**
    * Sets tiles[x][y] equal to a new Tile with no animation and the constant Image img.
    * This is used to set non-animated GameTiles.
    */
   public setTile(x, y, img: Bitmap) {
      tiles[x][y] = new GameTile(x, y, null, img);
   }
   
   /**
    * @return the player sprite.
    */
   public getPlayer() {
      return player;
   }
   
   /**
    * Sets the player sprite for this map.
    */
   public setPlayer(player) {
      this.player = player;
   }
   
   
   /**
    * @return a List containing every Platform in this map.
    */
   public platforms() {
      return platforms;
   }
   
   /**
    * @return a List containing every Creature in this map.
    */
   public creatures() {
      return creatures;
   }
   
   /**
    * @return a List containing Creatures to add to this map after the next game update.
    */
   public creaturesToAdd() {
      return creaturesToAdd;
   }
   
   /**
    * @return a List containing animated Tile in this map.
    */
   public animatedTiles() {
      return animatedTiles;
   }
   
   /**
    * @return a List containing every SlopedTile in this map.
    */
   public slopedTiles() {
      return slopedTiles;
   }
   
   /**
    * @return a List containing every relevant Creature in this map. 
    * 
    * A 'relevant Creature' is a Creature that the current frame cares about. 
    * This is generally creatures on screen or creatures that need to be updated globally. 
    */
   public relevantCreatures() {
      return relevantCreatures;
   }

   public isVisible() {
      return visible;
   }

   public setVisible(visible) {
      this.visible = visible;
   }
}

