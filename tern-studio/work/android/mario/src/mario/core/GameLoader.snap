import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import org.snapscript.game.framework.Game;

import mario.core.tile.GameTile;
import mario.core.tile.TileMap;
import mario.objects.creatures.Coin;
import mario.objects.creatures.Goomba;
import mario.objects.creatures.Piranha;
import mario.objects.creatures.Platform;
import mario.objects.creatures.RedKoopa;
import mario.objects.creatures.RedShell;
import mario.objects.creatures.Thorny;
import mario.objects.creatures.Tree;
import mario.objects.tiles.Brick;
import mario.objects.tiles.QuestionBlock;
import mario.objects.tiles.RotatingBlock;
import mario.objects.tiles.SlopedTile;
import mario.util.SpriteMap;
import android.graphics.Bitmap;


/**
 * map loader class
 * @author mahesh
 *
 */
class GameLoader {
   
   private var plain;
   private var plainTiles;
   
   private var sloped_image;
   private var grass_edge;
   private var grass_center;
   private var gameActivity;
   public new(activity) {
      this.gameActivity=activity;
      plain = new ArrayList();
      plainTiles = new SpriteMap(MarioResourceManager.Plain_Tiles, 6, 17).getSprites();
      
      for (var bImage in plainTiles) {
         plain.add(bImage);
      }
      
      sloped_image = MarioResourceManager.Sloped_Tile;
      grass_edge = MarioResourceManager.Grass_Edge;
      grass_center =MarioResourceManager.Grass_Center;
   }
   
   
   // BufferedImage -> Image
   // public static toImage(bufferedImage) {
   //    return Toolkit.getDefaultToolkit().createImage(bufferedImage.getSource());
   // }

   // loads a tile map, given a map to load..
    // use this to load the background and foreground. Note: the status of the tiles (ie collide etc)
    // is irrelevant. Why? I don't check collision on maps other than the main map. 
    public loadOtherMaps(filename)  {
      // lines is a list of strings, each element is a row of the map
      var lines = new ArrayList();
      var width = 0;
      var height = 0;
      
      // read in each line of the map into lines
      
      var reader = new Scanner(gameActivity.getContext().getAssets().open(filename));
      while(reader.hasNextLine()) {
         var line = reader.nextLine();
         if(!line.startsWith("#")) {
            lines.add(line);
            width = Math.max(width, line.length());
         }
      }
      height = lines.size(); // number of elements in lines is the height
      
      var newMap = new TileMap(width, height);
      for (var y=0; y < height; y++) {
         var line = lines.get(y);
         for (var x=0; x < line.length(); x++) {
            var ch = line.charAt(x);
            var pixelX = GameRenderer.tilesToPixels(x);
            var pixelY = GameRenderer.tilesToPixels(y);
            if (ch == 'n') {
               newMap.setTile(x, y, plain.get(92));
            } else if (ch == 'm') {
               newMap.setTile(x, y, plain.get(93));
            } else if (ch == 'a') {
               newMap.setTile(x, y, plain.get(90));
            } else if (ch == 'b') {
               newMap.setTile(x, y, plain.get(91));
            } else if (ch == 'q') { // rock left
               newMap.setTile(x, y, plain.get(48));
            } else if (ch == 'r') { // rock right
               newMap.setTile(x, y, plain.get(49));
            } else if (ch == 'z') { // tree stem
               newMap.setTile(x, y, plain.get(75));
            } else if (ch=='T') {
               var t = new Tree(pixelX, pixelY);
               newMap.setTile(x, y, t);
               newMap.animatedTiles().add(t);
            } else if (ch == 'V') {
               var t = new GameTile(pixelX, pixelY, plain.get(56));
               newMap.setTile(x, y, t);
            } else if (ch == '3') {
               var t = new GameTile(pixelX, pixelY, plain.get(4));
               newMap.setTile(x, y, t);
            } else if (ch == '4') {
               var t = new GameTile(pixelX, pixelY, plain.get(10));
               newMap.setTile(x, y, t);
            } else if (ch == '2') {
               var t = new GameTile(pixelX, pixelY, plain.get(86));
               newMap.setTile(x, y, t);
            }else if(ch == '9') {
               var t = new SlopedTile(pixelX, pixelY, sloped_image, true);
               newMap.setTile(x, y, t);
               newMap.slopedTiles().add(t);
            } else if(ch == '8') {
               var t = new GameTile(pixelX, pixelY, grass_edge);
               newMap.setTile(x, y, t);
            } else if(ch == '7') {
               var t = new GameTile(pixelX, pixelY, grass_center);
               newMap.setTile(x, y, t);
            } else if(ch == 't') {
               var t = new GameTile(pixelX, pixelY, plain.get(96)); //pipe top left
               newMap.setTile(x, y, t);
            } else if(ch == 'u') {
               var t = new GameTile(pixelX, pixelY, plain.get(97)); //pipe top middle
               newMap.setTile(x, y, t);
            } else if(ch == 'v') {
               var t = new GameTile(pixelX, pixelY, plain.get(98)); //pipe top right
               newMap.setTile(x, y, t);
            } else if(ch == 'w') {
               var t = new GameTile(pixelX, pixelY, plain.get(99)); //pipe base left
               newMap.setTile(x, y, t);
            } else if(ch == 'x') {
               var t = new GameTile(pixelX, pixelY, plain.get(100)); //pipe base middle
               newMap.setTile(x, y, t);
            } else if(ch == 'y') {
               var t = new GameTile(pixelX, pixelY, plain.get(101)); //pipe base right
               newMap.setTile(x, y, t);
            } else if(ch == 'z') {
               var t = new GameTile(pixelX, pixelY, plain.get(75)); //tree stem
               newMap.setTile(x, y, t);
            }else if(ch == 'n') {
               newMap.setTile(x, y, plain.get(92));
            } else if (ch == 'm') {
               newMap.setTile(x, y, plain.get(93));
            } else if (ch == 'a') {
               newMap.setTile(x, y, plain.get(90));
            } else if (ch == 'b') {
               newMap.setTile(x, y, plain.get(91));
            } else if (ch == 'q') { // rock left
               newMap.setTile(x, y, plain.get(48));
            } else if (ch == 'r') { // rock right
               newMap.setTile(x, y, plain.get(49));
            }
         }
      }
      return newMap;   
   }
       
    // Use this to load the main map
   public loadMap(filename, soundManager)  {
      // lines is a list of strings, each element is a row of the map
      var lines = new ArrayList();
      var width = 0;
      var height = 0;
      
      // read in each line of the map into lines
      var reader = new Scanner(gameActivity.getContext().getAssets().open(filename));
      while(reader.hasNextLine()) {
         var line = reader.nextLine();
         if(!line.startsWith("#")) {
            lines.add(line);
            width = Math.max(width, line.length());
         }
      }
      height = lines.size(); // number of elements in lines is the height
      
      var newMap = new TileMap(width, height);
      for (var y=0; y < height; y++) {
         var line = lines.get(y);
         for (var x=0; x < line.length(); x++) {
            var ch = line.charAt(x);
            
            var pixelX = GameRenderer.tilesToPixels(x);
            var pixelY = GameRenderer.tilesToPixels(y);
            // enumerate the possible tiles...
            if (ch == 'G') {
               newMap.creatures().add(new Goomba(pixelX, pixelY, soundManager));
            } else if (ch == 'K') {
               newMap.creatures().add(new RedKoopa(pixelX, pixelY, soundManager));
            } else if (ch == 'H') {
               newMap.creatures().add(new Thorny(pixelX, pixelY, soundManager));
            } else if (ch == 'V') {
               var t = new GameTile(pixelX, pixelY, plain.get(56));
               newMap.setTile(x, y, t);
            } else if (ch == 'J') {
               var t = new Piranha(pixelX, pixelY,soundManager);
               newMap.creatures().add(t);
            } else if (ch=='B') {
               var b = new Brick(pixelX, pixelY,newMap, plain.get(77),soundManager,10*Math.floor(Math.random()*1.1),false);
               newMap.setTile(x, y, b);
               newMap.animatedTiles().add(b);   
            } else if (ch == 'R') {
               var r = new RotatingBlock(pixelX, pixelY);
               newMap.setTile(x, y, r);
               newMap.animatedTiles().add(r);
            } else if (ch == '3') {
               var t = new GameTile(pixelX, pixelY, plain.get(4));
               newMap.setTile(x, y, t);
            } else if (ch == '4') {
               var t = new GameTile(pixelX, pixelY, plain.get(10));
               newMap.setTile(x, y, t);
            } else if (ch == '2') {
               var t = new GameTile(pixelX, pixelY, plain.get(86));
               newMap.setTile(x, y, t);
            } else if (ch == 'Q') {
               var q = new QuestionBlock(pixelX, pixelY, newMap, soundManager, true, false);
               newMap.setTile(x, y, q);
               newMap.animatedTiles().add(q);
            } else if (ch == 'W') {
               var q = new QuestionBlock(pixelX, pixelY, newMap, soundManager, false, true);
               newMap.setTile(x, y, q);
               newMap.animatedTiles().add(q);
            } else if (ch == 'S') {
               newMap.creatures().add(new RedShell(pixelX, pixelY, newMap, soundManager, true));
            } else if(ch == 'C') {
               newMap.creatures().add(new Coin(pixelX, pixelY));
            } else if(ch == 'P') {
               var p = new Platform(pixelX, pixelY);
               newMap.creatures().add(p);
            } else if (ch=='T') {
               var t = new Tree(pixelX, pixelY);
               newMap.setTile(x, y, t);
               newMap.animatedTiles().add(t);
            }else if(ch == '9') {
               var t = new SlopedTile(pixelX, pixelY, sloped_image, true);
               newMap.setTile(x, y, t);
               newMap.slopedTiles().add(t);
            } else if(ch == '8') {
               var t = new GameTile(pixelX, pixelY, grass_edge);
               newMap.setTile(x, y, t);
            } else if(ch == '7') {
               var t = new GameTile(pixelX, pixelY, grass_center);
               newMap.setTile(x, y, t);
         
            } else if(ch == 't') {
               var t = new GameTile(pixelX, pixelY, plain.get(96)); //pipe top left
               newMap.setTile(x, y, t);
            } else if(ch == 'u') {
               var t = new GameTile(pixelX, pixelY, plain.get(97)); //pipe top middle
               newMap.setTile(x, y, t);
            } else if(ch == 'v') {
               var t = new GameTile(pixelX, pixelY, plain.get(98)); //pipe top right
               newMap.setTile(x, y, t);
            } else if(ch == 'w') {
               var t = new GameTile(pixelX, pixelY, plain.get(99)); //pipe base left
               newMap.setTile(x, y, t);
            } else if(ch == 'x') {
               var t = new GameTile(pixelX, pixelY, plain.get(100)); //pipe base middle
               newMap.setTile(x, y, t);
            } else if(ch == 'y') {
               var t = new GameTile(pixelX, pixelY, plain.get(101)); //pipe base right
               newMap.setTile(x, y, t);
            } else if(ch == 'z') {
               var t = new GameTile(pixelX, pixelY, plain.get(75)); //tree stem
               newMap.setTile(x, y, t);
            }
         }
      }
      return newMap;   
   }

   // Fills given tile mapFrom file. Used in Editor
    public fillMap(filename, map)  {
      // lines is a list of strings, each element is a row of the map
      var lines = new ArrayList();
      var width = 0;
      var height = 0;
      
      // read in each line of the map into lines
      var reader = new Scanner(new File(filename));
      while(reader.hasNextLine()) {
         var line = reader.nextLine();
         if(!line.startsWith("#")) {
            lines.add(line);
            width = Math.max(width, line.length());
         }
      }
      height = lines.size(); // number of elements in lines is the height
      
      height=Math.min(height,map.getHeight());
      width=Math.min(width, map.getWidth());
      
      for (var y=0; y < height; y++) {
         var line = lines.get(y);
         for (var x=0; x < line.length(); x++) {
            var ch = line.charAt(x);
            
            if (ch == 'n') {
               map.setTile(x, y, plain.get(92));
            } else if (ch == 'm') {
               map.setTile(x, y, plain.get(93));
            } else if (ch == 'a') {
               map.setTile(x, y, plain.get(90));
            } else if (ch == 'b') {
               map.setTile(x, y, plain.get(91));
            } else if (ch == 'q') { // rock left
               map.setTile(x, y, plain.get(48));
            } else if (ch == 'r') { // rock right
               map.setTile(x, y, plain.get(49));
            } else if (ch == 'z') { // tree stem
               map.setTile(x, y, plain.get(75));
            } else if (ch=='T') {
               var pixelX = GameRenderer.tilesToPixels(x);
               var pixelY = GameRenderer.tilesToPixels(y);
               var t = new Tree(pixelX, pixelY);
               map.setTile(x, y, t);
               map.animatedTiles().add(t);
            }
         }
      }
      
   }
   
}

