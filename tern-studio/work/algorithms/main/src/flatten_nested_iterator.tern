
flatten([[1,1],2,[1,1]]).forEachRemaining(this::println);
flatten([1,[4,[6]]]).forEachRemaining(this::println);

func flatten(list): Iterator {
   return new NestedIterator(list);
}

class NestedIterator with Iterator {

   let stack = new Stack();
   let next;
   
   new(list) {
      stack.push(new Entry(list));
   }
   
   override next() {
      if(hasNext()) {
         let result = next;
         next = null;
         return result;
      }
      return false;
   }

   override hasNext() {
      if(!next) {
         let entry = stack.isEmpty() ? null : stack.peek();
      
         while(entry) {
            if(entry.pos < entry.list.length) {
               let item = entry.list[entry.pos++];
               
               if(item instanceof List){
                  entry = new Entry(item);
                  stack.push(entry);
               } else {
                  next = item;
                  return true;
               }
            } else {
               entry = stack.isEmpty() ? null : stack.pop();
            }
         }
         return false;
      }
      return true;   
   }
   
   class Entry {
      let list;
      let pos;
      
      new(list) {
         this.list = list;
         this.pos = 0;
      }
   }
}