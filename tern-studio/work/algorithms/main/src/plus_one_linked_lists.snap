//https://www.programcreek.com/2014/08/leetcode-plus-one-linked-list-java/

let list1 = listOf(1,2,3);
let list2 = listOf(1,0,9,9);

println(list1);
println(list2);

assert plusOne(list2).toString() == "[1,1,0,0]";
assert plusOne(list1).toString() == "[1,2,4]";

class ListNode {
   let next;
   let val;
   
   new(val){
      this.val = val;
   }
   
   override toString() {
      let text = "[";
      let node = this;
      
      while(node) {
         text += node.val;
         
         if(node.next) {
            text += ",";
         }
         node = node.next;
      }
      return text + "]";
   }
}

func plusOne(node: ListNode) {
   let result = plusOne(node, 0);
   
   if(result.val > 9){
      let root = new ListNode(1);
      root.next = result;
      return root;
   }
   return result;
}

func plusOne(node: ListNode, depth) {
   if(node.next == null) {
      return new ListNode(node.val +1);
   }
   let next = plusOne(node.next, depth+1);
   let val = next.val;
   
   if(next.val > 9){
      let prev = new ListNode(node.val + 1);
      next.val = 0;
      prev.next = next;
      return prev;
   } else {
      let prev = new ListNode(node.val);
      prev.next = next;
      return prev;
   }
}


func listOf(nums...) {
   if(nums.length <= 0) {
      throw 'Must be at least one number';
   }
   let root = new ListNode(nums[0]);
   let prev = root;
   
   for(i in 1 to nums.length -1) {
      let node = new ListNode(nums[i]);
      prev.next = node;
      prev = node;
   }
   return root;
}

