
let tree: Tree<Number> = new Tree<Number>();

tree.add(7);
tree.add(2);
tree.add(6);
tree.add(9);
tree.add(3);
tree.add(5);
tree.add(1);
tree.add(8);

let root = tree.flatten();

// while(root) {
//    println(root.val);
//    root = root.node2;
// }

class BiNode<T> {
   let node1: BiNode<T>;
   let node2: BiNode<T>;
   let val: T;
   
   new(val: T) {
      this.val = val;
   }
   
   override toString(){
      return "${val}";
      
   }
}

class Tree<T>{
   let root: BiNode<T>;
   
   add(val: T){
      let node = new BiNode<T>(val);
      
      if(root) {
         add(node, root);
      } else {
         root = node;
      }
   }
   
   add(node, root) {
      if(node.val < root.val) {
         if(root.node1) {
            add(node, root.node1);
         } else {
            root.node1 = node;
         }
      }
      if(node.val > root.val) {
         if(root.node2) {
            add(node, root.node2);
         } else {
            root.node2 = node;
         }
      }
   }
   
   flatten() {
      return flatten(root, root);
   }
   
   flatten(node, prev) {
      if(node) {
         let lowestLeft = flatten(node.node1, node); // lower than node
         println(node);
         let lowestRight = flatten(node.node2, node); // higher than node
         
         if(lowestLeft != node) {
            node.node1 = lowestLeft; // behind
         } else {
            node.node1 = null;
         }
         node.node2 = lowestRight; // forward
      
         return prev.val < node.val ? prev : node;
      }
      return prev; // will always be non-null
   }
   

}