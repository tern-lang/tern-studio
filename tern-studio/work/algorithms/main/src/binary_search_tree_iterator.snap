

let tree: Tree = new Tree();

tree.add(7);
tree.add(2);
tree.add(6);
tree.add(9);
tree.add(3);
tree.add(5);
tree.add(1);
tree.add(8);

let iterator: TreeIterator = tree.iterator();

while(iterator.hasNext()) {
   let val = iterator.next();
   println(val);
}

class Tree {
   let root: TreeNode;
   
   public iterator(): TreeIterator {
      return new TreeIterator(root);
   }
   
   public add(val){
      let node: TreeNode = new TreeNode(val);
      
      if(root) {
         add(node, root);
      } else {
         root = node;
      }
   }
   
   private add(node: TreeNode, root: TreeNode) {
      if(node.val < root.val) {
         if(root.left) {
            add(node, root.left);
         } else {
            root.left = node;
         }
      }
      if(node.val > root.val) {
         if(root.right) {
            add(node, root.right);
         } else {
            root.right = node;
         }
      }
   }

}

class TreeNode {
   let left: TreeNode;
   let right: TreeNode;
   let val;
   
   new(val){
      this.val = val;
   }
}


class TreeIterator { 
   private let curr: TreeNode;
   private let prev: TreeNode;
   private let stack: Stack;
   
   new(curr: TreeNode) {
      this.stack = new Stack();
      this.curr = curr;
   }
      
   hasNext() {
      if(!curr || !prev) {
         updateNode();
      }
      let size = stack.size();
      return size > 0 || curr;
   }
   
   next() {
      if(curr) {
         let val = curr.val;
         prev = curr;
         curr = null;
         updateNode();
         return val;
      }
      return null;
   }
   
   updateNode() {
      if(prev == null) { // first time
         let node = curr;
         
         while(node){
            stack.push(node);
            node = node.left;
         }
         curr = stack.pop();
      } 
      let size = stack.size();
      
      if(curr == null && size > 0) {
         curr = stack.pop();
         
         if(curr.val > prev.val) { // returning from the left
            if(curr.right) { // is there a right node
               let node = curr.right;
               
               while(node){
                  stack.push(node);
                  node = node.left;
               }
            }
         }
      }
   }
}