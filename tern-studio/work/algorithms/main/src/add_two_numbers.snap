// https://leetcode.com/problems/add-two-numbers/description/

let r1 = addTwoNumbers(
   toNumberList("243"), 
   toNumberList("564")
);

let r2 = addTwoNumbers(
   toNumberList("81"),
   toNumberList("0")
);

assert fromNumberList(r1) == "807";
assert fromNumberList(r2) == "81";

func addTwoNumbers(l1, l2) {
   let list = new List();
   let carry = 0;
   
   while(l1 || l2){
      let v1 = l1 ? l1.val : 0;
      let v2 = l2 ? l2.val : 0;
      let sum = v1 + v2 + carry;
      let mod = sum % 10;
      
      carry = (sum - mod) / 10;
      list.add(mod);
      l1 = l1 ? l1.next : null;
      l2 = l2 ? l2.next : null;
   }
   while(carry >0){
      list.add(carry %10);
      carry /= 10;
   }
   return list.root;
}

func fromNumberList(node) {
   let builder = new StringBuilder();
   
   while(node) {
      builder.append("${node.val}");
      node = node.next;
   }
   return builder.reverse().toString();
}

func toNumberList(text) {
   let list = new List();
   let reverse = new StringBuilder(text).reverse();
   
   for(i in 0 .. reverse.length -1) {
      let char = reverse.charAt(i);
      let num = Integer.parseInt(char);
      
      list.add(num);
   }
   return list.root;
}

class List {
   let root: ListNode;
   let tail: ListNode;
   
   add(val) {
      let node = new ListNode(val);
      
      if(root) {
         tail.next = node;
         tail = node;
      } else {
         root = node; 
         tail = node;
      }
   }
}

class ListNode {
   let next: ListNode;
   let val;
   new(val) {
      this.val = val;
   }
}