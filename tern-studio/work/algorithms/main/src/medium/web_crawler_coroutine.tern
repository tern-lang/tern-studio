import util.regex.Pattern;
import util.concurrent.LinkedBlockingQueue;

crawl("https://news.ycombinator.com/").iterator().forEachRemaining(this::println);

func crawl(location: String) {
   let queue = LinkedBlockingQueue();
   let done = {:};
   
   queue.offer({
      'location': location, 
      'distance': 0}
   );
   
   loop {
      let next = queue.take();

      if(next) {
         collect(next, done, queue);
      }
      yield next; // yield the result
   }
}

async func collect(page, done, queue) {
   let lines = await URL(page.location)
      .get()
      .response()
      .getInputStream()
      .reader()
      .readLines();
      
   let pattern = Pattern.compile(`.*href=['|"](https://.*?)['|"].*`);
   let children = [];
      
   for(line in lines) {
      if(line.contains("href=")) {
         let matcher = pattern.matcher(line);
         
         if(matcher.matches()) {
            let location = matcher.group(1);
            let uri = URI.create(location);
            let paths = done.computeIfAbsent(uri.host, (_) -> HashSet());
            
            if(paths.add(uri.path)) {
               queue.offer({
                  'location': location, 
                  'distance': page.distance + 1}
               );
            }
         }
      }
   }
}

