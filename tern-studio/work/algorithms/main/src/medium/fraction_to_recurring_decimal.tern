// https://leetcode.com/problems/fraction-to-recurring-decimal/

assert fractionToDecimal(250, 6) == "41.6666";
assert fractionToDecimal(1, 2) == "0.5";
assert fractionToDecimal(2, 1) == "2";
assert fractionToDecimal(2, 3) == "0.6666";

func fractionToDecimal(const numerator, const denominator){
   // this is basically long division
   
   let builder = new StringBuilder();
   let remainder = 0;
   let number = 0;
   
   if(numerator > 0) {
      remainder = numerator % denominator;   
      
      builder.append(numerator / denominator);
      
      if(remainder > 0) {
         builder.append(".");
      }
   }
   let round = 5;
   
   while(remainder > 0 && round-- > 0) {
      let carry = remainder % denominator;
      let result = remainder / denominator;
      
      if(result != 0) {
         builder.append(result);
         remainder = carry;
      } 
      remainder *= 10;
   }
   println("${numerator} / ${denominator} = ${builder}");
   return builder.toString();
}

/*

   ______
6 | 250
    2     --> 0
    25    --> 4 -> carry 1
      10  --> 1 -> carry 4
          --> .      
      40  --> 6 --> carry 4
       40 --> 6 --> carry 4
*/