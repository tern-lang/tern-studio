
assert merge([[1,4],[2,3]]) == [[1,4]];
assert merge([[1,4],[0,2],[3,5]]) == [[0,5]];
assert merge([[1,4],[4,5]]) == [[1,5]];
assert merge([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]];

func merge(intervals) {
   Collections.sort(intervals, (a, b) -> Integer.compare(b[0], a[0]));
   
   let stack = Stack();
   let result = []; // resulting array
   
   for(let interval in intervals){
      stack.push(interval); // lowest on top
   }
   while(stack.size() > 1) {
      let best = stack.pop();
      let next = stack.pop();
      let merged = merge(best, next);
      
      if(merged == null){
         result.add(best);
         stack.push(next);
      } else {
         stack.push(merged);
      }
   }
   if(!stack.isEmpty()) {
      let best = stack.pop();
      result.add(best);
   }
   println(result);
   return result;
}

func merge(left, right) {
   if(left[1] < right[0]) { // [1,2][3,4]
      return null; // they do not overlap
   }
   if(left[1] >= right[0]) { // [2,3][3,4]
      if(left[1] >= right[1]) {
         return left; // left totally consumes right
      }
      return [left[0], right[1]]; // merge them
   }
   return null;
}
