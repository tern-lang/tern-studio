//https://leetcode.com/problems/trapping-rain-water/

assert trap([5,2,1,2,1,5]) == 14; // this is a tricky one
assert trap([2,1,0,2]) == 3;
assert trap([2,0,2]) == 2;
assert trap([0,1,0,2,1,0,1,3,2,1,2,1]) == 6;

func trap(heights) {
   let left = findTop(heights, 0, 0);
   let bottom = findBottom(heights,left);   
   let right = findTop(heights, bottom, left);
   let buckets = [];
   let total = 0;
      
   while(right != -1 && bottom != -1) {
      buckets.add([left, right]);
      
      left = right;
      bottom = findBottom(heights,left);
      right = findTop(heights, bottom, left);
   }
   for(bucket in buckets) {
      let start = bucket[0];
      let finish = bucket[1];
      let height = Math.min(heights[start], heights[finish]);
      let width = (bucket[1] - bucket[0]) + 1;
      let area = width * height;
      
      //println(bucket + " -> ${width} x ${height} = "+area);
      
      for(i in 0 to width - 1) {
         area -= Math.min(heights[i + start], height);
      }
      total += area;
   }
   return total;
}

func findBottom(heights, pos) {
   if(pos >= 0) {
      for(i in pos to heights.length -2) {
         if(heights[i + 1] > heights[i]) {
            return i; // we have found the bottom
         }
      }
   }
   return -1;
}

func findTop(heights, pos, left){ // when we a
   if(pos >= 0) {
      let highest = -1;
      
      for(i in pos to heights.length -2) {
         if(heights[i+1] < heights[i]) {
            highest = i; // we have found the top
            break;
         } 
         if(heights[i+1] > heights[pos] && heights[i+1] > highest) {
            highest = i+1;
         }
      }
      if(heights[highest] < heights[left]) {
         for(i in highest to heights.length -1){
            if(heights[i] > heights[highest]) {
               highest = i;
               
               if(heights[i] >= heights[left]) {
                  break;
               }
            }
         }
      }
      return highest;
   }
   return -1;
}

