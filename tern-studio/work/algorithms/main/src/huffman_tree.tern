
class Pair {

   const char;
   const count;
   
   new(char, count) {
      this.char = char;
      this.count = count;
   }
   
   override toString() {
      "${count} -> ${char}";
   }
}

func index(file): Iterator<Pair> {
   const reader = File(file).reader();
   const count = {:};
   
   while(reader.ready) {
      const next = reader.read();
      const value = count[next] ?? 0;
      
      count[next] = value+1;
   }
   return count.entrySet()
      .stream()
      .map(e -> Pair(e.key, e.value))
      .sorted((a, b) -> Integer.compare(a.count, b.count))
      .iterator();
}

func load(): Iterator<Pair> {
   const root = "C:\\Work\\development\\tern-lang\\tern-studio\\tern-studio\\work\\algorithms";
   const path = "main\\src\\huffman_tree.tern";
   const file = "${root}\\${path}";
   
   return index(file);
}

load().forEachRemaining(this::println);
